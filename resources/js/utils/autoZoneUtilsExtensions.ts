// autoZoneUtilsExtensions.ts - ‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö autoZoneUtils.ts

import { Coordinate, PlantLocation, IrrigationZone } from './irrigationZoneUtils';
import { isPointInPolygon, findPlantsInPolygon, checkPolygonIntersection } from './autoZoneUtils';

// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏ã‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
export const updateEditedZone = (
    zones: IrrigationZone[],
    editedZone: IrrigationZone,
    allPlants: PlantLocation[]
): IrrigationZone[] => {
    // ‡∏´‡∏≤‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏ã‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß
    const plantsInEditedZone = findPlantsInPolygon(allPlants, editedZone.coordinates);
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏ã‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
    const updatedEditedZone: IrrigationZone = {
        ...editedZone,
        plants: plantsInEditedZone,
        totalWaterNeed: plantsInEditedZone.reduce((sum, plant) => sum + plant.plantData.waterNeed, 0)
    };

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï zoneId ‡∏Ç‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const updatedPlants = allPlants.map(plant => {
        const newZoneId = plantsInEditedZone.find(p => p.id === plant.id) ? editedZone.id : plant.zoneId;
        return { ...plant, zoneId: newZoneId };
    });

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏ã‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
    const updatedZones = zones.map(zone => {
        if (zone.id === editedZone.id) {
            return updatedEditedZone;
        } else {
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏ã‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÇ‡∏î‡∏¢‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏ã‡∏ô‡∏ô‡∏±‡πâ‡∏ô‡πÜ
            const plantsInThisZone = updatedPlants.filter(plant => plant.zoneId === zone.id);
            return {
                ...zone,
                plants: plantsInThisZone,
                totalWaterNeed: plantsInThisZone.reduce((sum, plant) => sum + plant.plantData.waterNeed, 0)
            };
        }
    });

    return updatedZones;
};

// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏ã‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç (‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÇ‡∏ã‡∏ô)
export const recalculateAllZones = (
    zones: IrrigationZone[],
    allPlants: PlantLocation[]
): IrrigationZone[] => {

    
    const updatedZones = zones.map(zone => {
        // ‡∏´‡∏≤‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏ã‡∏ô‡∏ô‡∏µ‡πâ
        const plantsInZone = findPlantsInPolygon(allPlants, zone.coordinates);
        
        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡πâ‡∏≥‡∏£‡∏ß‡∏°
        const totalWaterNeed = plantsInZone.reduce((sum, plant) => sum + plant.plantData.waterNeed, 0);
        
        console.log(`üìä Zone ${zone.name}: ${plantsInZone.length} plants, ${totalWaterNeed.toFixed(2)} L/min water need`);
        
        return {
            ...zone,
            plants: plantsInZone,
            totalWaterNeed: totalWaterNeed
        };
    });

    console.log(`‚úÖ Recalculated ${updatedZones.length} zones`);
    return updatedZones;
};

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡πÇ‡∏ã‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
export const validateEditedZone = (
    editedZone: IrrigationZone,
    allZones: IrrigationZone[],
    mainArea: Coordinate[]
): {
    isValid: boolean;
    errors: string[];
    warnings: string[];
} => {
    const errors: string[] = [];
    const warnings: string[] = [];

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÇ‡∏ã‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏±‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!isPolygonWithinMainArea(editedZone.coordinates, mainArea)) {
        errors.push(`‡πÇ‡∏ã‡∏ô ${editedZone.name} ‡∏°‡∏µ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏≠‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏±‡∏Å`);
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡∏Å‡∏±‡∏ö‡πÇ‡∏ã‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÜ
    const otherZones = allZones.filter(zone => zone.id !== editedZone.id);
    for (const otherZone of otherZones) {
        if (checkPolygonIntersection(editedZone.coordinates, otherZone.coordinates)) {
            warnings.push(`‡πÇ‡∏ã‡∏ô ${editedZone.name} ‡∏ó‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡∏Å‡∏±‡∏ö‡πÇ‡∏ã‡∏ô ${otherZone.name}`);
        }
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ
    if (editedZone.plants.length === 0) {
        warnings.push(`‡πÇ‡∏ã‡∏ô ${editedZone.name} ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ`);
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡∏ó‡∏£‡∏á‡πÇ‡∏ã‡∏ô
    if (editedZone.coordinates.length < 3) {
        errors.push(`‡πÇ‡∏ã‡∏ô ${editedZone.name} ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏à‡∏∏‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 3 ‡∏à‡∏∏‡∏î`);
    }

    return {
        isValid: errors.length === 0,
        errors,
        warnings
    };
};

// Helper function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏û‡∏≠‡∏•‡∏¥‡∏Å‡∏≠‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏±‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
const isPolygonWithinMainArea = (polygon: Coordinate[], mainArea: Coordinate[]): boolean => {
    return polygon.every(point => isPointInPolygon(point, mainArea));
};

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏ã‡∏ô
export const generateZoneEditStats = (
    originalZones: IrrigationZone[],
    editedZones: IrrigationZone[]
): {
    totalZones: number;
    modifiedZones: number;
    totalPlants: number;
    totalWaterNeed: number;
    balanceImprovement: number;
} => {
    const modifiedZones = editedZones.filter((editedZone, index) => {
        const originalZone = originalZones[index];
        return originalZone && (
            JSON.stringify(editedZone.coordinates) !== JSON.stringify(originalZone.coordinates) ||
            editedZone.plants.length !== originalZone.plants.length
        );
    }).length;

    const totalPlants = editedZones.reduce((sum, zone) => sum + zone.plants.length, 0);
    const totalWaterNeed = editedZones.reduce((sum, zone) => sum + zone.totalWaterNeed, 0);
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ô‡πâ‡∏≥
    const originalWaterNeeds = originalZones.map(z => z.totalWaterNeed);
    const editedWaterNeeds = editedZones.map(z => z.totalWaterNeed);
    
    const originalVariance = calculateWaterNeedVariance(originalWaterNeeds);
    const editedVariance = calculateWaterNeedVariance(editedWaterNeeds);
    
    const balanceImprovement = originalVariance > 0 ? 
        ((originalVariance - editedVariance) / originalVariance) * 100 : 0;

    return {
        totalZones: editedZones.length,
        modifiedZones,
        totalPlants,
        totalWaterNeed,
        balanceImprovement
    };
};

// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏õ‡∏£‡∏õ‡∏£‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡πâ‡∏≥
const calculateWaterNeedVariance = (waterNeeds: number[]): number => {
    if (waterNeeds.length === 0) return 0;
    
    const mean = waterNeeds.reduce((sum, need) => sum + need, 0) / waterNeeds.length;
    const variance = waterNeeds.reduce((sum, need) => sum + Math.pow(need - mean, 2), 0) / waterNeeds.length;
    
    return variance;
};
