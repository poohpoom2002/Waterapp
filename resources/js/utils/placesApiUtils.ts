// utils/placesApiUtils.ts - Utility functions ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Places API
import { GOOGLE_MAPS_CONFIG, GOOGLE_MAPS_ERRORS } from './googleMapsConfig';

export interface SearchResult {
    place_id: string;
    name: string;
    formatted_address: string;
    geometry: {
        location?: google.maps.LatLng;
    };
    types: string[];
    rating?: number;
    photos?: any[];
    vicinity?: string;
    business_status?: string;
}

export interface SearchError {
    code: string;
    message: string;
    suggestions: string[];
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á PlaceResult ‡πÄ‡∏õ‡πá‡∏ô SearchResult
export const convertPlaceResultToSearchResult = (
    place: google.maps.places.PlaceResult
): SearchResult => {
    return {
        place_id: place.place_id || '',
        name: place.name || '',
        formatted_address: place.formatted_address || '',
        geometry: place.geometry!,
        types: place.types || [],
        rating: place.rating,
        photos: place.photos,
        vicinity: place.vicinity,
        business_status: place.business_status,
    };
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á Places Service
export const createPlacesService = (): google.maps.places.PlacesService | null => {
    try {
        if (!window.google?.maps?.places) {
            console.error('Places API not available');
            return null;
        }

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á temporary map ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PlacesService
        const mapDiv = document.createElement('div');
        const tempMap = new google.maps.Map(mapDiv, {
            center: GOOGLE_MAPS_CONFIG.defaultCenter,
            zoom: 10,
        });

        return new google.maps.places.PlacesService(tempMap);
    } catch (error) {
        console.error('Error creating PlacesService:', error);
        return null;
    }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢ Text Search
export const searchPlacesWithText = async (
    query: string,
    options?: {
        location?: google.maps.LatLng;
        radius?: number;
        maxResults?: number;
    }
): Promise<{ results: SearchResult[]; error?: SearchError }> => {
    return new Promise((resolve) => {
        const placesService = createPlacesService();

        if (!placesService) {
            resolve({
                results: [],
                error: {
                    code: 'PLACES_API_UNAVAILABLE',
                    message: GOOGLE_MAPS_ERRORS.PLACES_API_UNAVAILABLE.message,
                    suggestions: GOOGLE_MAPS_ERRORS.PLACES_API_UNAVAILABLE.solutions,
                },
            });
            return;
        }

        const request: google.maps.places.TextSearchRequest = {
            query: query,
            location:
                options?.location ||
                new google.maps.LatLng(
                    GOOGLE_MAPS_CONFIG.searchCenter.lat,
                    GOOGLE_MAPS_CONFIG.searchCenter.lng
                ),
            radius: options?.radius || GOOGLE_MAPS_CONFIG.searchRadius,
            language: GOOGLE_MAPS_CONFIG.placesConfig.language,
        };

        placesService.textSearch(request, (results, status) => {
            const errorInfo = handlePlacesServiceStatus(status);

            if (errorInfo) {
                resolve({
                    results: [],
                    error: errorInfo,
                });
                return;
            }

            if (results) {
                const searchResults = results
                    .slice(0, options?.maxResults || 8)
                    .map(convertPlaceResultToSearchResult);

                resolve({ results: searchResults });
            } else {
                resolve({
                    results: [],
                    error: {
                        code: 'NO_RESULTS',
                        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤',
                        suggestions: ['‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏∑‡πà‡∏ô', '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏∞‡∏Å‡∏î‡∏Ñ‡∏≥'],
                    },
                });
            }
        });
    });
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Places Service Status
export const handlePlacesServiceStatus = (
    status: google.maps.places.PlacesServiceStatus
): SearchError | null => {
    switch (status) {
        case google.maps.places.PlacesServiceStatus.OK:
            return null;

        case google.maps.places.PlacesServiceStatus.ZERO_RESULTS:
            return null; // ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà error ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå

        case google.maps.places.PlacesServiceStatus.OVER_QUERY_LIMIT:
            return {
                code: 'QUOTA_EXCEEDED',
                message: GOOGLE_MAPS_ERRORS.QUOTA_EXCEEDED.message,
                suggestions: GOOGLE_MAPS_ERRORS.QUOTA_EXCEEDED.solutions,
            };

        case google.maps.places.PlacesServiceStatus.REQUEST_DENIED:
            return {
                code: 'PERMISSION_DENIED',
                message: GOOGLE_MAPS_ERRORS.PERMISSION_DENIED.message,
                suggestions: GOOGLE_MAPS_ERRORS.PERMISSION_DENIED.solutions,
            };

        case google.maps.places.PlacesServiceStatus.INVALID_REQUEST:
            return {
                code: 'INVALID_REQUEST',
                message: '‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
                suggestions: ['‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤', '‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô'],
            };

        case google.maps.places.PlacesServiceStatus.NOT_FOUND:
            return {
                code: 'NOT_FOUND',
                message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤',
                suggestions: ['‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏∑‡πà‡∏ô', '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏∞‡∏Å‡∏î‡∏Ñ‡∏≥'],
            };

        case google.maps.places.PlacesServiceStatus.UNKNOWN_ERROR:
        default:
            return {
                code: 'UNKNOWN_ERROR',
                message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏',
                suggestions: ['‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á', '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï'],
            };
    }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á icon ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà
export const getPlaceIcon = (types: string[]): string => {
    const iconMap: { [key: string]: string } = {
        hospital: 'üè•',
        doctor: 'üë®‚Äç‚öïÔ∏è',
        pharmacy: 'üíä',
        school: 'üè´',
        university: 'üéì',
        library: 'üìö',
        restaurant: 'üçΩÔ∏è',
        food: 'üçΩÔ∏è',
        meal_takeaway: 'ü•°',
        cafe: '‚òï',
        bar: 'üçª',
        gas_station: '‚õΩ',
        car_repair: 'üîß',
        bank: 'üè¶',
        atm: 'üèß',
        shopping_mall: 'üè¨',
        store: 'üè™',
        supermarket: 'üõí',
        convenience_store: 'üè™',
        park: 'üå≥',
        campground: 'üèïÔ∏è',
        zoo: 'ü¶Å',
        amusement_park: 'üé¢',
        temple: 'üèõÔ∏è',
        hindu_temple: 'üïâÔ∏è',
        mosque: 'üïå',
        church: '‚õ™',
        synagogue: '‚ú°Ô∏è',
        cemetery: '‚ö±Ô∏è',
        police: 'üëÆ',
        fire_station: 'üöí',
        post_office: 'üì´',
        bus_station: 'üöå',
        subway_station: 'üöá',
        train_station: 'üöÇ',
        airport: '‚úàÔ∏è',
        taxi_stand: 'üöï',
        lodging: 'üè®',
        tourist_attraction: 'üéØ',
        museum: 'üèõÔ∏è',
        art_gallery: 'üé®',
        movie_theater: 'üé¨',
        night_club: 'üéµ',
        spa: 'üíÜ',
        beauty_salon: 'üíÑ',
        gym: 'üí™',
        stadium: 'üèüÔ∏è',
        bowling_alley: 'üé≥',
        golf_course: '‚õ≥',
        swimming_pool: 'üèä',
        courthouse: '‚öñÔ∏è',
        city_hall: 'üèõÔ∏è',
        embassy: 'üèõÔ∏è',
        real_estate_agency: 'üè†',
        insurance_agency: 'üõ°Ô∏è',
        travel_agency: '‚úàÔ∏è',
        veterinary_care: 'üêï',
        pet_store: 'üêæ',
        florist: 'üå∏',
        hardware_store: 'üî®',
        electronics_store: 'üì±',
        clothing_store: 'üëï',
        shoe_store: 'üëü',
        jewelry_store: 'üíé',
        book_store: 'üìñ',
        bicycle_store: 'üö≤',
        car_dealer: 'üöó',
        furniture_store: 'üõãÔ∏è',
        home_goods_store: 'üè†',
        liquor_store: 'üçæ',
        establishment: 'üè¢',
        point_of_interest: 'üìç',
        premise: 'üè¢',
        route: 'üõ£Ô∏è',
        political: 'üèõÔ∏è',
    };

    for (const type of types) {
        if (iconMap[type]) {
            return iconMap[type];
        }
    }
    return 'üìç'; // default icon
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
export const getPlaceTypeInThai = (types: string[]): string => {
    const typeMap: { [key: string]: string } = {
        hospital: '‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•',
        doctor: '‡∏Ñ‡∏•‡∏¥‡∏ô‡∏¥‡∏Å‡πÅ‡∏û‡∏ó‡∏¢‡πå',
        pharmacy: '‡∏£‡πâ‡∏≤‡∏ô‡∏Ç‡∏≤‡∏¢‡∏¢‡∏≤',
        school: '‡πÇ‡∏£‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô',
        university: '‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢',
        library: '‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏°‡∏∏‡∏î',
        restaurant: '‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£',
        food: '‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£',
        meal_takeaway: '‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏ö‡πâ‡∏≤‡∏ô',
        cafe: '‡∏Ñ‡∏≤‡πÄ‡∏ü‡πà',
        bar: '‡∏ö‡∏≤‡∏£‡πå',
        gas_station: '‡∏õ‡∏±‡πä‡∏°‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô',
        car_repair: '‡∏≠‡∏π‡πà‡∏ã‡πà‡∏≠‡∏°‡∏£‡∏ñ',
        bank: '‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£',
        atm: '‡∏ï‡∏π‡πâ‡πÄ‡∏≠‡∏ó‡∏µ‡πÄ‡∏≠‡πá‡∏°',
        shopping_mall: '‡∏´‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏û‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤',
        store: '‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤',
        supermarket: '‡∏ã‡∏π‡πÄ‡∏õ‡∏≠‡∏£‡πå‡∏°‡∏≤‡∏£‡πå‡πÄ‡∏Å‡πá‡∏ï',
        convenience_store: '‡∏£‡πâ‡∏≤‡∏ô‡∏™‡∏∞‡∏î‡∏ß‡∏Å‡∏ã‡∏∑‡πâ‡∏≠',
        park: '‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞',
        campground: '‡∏ó‡∏µ‡πà‡∏û‡∏±‡∏Å‡πÅ‡∏£‡∏°',
        zoo: '‡∏™‡∏ß‡∏ô‡∏™‡∏±‡∏ï‡∏ß‡πå',
        amusement_park: '‡∏™‡∏ß‡∏ô‡∏™‡∏ô‡∏∏‡∏Å',
        temple: '‡∏ß‡∏±‡∏î',
        hindu_temple: '‡∏®‡∏≤‡∏•‡πÄ‡∏à‡πâ‡∏≤',
        mosque: '‡∏°‡∏±‡∏™‡∏¢‡∏¥‡∏î',
        church: '‡πÇ‡∏ö‡∏™‡∏ñ‡πå',
        synagogue: '‡πÇ‡∏ö‡∏™‡∏ñ‡πå‡∏¢‡∏¥‡∏ß',
        cemetery: '‡∏™‡∏∏‡∏™‡∏≤‡∏ô',
        police: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ï‡∏≥‡∏£‡∏ß‡∏à',
        fire_station: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏î‡∏±‡∏ö‡πÄ‡∏û‡∏•‡∏¥‡∏á',
        post_office: '‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå',
        bus_station: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏Ç‡∏ô‡∏™‡πà‡∏á',
        subway_station: '‡∏£‡∏ñ‡πÑ‡∏ü‡πÉ‡∏ï‡πâ‡∏î‡∏¥‡∏ô',
        train_station: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏£‡∏ñ‡πÑ‡∏ü',
        airport: '‡∏™‡∏ô‡∏≤‡∏°‡∏ö‡∏¥‡∏ô',
        taxi_stand: '‡∏à‡∏∏‡∏î‡∏à‡∏≠‡∏î‡πÅ‡∏ó‡πá‡∏Å‡∏ã‡∏µ‡πà',
        lodging: '‡∏ó‡∏µ‡πà‡∏û‡∏±‡∏Å',
        tourist_attraction: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß',
        museum: '‡∏û‡∏¥‡∏û‡∏¥‡∏ò‡∏†‡∏±‡∏ì‡∏ë‡πå',
        art_gallery: '‡∏´‡∏≠‡∏®‡∏¥‡∏•‡∏õ‡πå',
        movie_theater: '‡πÇ‡∏£‡∏á‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡∏£‡πå',
        night_club: '‡πÑ‡∏ô‡∏ó‡πå‡∏Ñ‡∏•‡∏±‡∏ö',
        spa: '‡∏™‡∏õ‡∏≤',
        beauty_salon: '‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏™‡∏ß‡∏¢',
        gym: '‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™',
        stadium: '‡∏™‡∏ô‡∏≤‡∏°‡∏Å‡∏µ‡∏¨‡∏≤',
        bowling_alley: '‡πÇ‡∏ö‡∏ß‡πå‡∏•‡∏¥‡πà‡∏á',
        golf_course: '‡∏™‡∏ô‡∏≤‡∏°‡∏Å‡∏≠‡∏•‡πå‡∏ü',
        swimming_pool: '‡∏™‡∏£‡∏∞‡∏ß‡πà‡∏≤‡∏¢‡∏ô‡πâ‡∏≥',
        courthouse: '‡∏®‡∏≤‡∏•',
        city_hall: '‡∏®‡∏≤‡∏•‡∏≤‡∏Å‡∏•‡∏≤‡∏á',
        embassy: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏ë‡∏π‡∏ï',
        real_estate_agency: '‡∏≠‡∏™‡∏±‡∏á‡∏´‡∏≤‡∏£‡∏¥‡∏°‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå',
        insurance_agency: '‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô',
        travel_agency: '‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏ó‡∏±‡∏ß‡∏£‡πå',
        veterinary_care: '‡∏Ñ‡∏•‡∏¥‡∏ô‡∏¥‡∏Å‡∏™‡∏±‡∏ï‡∏ß‡πå',
        pet_store: '‡∏£‡πâ‡∏≤‡∏ô‡∏Ç‡∏≤‡∏¢‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á',
        florist: '‡∏£‡πâ‡∏≤‡∏ô‡∏î‡∏≠‡∏Å‡πÑ‡∏°‡πâ',
        hardware_store: '‡∏£‡πâ‡∏≤‡∏ô‡∏Æ‡∏≤‡∏£‡πå‡∏î‡πÅ‡∏ß‡∏£‡πå',
        electronics_store: '‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ó‡∏£‡∏≠‡∏ô‡∏¥‡∏Å‡∏™‡πå',
        clothing_store: '‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤',
        shoe_store: '‡∏£‡πâ‡∏≤‡∏ô‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤',
        jewelry_store: '‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏î‡∏±‡∏ö',
        book_store: '‡∏£‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠',
        bicycle_store: '‡∏£‡πâ‡∏≤‡∏ô‡∏à‡∏±‡∏Å‡∏£‡∏¢‡∏≤‡∏ô',
        car_dealer: '‡∏ï‡∏±‡∏ß‡πÅ‡∏ó‡∏ô‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå',
        furniture_store: '‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏ü‡∏≠‡∏£‡πå‡∏ô‡∏¥‡πÄ‡∏à‡∏≠‡∏£‡πå',
        home_goods_store: '‡∏£‡πâ‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ö‡πâ‡∏≤‡∏ô',
        liquor_store: '‡∏£‡πâ‡∏≤‡∏ô‡∏Ç‡∏≤‡∏¢‡πÄ‡∏´‡∏•‡πâ‡∏≤',
        establishment: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£',
        point_of_interest: '‡∏à‡∏∏‡∏î‡∏™‡∏ô‡πÉ‡∏à',
        premise: '‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£',
        route: '‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á',
        political: '‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£',
    };

    for (const type of types) {
        if (typeMap[type]) {
            return typeMap[type];
        }
    }
    return '‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà';
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏£‡∏≠‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
export const filterSearchResults = (
    results: SearchResult[],
    query: string,
    options?: {
        maxResults?: number;
        prioritizeTypes?: string[];
        excludeTypes?: string[];
    }
): SearchResult[] => {
    const { maxResults = 8, prioritizeTypes = [], excludeTypes = [] } = options || {};

    // ‡∏Å‡∏£‡∏≠‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    const filtered = results.filter((result) => {
        if (excludeTypes.length > 0) {
            return !result.types.some((type) => excludeTypes.includes(type));
        }
        return true;
    });

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
    const sorted = filtered.sort((a, b) => {
        // ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
        let scoreA = 0;
        let scoreB = 0;

        // ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö query
        const queryLower = query.toLowerCase();
        if (a.name.toLowerCase().includes(queryLower)) scoreA += 10;
        if (b.name.toLowerCase().includes(queryLower)) scoreB += 10;

        if (a.formatted_address.toLowerCase().includes(queryLower)) scoreA += 5;
        if (b.formatted_address.toLowerCase().includes(queryLower)) scoreB += 5;

        // ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å rating
        scoreA += (a.rating || 0) * 2;
        scoreB += (b.rating || 0) * 2;

        // ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        if (prioritizeTypes.length > 0) {
            if (a.types.some((type) => prioritizeTypes.includes(type))) scoreA += 20;
            if (b.types.some((type) => prioritizeTypes.includes(type))) scoreB += 20;
        }

        return scoreB - scoreA;
    });

    return sorted.slice(0, maxResults);
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
export const isPlaceOpen = (result: SearchResult): boolean | null => {
    if (result.business_status === 'OPERATIONAL') {
        return true;
    } else if (
        result.business_status === 'CLOSED_TEMPORARILY' ||
        result.business_status === 'CLOSED_PERMANENTLY'
    ) {
        return false;
    }
    return null; // ‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà
export const getPlaceStatusText = (result: SearchResult): string => {
    const isOpen = isPlaceOpen(result);
    if (isOpen === true) return '‡πÄ‡∏õ‡∏¥‡∏î‡∏ó‡∏≥‡∏Å‡∏≤‡∏£';
    if (isOpen === false) return '‡∏õ‡∏¥‡∏î‡∏ó‡∏≥‡∏Å‡∏≤‡∏£';
    return '';
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà
export const getPlacePhotoUrl = (
    result: SearchResult,
    options?: { maxWidth?: number; maxHeight?: number }
): string | null => {
    if (!result.photos || result.photos.length === 0) return null;

    try {
        return result.photos[0].getUrl({
            maxWidth: options?.maxWidth || 400,
            maxHeight: options?.maxHeight || 300,
        });
    } catch (error) {
        console.error('Error getting photo URL:', error);
        return null;
    }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô debounce ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
export const createSearchDebouncer = (
    searchFunction: (query: string) => Promise<any>,
    delay: number = 300
) => {
    let timeoutId: NodeJS.Timeout | null = null;

    return (query: string): Promise<any> => {
        return new Promise((resolve, reject) => {
            if (timeoutId) {
                clearTimeout(timeoutId);
            }

            timeoutId = setTimeout(async () => {
                try {
                    const result = await searchFunction(query);
                    resolve(result);
                } catch (error) {
                    reject(error);
                }
            }, delay);
        });
    };
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö log ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Places API
export const logPlacesAPIUsage = (
    operation: string,
    query?: string,
    resultsCount?: number,
    error?: string
): void => {
    if (import.meta.env.DEV) {
        console.log('üîç Places API Usage:', {
            operation,
            query,
            resultsCount,
            error,
            timestamp: new Date().toISOString(),
        });
    }
};

// Export error types ‡πÅ‡∏•‡∏∞ utility functions
export { GOOGLE_MAPS_ERRORS, GOOGLE_MAPS_CONFIG };
