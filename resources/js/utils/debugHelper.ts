// debugHelper.ts - Enhanced Complete Debug System

/**
 * Enhanced Debug Helper ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Horticulture Irrigation System
 * ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
 */

// ========== Enhanced Types ==========
interface Coordinate {
    lat: number;
    lng: number;
}

interface PlantLocation {
    id: string;
    position: Coordinate;
    plantData: {
        name: string;
        plantSpacing: number;
        rowSpacing: number;
        waterNeed: number;
    };
}

interface Zone {
    id: string;
    name: string;
    coordinates: Coordinate[];
    plantData: any;
    plantCount: number;
    totalWaterNeed: number;
    area: number;
    color: string;
}

interface ProjectData {
    projectName: string;
    version?: string;
    totalArea: number;
    mainArea: Coordinate[];
    pump: any;
    zones: Zone[];
    mainPipes: any[];
    subMainPipes: any[];
    exclusionAreas: any[];
    plants: PlantLocation[];
    useZones: boolean;
    createdAt?: string;
    updatedAt?: string;
}

interface DebugReport {
    timestamp: string;
    projectValid: boolean;
    dataConsistency: {
        plantsMatch: boolean;
        waterMatch: boolean;
        zoneIntegrity: boolean;
        pipeConnectivity: boolean;
    };
    performance: {
        dataSize: number;
        complexityScore: number;
        estimatedMemory: number;
        renderTime?: number;
    };
    issues: string[];
    recommendations: string[];
    summary: string;
}

// ========== Core Debug Functions ==========

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• localStorage ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏ö‡∏ö‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
 */
export const debugLocalStorage = (): { data: ProjectData | null; report: DebugReport } => {
    console.group('üîç Enhanced Debug: LocalStorage Comprehensive Analysis');

    const timestamp = new Date().toISOString();
    const report: DebugReport = {
        timestamp,
        projectValid: false,
        dataConsistency: {
            plantsMatch: false,
            waterMatch: false,
            zoneIntegrity: false,
            pipeConnectivity: false,
        },
        performance: {
            dataSize: 0,
            complexityScore: 0,
            estimatedMemory: 0,
        },
        issues: [],
        recommendations: [],
        summary: '',
    };

    const data = localStorage.getItem('horticultureIrrigationData');
    if (!data) {
        console.error('‚ùå No data found in localStorage');
        report.issues.push('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö');
        report.recommendations.push('‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà');
        report.summary = '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£';
        console.groupEnd();
        return { data: null, report };
    }

    try {
        const parsedData: ProjectData = JSON.parse(data);
        report.performance.dataSize = data.length;

        console.log('‚úÖ Project Name:', parsedData.projectName);
        console.log('üìè Total Area:', parsedData.totalArea, 'sq meters');
        console.log('üó∫Ô∏è Main Area Points:', parsedData.mainArea?.length || 0);
        console.log('üö∞ Pump:', parsedData.pump ? '‚úÖ Available' : '‚ùå Missing');
        console.log('üèûÔ∏è Zones:', parsedData.zones?.length || 0);
        console.log('üîß Main Pipes:', parsedData.mainPipes?.length || 0);
        console.log('üî© Sub-Main Pipes:', parsedData.subMainPipes?.length || 0);
        console.log('üå± Plants Array:', parsedData.plants?.length || 0);
        console.log('üö´ Exclusion Areas:', parsedData.exclusionAreas?.length || 0);
        console.log('‚öôÔ∏è Use Zones:', parsedData.useZones);
        console.log('üìÖ Version:', parsedData.version || 'Unknown');

        // ========== Enhanced Data Consistency Analysis ==========
        console.group('üî¨ Advanced Data Consistency Analysis');

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ
        const plantsFromArray = parsedData.plants?.length || 0;
        const plantsFromZones =
            parsedData.zones?.reduce((sum, zone) => sum + zone.plantCount, 0) || 0;

        console.log('üå± Plants Comparison:');
        console.log(`   - From plants array: ${plantsFromArray}`);
        console.log(`   - From zones sum: ${plantsFromZones}`);
        const plantsMatch = Math.abs(plantsFromArray - plantsFromZones) <= 1; // Allow 1 plant tolerance
        console.log(`   - Match: ${plantsMatch ? '‚úÖ' : '‚ùå'}`);
        report.dataConsistency.plantsMatch = plantsMatch;

        if (!plantsMatch) {
            report.issues.push(
                `‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô (Array: ${plantsFromArray}, Zones: ${plantsFromZones})`
            );
            report.recommendations.push('‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÇ‡∏ã‡∏ô');
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ô‡πâ‡∏≥
        const waterFromArray =
            parsedData.plants?.reduce((sum, plant) => sum + plant.plantData.waterNeed, 0) || 0;
        const waterFromZones =
            parsedData.zones?.reduce((sum, zone) => sum + zone.totalWaterNeed, 0) || 0;

        console.log('üíß Water Calculation:');
        console.log(`   - From plants array: ${waterFromArray.toFixed(2)} L`);
        console.log(`   - From zones sum: ${waterFromZones.toFixed(2)} L`);
        const waterMatch = Math.abs(waterFromArray - waterFromZones) < 5; // Allow 5L tolerance
        console.log(`   - Match: ${waterMatch ? '‚úÖ' : '‚ùå'}`);
        report.dataConsistency.waterMatch = waterMatch;

        if (!waterMatch) {
            report.issues.push(
                `‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ô‡πâ‡∏≥‡πÑ‡∏°‡πà‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô (Array: ${waterFromArray.toFixed(2)}L, Zones: ${waterFromZones.toFixed(2)}L)`
            );
            report.recommendations.push('‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ô‡πâ‡∏≥‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÇ‡∏ã‡∏ô');
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡πÇ‡∏ã‡∏ô
        let zoneIntegrity = true;
        if (parsedData.useZones && parsedData.zones && parsedData.plants) {
            console.log('üèûÔ∏è Zone Integrity Analysis:');
            let totalPlantsInZones = 0;

            parsedData.zones.forEach((zone) => {
                const plantsInZone = parsedData.plants.filter((plant) =>
                    isPointInPolygon(plant.position, zone.coordinates)
                );
                totalPlantsInZones += plantsInZone.length;

                const actualWater = plantsInZone.reduce(
                    (sum, plant) => sum + plant.plantData.waterNeed,
                    0
                );

                const plantCountMatch = Math.abs(plantsInZone.length - zone.plantCount) <= 1;
                const waterNeedMatch = Math.abs(actualWater - zone.totalWaterNeed) < 2;

                console.log(`   ${zone.name}:`);
                console.log(
                    `     - Expected: ${zone.plantCount} plants, ${zone.totalWaterNeed.toFixed(2)} L`
                );
                console.log(
                    `     - Actual: ${plantsInZone.length} plants, ${actualWater.toFixed(2)} L`
                );
                console.log(`     - Plant match: ${plantCountMatch ? '‚úÖ' : '‚ùå'}`);
                console.log(`     - Water match: ${waterNeedMatch ? '‚úÖ' : '‚ùå'}`);

                if (!plantCountMatch || !waterNeedMatch) {
                    zoneIntegrity = false;
                    report.issues.push(`‡πÇ‡∏ã‡∏ô ${zone.name} ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô`);
                }
            });

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏≠‡∏Å‡πÇ‡∏ã‡∏ô
            const plantsOutsideZones = plantsFromArray - totalPlantsInZones;
            if (plantsOutsideZones > 0) {
                console.log(`‚ö†Ô∏è Plants outside zones: ${plantsOutsideZones}`);
                report.issues.push(`‡∏°‡∏µ‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ ${plantsOutsideZones} ‡∏ï‡πâ‡∏ô ‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏≠‡∏Å‡πÇ‡∏ã‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î`);
                zoneIntegrity = false;
            }
        }
        report.dataConsistency.zoneIntegrity = zoneIntegrity;

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ó‡πà‡∏≠
        let pipeConnectivity = true;
        if (parsedData.subMainPipes?.length > 0) {
            console.group('üî© Pipe Connectivity Analysis');
            let totalGeneratedPlants = 0;
            let disconnectedPipes = 0;

            parsedData.subMainPipes.forEach((pipe, index) => {
                const branchCount = pipe.branchPipes?.length || 0;
                const plantsInPipe =
                    pipe.branchPipes?.reduce(
                        (sum: number, branch: any) => sum + (branch.plants?.length || 0),
                        0
                    ) || 0;

                totalGeneratedPlants += plantsInPipe;

                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ó‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÇ‡∏ã‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                const connectedToZone = parsedData.useZones
                    ? parsedData.zones.some((zone) => zone.id === pipe.zoneId)
                    : pipe.zoneId === 'main-area';

                if (!connectedToZone) {
                    disconnectedPipes++;
                    pipeConnectivity = false;
                }

                console.log(`Pipe ${index + 1}:`, {
                    id: pipe.id,
                    zoneId: pipe.zoneId,
                    connected: connectedToZone ? '‚úÖ' : '‚ùå',
                    coordinates: pipe.coordinates?.length || 0,
                    branchPipes: branchCount,
                    plantsGenerated: plantsInPipe,
                    length: pipe.length?.toFixed(2) || 0,
                });
            });

            console.log(`üìä Total plants generated from pipes: ${totalGeneratedPlants}`);
            console.log(
                `üîç Matches plants array: ${Math.abs(totalGeneratedPlants - plantsFromArray) <= 1 ? '‚úÖ' : '‚ùå'}`
            );
            console.log(`üîó Disconnected pipes: ${disconnectedPipes}`);

            if (disconnectedPipes > 0) {
                report.issues.push(`‡∏°‡∏µ‡∏ó‡πà‡∏≠ ${disconnectedPipes} ‡πÄ‡∏™‡πâ‡∏ô ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÇ‡∏ã‡∏ô`);
                report.recommendations.push('‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ó‡πà‡∏≠‡πÅ‡∏•‡∏∞‡πÇ‡∏ã‡∏ô');
            }

            console.groupEnd();
        }
        report.dataConsistency.pipeConnectivity = pipeConnectivity;

        // ========== Performance Analysis ==========
        console.group('‚ö° Performance Analysis');

        const complexityFactors = {
            plants: plantsFromArray,
            zones: parsedData.zones?.length || 0,
            subMainPipes: parsedData.subMainPipes?.length || 0,
            branchPipes:
                parsedData.subMainPipes?.reduce(
                    (sum, pipe) => sum + (pipe.branchPipes?.length || 0),
                    0
                ) || 0,
            exclusionAreas: parsedData.exclusionAreas?.length || 0,
        };

        const complexityScore =
            complexityFactors.plants * 0.1 +
            complexityFactors.zones * 5 +
            complexityFactors.subMainPipes * 3 +
            complexityFactors.branchPipes * 1 +
            complexityFactors.exclusionAreas * 2;

        const estimatedMemory =
            complexityFactors.plants * 0.1 +
            complexityFactors.branchPipes * 0.05 +
            report.performance.dataSize / 1024;

        report.performance.complexityScore = complexityScore;
        report.performance.estimatedMemory = estimatedMemory;

        console.log('üéØ Complexity Analysis:', complexityFactors);
        console.log(`üìä Complexity Score: ${complexityScore.toFixed(2)}`);
        console.log(`üíæ Estimated Memory: ${estimatedMemory.toFixed(2)} KB`);
        console.log(`üì¶ Data Size: ${(report.performance.dataSize / 1024).toFixed(2)} KB`);

        if (complexityScore > 500) {
            report.issues.push('‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡∏™‡∏π‡∏á ‡∏≠‡∏≤‡∏à‡∏™‡πà‡∏á‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û');
            report.recommendations.push('‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡πÅ‡∏ö‡πà‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏¢‡πà‡∏≠‡∏¢');
        }

        if (estimatedMemory > 1000) {
            report.issues.push('‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡∏™‡∏π‡∏á ‡∏≠‡∏≤‡∏à‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ä‡πâ‡∏≤');
            report.recommendations.push('‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏á‡∏Ñ‡πå‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô');
        }

        console.groupEnd();

        // ========== Additional Validations ==========
        console.group('üõ°Ô∏è Additional Validations');

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏û‡∏¥‡∏Å‡∏±‡∏î
        const invalidCoordinates = parsedData.mainArea?.some(
            (coord) =>
                typeof coord.lat !== 'number' ||
                typeof coord.lng !== 'number' ||
                coord.lat < -90 ||
                coord.lat > 90 ||
                coord.lng < -180 ||
                coord.lng > 180
        );

        if (invalidCoordinates) {
            report.issues.push('‡∏û‡∏ö‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏±‡∏Å');
            report.recommendations.push('‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥');
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö version
        if (!parsedData.version || parsedData.version < '2.0.0') {
            report.issues.push('‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤ ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ');
            report.recommendations.push('‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î');
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        const requiredFields = ['projectName', 'totalArea', 'mainArea', 'plants', 'useZones'];
        const missingFields = requiredFields.filter(
            (field) => !parsedData[field as keyof ProjectData]
        );

        if (missingFields.length > 0) {
            report.issues.push(`‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå: ‡∏Ç‡∏≤‡∏î ${missingFields.join(', ')}`);
            report.recommendations.push('‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ');
        }

        console.groupEnd();
        console.groupEnd();

        // ========== Generate Final Report ==========
        const totalIssues = report.issues.length;
        const dataConsistencyScore =
            (Object.values(report.dataConsistency).filter(Boolean).length / 4) * 100;

        report.projectValid = totalIssues === 0 && dataConsistencyScore >= 75;

        if (totalIssues === 0) {
            report.summary = `‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á: ${dataConsistencyScore.toFixed(1)}%)`;
        } else if (totalIssues <= 2) {
            report.summary = `‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ ${totalIssues} ‡∏à‡∏∏‡∏î`;
        } else {
            report.summary = `‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏´‡∏•‡∏≤‡∏¢‡∏à‡∏∏‡∏î ${totalIssues} ‡∏à‡∏∏‡∏î ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç`;
        }

        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
        if (report.projectValid) {
            report.recommendations.push('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏π‡∏î‡∏µ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
        } else {
            report.recommendations.push('‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏ï‡πá‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û');
        }

        console.log('üìã Final Debug Report:');
        console.log(`   - Valid: ${report.projectValid ? '‚úÖ' : '‚ùå'}`);
        console.log(`   - Issues: ${totalIssues}`);
        console.log(`   - Data Consistency: ${dataConsistencyScore.toFixed(1)}%`);
        console.log(`   - Summary: ${report.summary}`);

        return { data: parsedData, report };
    } catch (error) {
        console.error('‚ùå Error parsing localStorage data:', error);
        report.issues.push('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ');
        report.recommendations.push('‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà');
        report.summary = '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
        console.groupEnd();
        return { data: null, report };
    }
};

/**
 * Helper function for point-in-polygon test - Enhanced version
 */
const isPointInPolygon = (point: Coordinate, polygon: Coordinate[]): boolean => {
    if (!point || !polygon || polygon.length < 3) return false;

    try {
        let inside = false;
        for (let i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {
            const xi = polygon[i].lat;
            const yi = polygon[i].lng;
            const xj = polygon[j].lat;
            const yj = polygon[j].lng;

            const intersect =
                yi > point.lng !== yj > point.lng &&
                point.lat < ((xj - xi) * (point.lng - yi)) / (yj - yi) + xi;
            if (intersect) inside = !inside;
        }
        return inside;
    } catch (error) {
        console.error('Error checking point in polygon:', error);
        return false;
    }
};

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á Map Components ‡πÅ‡∏•‡∏∞‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£ Export - Enhanced version
 */
export const debugMapComponents = (mapRef: React.RefObject<HTMLDivElement>) => {
    console.group('üó∫Ô∏è Enhanced Debug: Map Components & Export Analysis');

    if (!mapRef.current) {
        console.error('‚ùå Map ref is null');
        console.groupEnd();
        return;
    }

    const mapContainer = mapRef.current.querySelector('.leaflet-container');
    if (!mapContainer) {
        console.error('‚ùå Leaflet container not found');
        console.groupEnd();
        return;
    }

    console.log('‚úÖ Map container found');
    console.log('üìè Map dimensions:', {
        width: mapRef.current.offsetWidth,
        height: mapRef.current.offsetHeight,
        aspectRatio: (mapRef.current.offsetWidth / mapRef.current.offsetHeight).toFixed(2),
    });

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö layers detail
    const polygons = mapRef.current.querySelectorAll('path[stroke]');
    const markers = mapRef.current.querySelectorAll('.leaflet-marker-icon');
    const polylines = mapRef.current.querySelectorAll('path[stroke-width]');
    const controls = mapRef.current.querySelectorAll('.leaflet-control-container *');

    console.log('üî∑ Map Elements Count:');
    console.log(`   - Polygons (zones/areas): ${polygons.length}`);
    console.log(`   - Polylines (pipes): ${polylines.length}`);
    console.log(`   - Markers (pump/plants): ${markers.length}`);
    console.log(`   - Controls: ${controls.length}`);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö performance
    const totalElements = polygons.length + polylines.length + markers.length;
    console.log(`üìä Total map elements: ${totalElements}`);

    if (totalElements > 1000) {
        console.warn('‚ö†Ô∏è High element count may affect performance');
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö colors ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏ó‡∏≥‡πÉ‡∏´‡πâ html2canvas error
    const elementsWithProblematicColors = mapRef.current.querySelectorAll('*');
    let oklchCount = 0;
    let rgbCount = 0;
    let hexCount = 0;
    const problematicElements: string[] = [];

    elementsWithProblematicColors.forEach((el, index) => {
        const styles = window.getComputedStyle(el);
        const hasOklch =
            styles.color.includes('oklch') ||
            styles.backgroundColor.includes('oklch') ||
            styles.borderColor.includes('oklch');

        if (hasOklch) {
            oklchCount++;
            if (problematicElements.length < 5) {
                problematicElements.push(`Element ${index}: ${el.tagName}.${el.className}`);
            }
        }

        if (styles.color.includes('rgb')) rgbCount++;
        if (styles.color.includes('#')) hexCount++;
    });

    console.log('üé® Color Analysis:');
    console.log(`   - OKLCH colors: ${oklchCount} ${oklchCount > 0 ? '‚ö†Ô∏è' : '‚úÖ'}`);
    console.log(`   - RGB colors: ${rgbCount}`);
    console.log(`   - HEX colors: ${hexCount}`);

    if (oklchCount > 0) {
        console.warn(`‚ö†Ô∏è Found ${oklchCount} elements with oklch colors (may cause export issues)`);
        console.log('üîç Sample problematic elements:', problematicElements);
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Canvas support ‡πÅ‡∏•‡∏∞ performance
    const canvas = document.createElement('canvas');
    const canvasSupported = !!(canvas.getContext && canvas.getContext('2d'));
    console.log(`üé® Canvas 2D support: ${canvasSupported ? '‚úÖ' : '‚ùå'}`);

    if (canvasSupported) {
        // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö canvas performance
        const ctx = canvas.getContext('2d');
        if (ctx) {
            const startTime = performance.now();
            canvas.width = 800;
            canvas.height = 600;
            ctx.fillStyle = '#1F2937';
            ctx.fillRect(0, 0, 800, 600);
            const endTime = performance.now();

            console.log(`‚ö° Canvas performance: ${(endTime - startTime).toFixed(2)}ms`);
        }
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö html2canvas availability
    console.log('üì¶ Checking html2canvas availability...');
    import('html2canvas')
        .then(() => {
            console.log('‚úÖ html2canvas is available and ready');
        })
        .catch((error) => {
            console.error('‚ùå html2canvas not available:', error);
        });

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö viewport ‡πÅ‡∏•‡∏∞ scaling
    const devicePixelRatio = window.devicePixelRatio || 1;
    const viewport = {
        width: window.innerWidth,
        height: window.innerHeight,
        devicePixelRatio: devicePixelRatio,
        isHighDPI: devicePixelRatio > 1,
    };

    console.log('üì± Viewport Info:', viewport);

    if (viewport.isHighDPI) {
        console.log('‚úÖ High DPI display detected - good for image quality');
    }

    // Memory usage estimation
    const estimatedMemoryUsage =
        totalElements * 0.5 +
        (mapRef.current.offsetWidth * mapRef.current.offsetHeight * 4) / 1024 / 1024;
    console.log(`üíæ Estimated memory usage: ${estimatedMemoryUsage.toFixed(2)} MB`);

    if (estimatedMemoryUsage > 50) {
        console.warn('‚ö†Ô∏è High memory usage may cause export issues on low-end devices');
    }

    console.groupEnd();
};

/**
 * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£ Export ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û - Enhanced version
 */
export const debugImageExport = async (mapElement: HTMLElement) => {
    console.group('üì∑ Enhanced Debug: Image Export Process');

    if (!mapElement) {
        console.error('‚ùå Map element not provided');
        console.groupEnd();
        return null;
    }

    console.log('üéØ Starting comprehensive export debug process...');

    // Step 1: Environment check
    console.log('üîç Environment Analysis:');
    console.log(`üìè Element dimensions: ${mapElement.offsetWidth}x${mapElement.offsetHeight}`);
    console.log(`üñ•Ô∏è Screen resolution: ${window.screen.width}x${window.screen.height}`);
    console.log(`üì± Device pixel ratio: ${window.devicePixelRatio}`);
    console.log(`üåê User agent: ${navigator.userAgent.substring(0, 50)}...`);

    // Step 2: Performance measurement
    const performanceStart = performance.now();

    // Step 3: Pre-export analysis
    const elementsWithProblematicStyles = mapElement.querySelectorAll('*');
    const styleIssues: string[] = [];
    let elementCount = 0;

    elementsWithProblematicStyles.forEach((el) => {
        elementCount++;
        const styles = window.getComputedStyle(el);
        if (styles.color.includes('oklch')) styleIssues.push('oklch color');
        if (styles.backgroundColor.includes('oklch')) styleIssues.push('oklch background');
        if (styles.transform.includes('translate3d')) styleIssues.push('3d transform');
        if (styles.filter && styles.filter !== 'none') styleIssues.push('CSS filter');
    });

    console.log(`üìä Pre-export analysis:`);
    console.log(`   - Total elements: ${elementCount}`);
    console.log(`   - Style issues found: ${[...new Set(styleIssues)].join(', ') || 'None'}`);

    if (styleIssues.length > 0) {
        console.warn('‚ö†Ô∏è Found potential style issues:', [...new Set(styleIssues)]);
    }

    // Step 4: Memory check
    const estimatedSize = mapElement.offsetWidth * mapElement.offsetHeight * 4; // 4 bytes per pixel
    const estimatedSizeMB = estimatedSize / 1024 / 1024;
    console.log(`üíæ Estimated export size: ${estimatedSizeMB.toFixed(2)} MB`);

    if (estimatedSizeMB > 10) {
        console.warn('‚ö†Ô∏è Large export size may cause memory issues');
    }

    // Step 5: Basic canvas test
    try {
        const testCanvas = document.createElement('canvas');
        testCanvas.width = 200;
        testCanvas.height = 200;
        const ctx = testCanvas.getContext('2d');

        if (ctx) {
            const gradientStart = performance.now();

            // Test basic drawing
            ctx.fillStyle = '#1F2937';
            ctx.fillRect(0, 0, 200, 200);

            // Test gradient
            const gradient = ctx.createLinearGradient(0, 0, 200, 200);
            gradient.addColorStop(0, '#3B82F6');
            gradient.addColorStop(1, '#1E40AF');
            ctx.fillStyle = gradient;
            ctx.fillRect(50, 50, 100, 100);

            // Test text
            ctx.fillStyle = '#FFFFFF';
            ctx.font = '16px Arial';
            ctx.textAlign = 'center';
            ctx.fillText('Test', 100, 120);

            const gradientEnd = performance.now();

            const testDataUrl = testCanvas.toDataURL('image/jpeg', 0.8);
            console.log('‚úÖ Basic canvas test passed');
            console.log(`üìä Test image size: ${Math.round(testDataUrl.length / 1024)}KB`);
            console.log(`‚ö° Canvas drawing time: ${(gradientEnd - gradientStart).toFixed(2)}ms`);
        } else {
            console.error('‚ùå Canvas context not available');
        }
    } catch (error) {
        console.error('‚ùå Basic canvas test failed:', error);
    }

    // Step 6: Try html2canvas import and test
    try {
        const html2canvas = await import('html2canvas');
        console.log('‚úÖ html2canvas imported successfully');

        // Step 7: Simple capture test
        console.log('üì∏ Attempting enhanced capture...');

        const captureStart = performance.now();

        const canvas = await html2canvas.default(mapElement, {
            useCORS: true,
            allowTaint: false,
            scale: Math.min(2, window.devicePixelRatio), // Adaptive scale
            logging: false,
            backgroundColor: '#1F2937',
            imageTimeout: 15000,
            removeContainer: false,
            foreignObjectRendering: false,
            onclone: (clonedDoc) => {
                console.log('üîÑ Cloning and cleaning document...');

                // Remove problematic elements
                const controls = clonedDoc.querySelectorAll('.leaflet-control-container');
                controls.forEach((control) => control.remove());

                // Fix problematic colors
                const elements = clonedDoc.querySelectorAll('*');
                let fixedElements = 0;

                elements.forEach((el: Element) => {
                    const htmlEl = el as HTMLElement;

                    // Fix oklch colors
                    if (htmlEl.style.color?.includes('oklch')) {
                        htmlEl.style.color = 'rgb(255, 255, 255)';
                        fixedElements++;
                    }
                    if (htmlEl.style.backgroundColor?.includes('oklch')) {
                        htmlEl.style.backgroundColor = 'transparent';
                        fixedElements++;
                    }

                    // Remove problematic transforms
                    if (htmlEl.style.transform?.includes('translate3d')) {
                        htmlEl.style.transform = htmlEl.style.transform.replace(
                            /translate3d\([^)]*\)/,
                            'translate(0,0)'
                        );
                        fixedElements++;
                    }
                });

                console.log(`üîß Fixed ${fixedElements} problematic elements`);
            },
        });

        const captureEnd = performance.now();

        const dataUrl = canvas.toDataURL('image/jpeg', 0.85);
        const finalSizeKB = Math.round(dataUrl.length / 1024);

        console.log('‚úÖ Enhanced export successful!');
        console.log(`üìä Final image size: ${finalSizeKB}KB`);
        console.log(`üñºÔ∏è Canvas dimensions: ${canvas.width}x${canvas.height}`);
        console.log(`‚ö° Total capture time: ${(captureEnd - captureStart).toFixed(2)}ms`);

        // Quality analysis
        const compressionRatio = (estimatedSizeMB * 1024) / finalSizeKB;
        console.log(`üìà Compression ratio: ${compressionRatio.toFixed(2)}:1`);

        const performanceEnd = performance.now();
        console.log(`üéØ Total debug time: ${(performanceEnd - performanceStart).toFixed(2)}ms`);

        console.groupEnd();
        return dataUrl;
    } catch (error) {
        console.error('‚ùå html2canvas capture failed:', error);

        // Enhanced fallback with more details
        try {
            console.log('üîÑ Creating enhanced fallback image...');

            const fallbackCanvas = document.createElement('canvas');
            fallbackCanvas.width = mapElement.offsetWidth || 800;
            fallbackCanvas.height = mapElement.offsetHeight || 600;
            const ctx = fallbackCanvas.getContext('2d');

            if (ctx) {
                // Background
                ctx.fillStyle = '#1F2937';
                ctx.fillRect(0, 0, fallbackCanvas.width, fallbackCanvas.height);

                // Border
                ctx.strokeStyle = '#374151';
                ctx.lineWidth = 2;
                ctx.strokeRect(10, 10, fallbackCanvas.width - 20, fallbackCanvas.height - 20);

                // Title
                ctx.fillStyle = '#FFFFFF';
                ctx.font = 'bold 24px Arial';
                ctx.textAlign = 'center';
                ctx.fillText(
                    '‡πÅ‡∏ú‡∏ô‡∏ú‡∏±‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡πâ‡∏≥‡∏™‡∏ß‡∏ô‡∏ú‡∏•‡πÑ‡∏°‡πâ',
                    fallbackCanvas.width / 2,
                    fallbackCanvas.height / 2 - 80
                );

                // Error message
                ctx.font = '18px Arial';
                ctx.fillStyle = '#F59E0B';
                ctx.fillText(
                    '(‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ)',
                    fallbackCanvas.width / 2,
                    fallbackCanvas.height / 2 - 40
                );

                // Instructions
                ctx.font = '16px Arial';
                ctx.fillStyle = '#9CA3AF';
                ctx.fillText(
                    '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ screenshot ‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
                    fallbackCanvas.width / 2,
                    fallbackCanvas.height / 2
                );

                // Error details
                ctx.font = '12px Arial';
                ctx.fillStyle = '#6B7280';
                const errorMessage = error instanceof Error ? error.message : String(error);
                ctx.fillText(
                    `Error: ${errorMessage.substring(0, 50)}...`,
                    fallbackCanvas.width / 2,
                    fallbackCanvas.height / 2 + 40
                );

                // Timestamp
                ctx.fillText(
                    '‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠: ' + new Date().toLocaleDateString('th-TH'),
                    fallbackCanvas.width / 2,
                    fallbackCanvas.height / 2 + 80
                );
                // Debug info
                ctx.textAlign = 'left';
                ctx.fillText(
                    `Size: ${mapElement.offsetWidth}x${mapElement.offsetHeight}`,
                    20,
                    fallbackCanvas.height - 60
                );
                ctx.fillText(`Elements: ${elementCount}`, 20, fallbackCanvas.height - 40);
                ctx.fillText(`Issues: ${styleIssues.length}`, 20, fallbackCanvas.height - 20);

                console.log('‚úÖ Enhanced fallback image created with debug info');

                const fallbackDataUrl = fallbackCanvas.toDataURL('image/jpeg', 0.8);
                console.groupEnd();
                return fallbackDataUrl;
            }
        } catch (fallbackError) {
            console.error('‚ùå Enhanced fallback creation also failed:', fallbackError);
        }

        console.groupEnd();
        return null;
    }
};

/**
 * ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï - Enhanced version
 */
export const resetSystem = () => {
    console.group('üîÑ Enhanced Debug: System Reset');

    try {
        // ‡∏•‡πâ‡∏≤‡∏á localStorage
        const beforeSize = localStorage.length;
        localStorage.removeItem('horticultureIrrigationData');
        localStorage.removeItem('horticultureIrrigationBackup');
        localStorage.removeItem('horticultureSettings');
        console.log(`‚úÖ Cleared localStorage (${beforeSize} items removed)`);

        // ‡∏•‡πâ‡∏≤‡∏á sessionStorage
        try {
            const sessionSize = sessionStorage.length;
            sessionStorage.clear();
            console.log(`‚úÖ Cleared sessionStorage (${sessionSize} items removed)`);
        } catch (error) {
            console.log('‚ö†Ô∏è Could not clear sessionStorage:', error);
        }

        // ‡∏•‡πâ‡∏≤‡∏á caches ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        if ('caches' in window) {
            caches
                .keys()
                .then((cacheNames) => {
                    return Promise.all(
                        cacheNames.map((cacheName) => {
                            console.log(`üóëÔ∏è Clearing cache: ${cacheName}`);
                            return caches.delete(cacheName);
                        })
                    );
                })
                .then(() => {
                    console.log('‚úÖ All caches cleared');
                })
                .catch((error) => {
                    console.log('‚ö†Ô∏è Could not clear all caches:', error);
                });
        }

        console.log('üîÑ System reset complete. Reloading page...');
        setTimeout(() => {
            window.location.reload();
        }, 1000);
    } catch (error) {
        console.error('‚ùå Error during system reset:', error);
    }

    console.groupEnd();
};

/**
 * ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• debug ‡πÅ‡∏ö‡∏ö‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
 */
export const exportDebugData = () => {
    console.group('üíæ Enhanced Debug: Export Comprehensive Data');

    const { data, report } = debugLocalStorage();

    if (!data) {
        console.error('‚ùå No data to export');
        console.groupEnd();
        return;
    }

    const debugInfo = {
        metadata: {
            timestamp: new Date().toISOString(),
            exportVersion: '2.0.0',
            userAgent: navigator.userAgent,
            url: window.location.href,
            language: navigator.language,
        },
        environment: {
            screenResolution: {
                width: window.screen.width,
                height: window.screen.height,
                devicePixelRatio: window.devicePixelRatio,
                colorDepth: window.screen.colorDepth,
            },
            viewport: {
                width: window.innerWidth,
                height: window.innerHeight,
            },
            memory: {
                // @ts-ignore
                usedJSHeapSize: performance.memory?.usedJSHeapSize || 0,
                // @ts-ignore
                totalJSHeapSize: performance.memory?.totalJSHeapSize || 0,
                // @ts-ignore
                jsHeapSizeLimit: performance.memory?.jsHeapSizeLimit || 0,
            },
        },
        projectData: data,
        debugReport: report,
        performanceMetrics: {
            loadTime: performance.now(),
            resourceCount: performance.getEntriesByType('resource').length,
            navigationTiming: performance.getEntriesByType('navigation')[0],
        },
        browserSupport: {
            canvas: !!(
                document.createElement('canvas').getContext &&
                document.createElement('canvas').getContext('2d')
            ),
            localStorage: typeof Storage !== 'undefined',
            sessionStorage: typeof sessionStorage !== 'undefined',
            fetch: typeof fetch !== 'undefined',
            webWorkers: typeof Worker !== 'undefined',
            offlineSupport: 'serviceWorker' in navigator,
            modernJS: typeof Promise !== 'undefined' && typeof Array.from !== 'undefined',
        },
    };

    const blob = new Blob([JSON.stringify(debugInfo, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `horticulture-debug-comprehensive-${Date.now()}.json`;
    a.click();
    URL.revokeObjectURL(url);

    console.log('‚úÖ Comprehensive debug data exported');
    console.log(`üìä Export size: ${Math.round(JSON.stringify(debugInfo).length / 1024)}KB`);
    console.groupEnd();
};

/**
 * ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÅ‡∏•‡∏∞‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
 */
export const showTroubleshootingTips = () => {
    console.group('üí° Enhanced Troubleshooting Guide - Complete Edition');

    console.log(`
üîß Complete Troubleshooting Guide (Version 2.0) üîß

=== 1. ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô ===
‚úÖ ‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:
   ‚Ä¢ ‡πÉ‡∏ä‡πâ debugLocalStorage() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á
   ‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏≠‡∏Å‡πÇ‡∏ã‡∏ô‡∏î‡πâ‡∏ß‡∏¢ Console
   ‚Ä¢ ‡∏•‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ó‡πà‡∏≠‡πÄ‡∏°‡∏ô‡∏£‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡πÇ‡∏ã‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤
   ‚Ä¢ ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô ‡πÉ‡∏´‡πâ‡∏•‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ã‡∏ô‡πÉ‡∏´‡∏°‡πà

üîç ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:
   ‚Ä¢ ‡∏Ñ‡πà‡∏≤‡∏à‡∏£‡∏¥‡∏á: ‡∏ô‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡∏à‡∏∏‡∏î‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà (‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ 100%)
   ‚Ä¢ ‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á
   ‚Ä¢ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πà‡∏≤‡∏á < 1 ‡∏ï‡πâ‡∏ô = ‡∏õ‡∏Å‡∏ï‡∏¥

=== 2. ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡πÑ‡∏°‡πà‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠ ===
‚úÖ ‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:
   ‚Ä¢ ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÉ‡∏ä‡πâ plantSpacing ‡∏à‡∏≤‡∏Å plantData ‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
   ‚Ä¢ ‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏°‡∏ó‡πà‡∏≠‡∏¢‡πà‡∏≠‡∏¢ ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏ó‡πà‡∏≠
   ‚Ä¢ ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡πÅ‡∏ô‡πà‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô ‡πÉ‡∏´‡πâ‡∏ß‡∏≤‡∏á‡∏ó‡πà‡∏≠‡∏¢‡πà‡∏≠‡∏¢‡πÉ‡∏´‡πâ‡∏´‡∏ô‡∏≤‡πÅ‡∏ô‡πà‡∏ô‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
   ‚Ä¢ ‡πÉ‡∏ä‡πâ Debug panel ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ

üéØ ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á:
   ‚Ä¢ ‡∏ó‡πà‡∏≠‡∏¢‡πà‡∏≠‡∏¢‡∏™‡∏±‡πâ‡∏ô = ‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏´‡∏ô‡∏≤‡πÅ‡∏ô‡πà‡∏ô
   ‚Ä¢ ‡∏ó‡πà‡∏≠‡∏¢‡πà‡∏≠‡∏¢‡∏¢‡∏≤‡∏ß = ‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢
   ‚Ä¢ ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ = 1.5 ‡πÄ‡∏°‡∏ï‡∏£

=== 3. ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ô‡πâ‡∏≥‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ===
‚úÖ ‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:
   ‚Ä¢ ‡∏ô‡πâ‡∏≥‡∏£‡∏ß‡∏° = ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡πâ‡∏ô‡∏à‡∏£‡∏¥‡∏á √ó ‡∏ô‡πâ‡∏≥‡∏ï‡πà‡∏≠‡∏ï‡πâ‡∏ô (‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ 100%)
   ‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö waterNeed ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡∏ô‡∏¥‡∏î‡∏û‡∏∑‡∏ä
   ‚Ä¢ ‡πÉ‡∏ä‡πâ generateCompleteProjectStats() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
   ‚Ä¢ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πà‡∏≤‡∏á < 5 ‡∏•‡∏¥‡∏ï‡∏£ = ‡∏õ‡∏Å‡∏ï‡∏¥

üíß ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:
   ‚Ä¢ "‡∏ô‡πâ‡∏≥‡∏à‡∏£‡∏¥‡∏á" = ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö
   ‚Ä¢ ‡∏î‡∏π‡πÉ‡∏ô Results page ‡∏™‡πà‡∏ß‡∏ô "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥"

=== 4. ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà ===
‚úÖ ‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:
   ‚Ä¢ ‡πÉ‡∏ä‡πâ Chrome ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥)
   ‚Ä¢ ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏î export (3-5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
   ‚Ä¢ ‡∏õ‡∏¥‡∏î popup/modal ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏Å‡πà‡∏≠‡∏ô export
   ‚Ä¢ ‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏ñ‡πâ‡∏≤‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏ç‡πà‡∏°‡∏≤‡∏Å
   ‚Ä¢ ‡πÉ‡∏ä‡πâ debugImageExport() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡πÄ‡∏â‡∏û‡∏≤‡∏∞

üñºÔ∏è ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ Export:
   ‚Ä¢ OKLCH colors ‚Üí ‡∏à‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô RGB ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
   ‚Ä¢ ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡πÑ‡∏°‡πà‡∏û‡∏≠ ‚Üí ‡∏•‡∏î‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡πá‡∏ô 80%
   ‚Ä¢ Element ‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‚Üí ‡∏ã‡πà‡∏≠‡∏ô‡∏ä‡∏±‡πâ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô
   ‚Ä¢ ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ ‚Üí ‡πÉ‡∏ä‡πâ screenshot ‡πÅ‡∏ó‡∏ô

=== 5. ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏£‡∏∞‡∏ö‡∏ö ===
‚úÖ ‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û:
   ‚Ä¢ ‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ > 1000 ‡∏ï‡πâ‡∏ô ‚Üí ‡πÅ‡∏ö‡πà‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡πà‡∏≠‡∏¢
   ‚Ä¢ ‡∏ó‡πà‡∏≠ > 100 ‡πÄ‡∏™‡πâ‡∏ô ‚Üí ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô
   ‚Ä¢ Complexity Score > 500 ‚Üí ‡∏õ‡∏£‡∏±‡∏ö‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏á‡∏Ñ‡πå‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö
   ‚Ä¢ Memory > 50MB ‚Üí ‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÇ‡∏ã‡∏ô

‚ö° ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°:
   ‚Ä¢ ‡πÉ‡∏ä‡πâ performanceCheck() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
   ‚Ä¢ ‡∏î‡∏π Memory usage ‡πÉ‡∏ô Debug panel
   ‚Ä¢ ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ: Complexity < 300, Memory < 20MB

=== 6. ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ===
‚úÖ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:
   1. ‡πÄ‡∏õ‡∏¥‡∏î Results page
   2. ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥"
   3. ‡∏î‡∏π‡∏™‡πà‡∏ß‡∏ô "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥"
   4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á
   5. ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á ‡πÉ‡∏ä‡πâ Debug commands

üîç ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Debug Commands:
   ‚Ä¢ debugLocalStorage() - ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
   ‚Ä¢ debugMapComponents(mapRef) - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
   ‚Ä¢ debugImageExport(element) - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö export
   ‚Ä¢ generateCompleteProjectStats(data) - ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
   ‚Ä¢ exportDebugData() - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• debug ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô

=== 7. ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞ ===

üì± ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ö‡∏ô Mobile:
   ‚Ä¢ ‡πÉ‡∏ä‡πâ landscape mode ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö
   ‚Ä¢ Touch controls ‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á ‚Üí ‡πÉ‡∏ä‡πâ mouse/trackpad
   ‚Ä¢ Memory ‡∏à‡∏≥‡∏Å‡∏±‡∏î ‚Üí ‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£

üñ•Ô∏è ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ö‡∏ô Desktop:
   ‚Ä¢ Browser ‡πÄ‡∏Å‡πà‡∏≤ ‚Üí ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
   ‚Ä¢ RAM ‡πÑ‡∏°‡πà‡∏û‡∏≠ ‚Üí ‡∏õ‡∏¥‡∏î‡πÅ‡∏ó‡πá‡∏ö‡∏≠‡∏∑‡πà‡∏ô
   ‚Ä¢ CPU ‡∏ä‡πâ‡∏≤ ‚Üí ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£

üåê ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ Network:
   ‚Ä¢ ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡∏ä‡πâ‡∏≤ ‚Üí ‡πÉ‡∏ä‡πâ offline mode ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
   ‚Ä¢ Tile ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á ‚Üí ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô map style
   ‚Ä¢ Search ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ‚Üí ‡πÉ‡∏™‡πà‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á

=== 8. ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á ===

üéØ ‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏î‡∏µ:
   ‚Ä¢ ‡∏ß‡∏≤‡∏á‡∏õ‡∏±‡πä‡∏°‡πÉ‡∏´‡πâ‡πÉ‡∏Å‡∏•‡πâ‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
   ‚Ä¢ ‡πÅ‡∏ö‡πà‡∏á‡πÇ‡∏ã‡∏ô‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏û‡∏∑‡∏ä
   ‚Ä¢ ‡∏ß‡∏≤‡∏á‡∏ó‡πà‡∏≠‡πÄ‡∏°‡∏ô‡πÉ‡∏´‡πâ‡∏™‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
   ‚Ä¢ ‡πÉ‡∏ä‡πâ exclusion areas ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏∏‡∏õ‡∏™‡∏£‡∏£‡∏Ñ

üìä ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:
   ‚Ä¢ ‡∏î‡∏π System Efficiency ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏Å‡∏¥‡∏ô 70%
   ‚Ä¢ Water Distribution Balance ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏Å‡∏¥‡∏ô 80%
   ‚Ä¢ Pipe Optimization ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏Å‡∏¥‡∏ô 60%
   ‚Ä¢ Plant Density ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏û‡∏∑‡∏ä

üîß ‡∏Å‡∏≤‡∏£‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏£‡∏±‡∏Å‡∏©‡∏≤:
   ‚Ä¢ Complexity: Low = ‡∏á‡πà‡∏≤‡∏¢, High = ‡∏¢‡∏≤‡∏Å
   ‚Ä¢ Accessibility Score > 7 = ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏á‡πà‡∏≤‡∏¢
   ‚Ä¢ Maintenance complexity ‡∏Ç‡∏∂‡πâ‡∏ô‡∏Å‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡πà‡∏≠

=== 9. Emergency Fixes ===

üö® ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏™‡∏µ‡∏¢:
   1. resetSystem() - ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢)
   2. exportDebugData() - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï
   3. clearProjectData() - ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
   4. loadProjectData() - ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà

üíæ ‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:
   ‚Ä¢ ‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡∏£‡∏≠‡∏á backup ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÉ‡∏ô localStorage
   ‚Ä¢ ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å JSON ‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏£‡∏≠‡∏á
   ‚Ä¢ ‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÑ‡∏ß‡πâ

=== 10. ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ===

üìù ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤:
   1. ‡πÉ‡∏ä‡πâ debugLocalStorage() - ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
   2. ‡πÉ‡∏ä‡πâ exportDebugData() - ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• debug
   3. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å error message ‡∏à‡∏≤‡∏Å Console
   4. ‡πÅ‡∏ô‡∏ö screenshot ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
   5. ‡∏£‡∏∞‡∏ö‡∏∏‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤

üéØ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£:
   ‚Ä¢ Browser version ‡πÅ‡∏•‡∏∞ OS
   ‚Ä¢ ‡∏Ç‡∏ô‡∏≤‡∏î‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£ (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ, ‡πÇ‡∏ã‡∏ô, ‡∏ó‡πà‡∏≠)
   ‚Ä¢ Error messages ‡∏à‡∏≤‡∏Å Console
   ‚Ä¢ Debug report file

üí° Tips ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢:
   ‚Ä¢ ‡∏Å‡∏î F12 ‡πÄ‡∏õ‡∏¥‡∏î Console ‡πÄ‡∏™‡∏°‡∏≠ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π log
   ‚Ä¢ Save project ‡∏ö‡πà‡∏≠‡∏¢‡πÜ ‡πÄ‡∏õ‡πá‡∏ô JSON backup
   ‚Ä¢ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö export ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏°‡∏≠‡∏ö‡∏á‡∏≤‡∏ô
   ‚Ä¢ ‡πÉ‡∏ä‡πâ Debug panel ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏õ‡∏±‡∏ç‡∏´‡∏≤

üåü Quick Reference Commands:
   window.debugHorticulture.debugLocalStorage()
   window.debugHorticulture.performanceCheck()
   window.debugHorticulture.exportDebugData()
   window.debugHorticulture.showTips()

Happy Debugging! üå±‚ú®
    `);

    console.groupEnd();
};

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û - Enhanced version
 */
export const performanceCheck = () => {
    console.group('‚ö° Enhanced Performance Analysis');

    const { data, report } = debugLocalStorage();

    if (!data) {
        console.log('‚ùå No data to check');
        console.groupEnd();
        return;
    }

    console.log('üìä Comprehensive Performance Analysis:');

    // Data size analysis
    const dataString = JSON.stringify(data);
    const dataSize = dataString.length;
    const dataSizeKB = dataSize / 1024;

    console.log(`üì¶ Data Analysis:`);
    console.log(`   - Raw size: ${dataSizeKB.toFixed(2)} KB`);
    console.log(`   - Compression potential: ${(dataSize / (dataSize * 0.3)).toFixed(1)}:1`);

    if (dataSizeKB > 1024) {
        console.warn('‚ö†Ô∏è Large data size (>1MB) may cause performance issues');
    }

    // Complexity analysis
    const complexity = {
        plants: data.plants?.length || 0,
        zones: data.zones?.length || 0,
        subMainPipes: data.subMainPipes?.length || 0,
        branchPipes:
            data.subMainPipes?.reduce((sum, pipe) => sum + (pipe.branchPipes?.length || 0), 0) || 0,
        exclusionAreas: data.exclusionAreas?.length || 0,
        mainPipes: data.mainPipes?.length || 0,
    };

    console.log('üéØ Complexity Breakdown:', complexity);

    // Performance scoring
    const performanceScores = {
        dataSize: Math.max(0, 100 - dataSizeKB / 10), // Penalty after 1MB
        plantCount: Math.max(0, 100 - complexity.plants / 10), // Penalty after 1000 plants
        pipeComplexity: Math.max(0, 100 - (complexity.subMainPipes + complexity.branchPipes) / 5), // Penalty after 500 pipes
        zoneCount: Math.max(0, 100 - complexity.zones * 2), // Penalty after 50 zones
        exclusionCount: Math.max(0, 100 - complexity.exclusionAreas * 5), // Penalty after 20 exclusions
    };

    const overallScore =
        Object.values(performanceScores).reduce((sum, score) => sum + score, 0) /
        Object.keys(performanceScores).length;

    console.log('üèÜ Performance Scores:');
    Object.entries(performanceScores).forEach(([metric, score]) => {
        const grade = score >= 80 ? 'üü¢' : score >= 60 ? 'üü°' : 'üî¥';
        console.log(`   ${grade} ${metric}: ${score.toFixed(1)}/100`);
    });

    console.log(`üìä Overall Performance: ${overallScore.toFixed(1)}/100`);

    // Memory estimation
    const estimatedMemory =
        complexity.plants * 0.1 + complexity.branchPipes * 0.05 + complexity.zones * 2 + dataSizeKB;

    console.log(`üíæ Estimated Memory Usage: ${estimatedMemory.toFixed(2)} KB`);

    // Recommendations
    console.log('üí° Performance Recommendations:');

    if (overallScore >= 80) {
        console.log('   ‚úÖ Excellent performance - no optimization needed');
    } else if (overallScore >= 60) {
        console.log('   üü° Good performance - minor optimizations possible');
        if (complexity.plants > 500)
            console.log('   ‚Ä¢ Consider reducing plant count or splitting project');
        if (complexity.branchPipes > 100) console.log('   ‚Ä¢ Simplify pipe network if possible');
    } else {
        console.log('   üî¥ Performance issues detected - optimization recommended');
        if (dataSizeKB > 500) console.log('   ‚Ä¢ Large data size - consider project splitting');
        if (complexity.plants > 1000) console.log('   ‚Ä¢ High plant count affecting performance');
        if (complexity.branchPipes > 200)
            console.log('   ‚Ä¢ Complex pipe network - simplify design');
        if (complexity.zones > 20) console.log('   ‚Ä¢ Too many zones - consolidate if possible');
    }

    // Browser performance
    if (typeof performance !== 'undefined' && (performance as any).memory) {
        const memory = (performance as any).memory;
        console.log('üñ•Ô∏è Browser Memory:');
        console.log(`   - Used: ${(memory.usedJSHeapSize / 1048576).toFixed(2)} MB`);
        console.log(`   - Total: ${(memory.totalJSHeapSize / 1048576).toFixed(2)} MB`);
        console.log(`   - Limit: ${(memory.jsHeapSizeLimit / 1048576).toFixed(2)} MB`);

        const memoryUsage = (memory.usedJSHeapSize / memory.jsHeapSizeLimit) * 100;
        if (memoryUsage > 80) {
            console.warn('‚ö†Ô∏è High memory usage - may cause browser slowdown');
        }
    }

    // Render performance estimation
    const estimatedRenderTime =
        complexity.plants * 0.1 + complexity.branchPipes * 0.5 + complexity.zones * 2;

    console.log(`üé® Estimated Render Time: ${estimatedRenderTime.toFixed(2)}ms`);

    if (estimatedRenderTime > 100) {
        console.warn('‚ö†Ô∏è High render time - map interactions may be slow');
    }

    console.groupEnd();

    return {
        overallScore,
        performanceScores,
        complexity,
        dataSize: dataSizeKB,
        estimatedMemory,
        estimatedRenderTime,
        recommendations: overallScore < 60 ? 'optimization_needed' : 'good',
    };
};

// ========== Export ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ú‡πà‡∏≤‡∏ô window object ==========
if (typeof window !== 'undefined') {
    (window as any).debugHorticulture = {
        debugLocalStorage,
        debugMapComponents,
        debugImageExport,
        resetSystem,
        exportDebugData,
        showTips: showTroubleshootingTips,
        performanceCheck,
    };

    console.log(`
üå± Enhanced Horticulture Debug Helper v2.0 Loaded! üå±

üéØ Available Commands:
debugHorticulture.debugLocalStorage() - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
debugHorticulture.debugMapComponents(mapRef) - ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞ export
debugHorticulture.debugImageExport(mapElement) - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ export ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
debugHorticulture.performanceCheck() - ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
debugHorticulture.exportDebugData() - ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• debug ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
debugHorticulture.resetSystem() - ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏∞‡∏ö‡∏ö (‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)
debugHorticulture.showTips() - ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤

üí° Quick Start: debugHorticulture.debugLocalStorage()
üÜò Help: debugHorticulture.showTips()
    `);
}
