// resources\js\pages\utils\calculations.ts

export const calculatePipeRolls = (totalLength: number, rollLength: number): number => {
    return Math.ceil(totalLength / rollLength);
};

export const getAdjustedC = (pipeType: string, age: number): number => {
    let baseC;
    switch (pipeType) {
        case 'HDPE PE 100':
            baseC = 145;
            break;
        case 'HDPE PE 80':
            baseC = 140;
            break;
        case 'LDPE':
            baseC = 135;
            break;
        case 'PVC':
            baseC = 150;
            break;
        case 'PE-RT':
            baseC = 145;
            break;
        case 'Flexible PE':
            baseC = 130;
            break;
        default:
            baseC = 135;
    }

    // ‡∏•‡∏î‡∏Ñ‡πà‡∏≤ C ‡∏ï‡∏≤‡∏°‡∏≠‡∏≤‡∏¢‡∏∏‡∏ó‡πà‡∏≠
    const adjustedC = Math.max(100, baseC - age * 2.5);
    return adjustedC;
};

export const getMinorLossRatio = (sectionType: string): number => {
    switch (sectionType) {
        case 'branch':
            return 0.2; // ‡∏ó‡πà‡∏≠‡∏¢‡πà‡∏≠‡∏¢‡∏°‡∏µ fitting ‡πÄ‡∏¢‡∏≠‡∏∞
        case 'secondary':
            return 0.15; // ‡∏ó‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏°‡∏µ fitting ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
        case 'main':
            return 0.1; // ‡∏ó‡πà‡∏≠‡∏´‡∏•‡∏±‡∏Å‡∏°‡∏µ fitting ‡∏ô‡πâ‡∏≠‡∏¢
        default:
            return 0.15;
    }
};

export const calculateImprovedHeadLoss = (
    flow_lpm: number,
    diameter_mm: number,
    length_m: number,
    pipeType: string,
    sectionType: string,
    pipeAgeYears: number
) => {
    // ‡πÅ‡∏õ‡∏•‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢
    const Q = flow_lpm / 60000; // m¬≥/s
    const D = diameter_mm / 1000; // m
    const C = getAdjustedC(pipeType, pipeAgeYears);

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Major Loss ‡∏î‡πâ‡∏ß‡∏¢‡∏™‡∏π‡∏ï‡∏£ Hazen-Williams
    const majorLoss =
        (10.67 * length_m * Math.pow(Q, 1.852)) / (Math.pow(C, 1.852) * Math.pow(D, 4.87));

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Minor Loss
    const minorLossRatio = getMinorLossRatio(sectionType);
    const minorLoss = majorLoss * minorLossRatio;

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏ô‡πâ‡∏≥
    const A = Math.PI * Math.pow(D / 2, 2);
    const velocity = Q / A;

    return {
        major: majorLoss,
        minor: minorLoss,
        total: majorLoss + minorLoss,
        velocity: velocity,
        C: C,
    };
};

export const checkVelocity = (velocity: number, section: string): string => {
    if (velocity > 3.0)
        return `üî¥ ${section}: ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å (${velocity.toFixed(3)} m/s) - ‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏¥‡∏î water hammer`;
    if (velocity > 2.5)
        return `üü° ${section}: ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏™‡∏π‡∏á (${velocity.toFixed(3)} m/s) - ‡∏Ñ‡∏ß‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡πà‡∏≠`;
    if (velocity < 0.3)
        return `üîµ ${section}: ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏ï‡πà‡∏≥‡∏°‡∏≤‡∏Å (${velocity.toFixed(3)} m/s) - ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏Å‡∏ï‡∏∞‡∏Å‡∏≠‡∏ô`;
    return `üü¢ ${section}: ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° (${velocity.toFixed(3)} m/s)`;
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡∏°‡πà)
export const getVelocityScore = (velocity: number): number => {
    if (velocity >= 1.0 && velocity <= 2.0) {
        return 50; // ‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    } else if (velocity >= 0.8 && velocity <= 2.5) {
        return 45; // ‡∏ä‡πà‡∏ß‡∏á‡∏î‡∏µ‡∏°‡∏≤‡∏Å
    } else if (velocity >= 0.6 && velocity <= 3.0) {
        return 35; // ‡∏ä‡πà‡∏ß‡∏á‡∏î‡∏µ
    } else if (velocity >= 0.4 && velocity <= 3.5) {
        return 25; // ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ
    } else if (velocity >= 0.3 && velocity <= 4.0) {
        return 15; // ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
    } else {
        return 0; // ‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
    }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡πà‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡∏°‡πà)
export const getSizeScore = (
    pipeSize: number,
    minSize: number,
    maxSize: number,
    optimalSize: number
): number => {
    if (pipeSize === optimalSize) {
        return 35; // ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    } else if (pipeSize >= optimalSize * 0.9 && pipeSize <= optimalSize * 1.1) {
        return 32; // ‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
    } else if (pipeSize >= minSize && pipeSize <= maxSize) {
        return 28; // ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ
    } else if (pipeSize >= minSize * 0.8 && pipeSize <= maxSize * 1.2) {
        return 20; // ‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ
    } else {
        return 5; // ‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
    }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÄ‡∏á‡∏¥‡∏ô (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡∏°‡πà)
export const getCostEfficiencyScore = (pipe: any, pipeType: string): number => {
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì cost per meter per mm diameter
    const costPerMeterPerMM = pipe.price / (pipe.lengthM * pipe.sizeMM);

    // ‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡πà‡∏≠
    let excellentThreshold, goodThreshold, averageThreshold;

    switch (pipeType) {
        case 'branch':
            excellentThreshold = 0.5;
            goodThreshold = 1.0;
            averageThreshold = 2.0;
            break;
        case 'secondary':
            excellentThreshold = 1.0;
            goodThreshold = 2.0;
            averageThreshold = 4.0;
            break;
        case 'main':
            excellentThreshold = 2.0;
            goodThreshold = 4.0;
            averageThreshold = 8.0;
            break;
        default:
            excellentThreshold = 1.0;
            goodThreshold = 2.0;
            averageThreshold = 4.0;
    }

    if (costPerMeterPerMM <= excellentThreshold) {
        return 15; // ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å
    } else if (costPerMeterPerMM <= goodThreshold) {
        return 12; // ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏î‡∏µ
    } else if (costPerMeterPerMM <= averageThreshold) {
        return 8; // ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
    } else {
        return 3; // ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏ï‡πà‡∏≥
    }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô Head Loss (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡∏°‡πà)
export const getHeadLossScore = (headLoss: number, pipeType: string): number => {
    let excellentThreshold, goodThreshold, averageThreshold;

    switch (pipeType) {
        case 'branch':
            excellentThreshold = 0.5;
            goodThreshold = 1.0;
            averageThreshold = 2.0;
            break;
        case 'secondary':
            excellentThreshold = 1.0;
            goodThreshold = 2.0;
            averageThreshold = 4.0;
            break;
        case 'main':
            excellentThreshold = 2.0;
            goodThreshold = 4.0;
            averageThreshold = 8.0;
            break;
        default:
            excellentThreshold = 1.0;
            goodThreshold = 2.0;
            averageThreshold = 4.0;
    }

    if (headLoss <= excellentThreshold) {
        return 15; // Head loss ‡∏ï‡πà‡∏≥‡∏°‡∏≤‡∏Å
    } else if (headLoss <= goodThreshold) {
        return 12; // Head loss ‡∏ï‡πà‡∏≥
    } else if (headLoss <= averageThreshold) {
        return 8; // Head loss ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
    } else {
        return 3; // Head loss ‡∏™‡∏π‡∏á
    }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡πà‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏ï‡∏≤‡∏° flow
export const calculateOptimalPipeSize = (
    flow_lpm: number,
    targetVelocity: number = 1.5
): number => {
    // Q = A √ó V
    // A = œÄ √ó (D/2)¬≤
    // D = 2 √ó sqrt(Q / (œÄ √ó V))

    const Q = flow_lpm / 60000; // m¬≥/s
    const V = targetVelocity; // m/s
    const D = 2 * Math.sqrt(Q / (Math.PI * V)); // meters
    const D_mm = D * 1000; // millimeters

    return D_mm;
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Database format
export const formatWaterFlow = (waterFlow: any) => {
    if (Array.isArray(waterFlow)) {
        return `${waterFlow[0]}-${waterFlow[1]}`;
    } else if (typeof waterFlow === 'string' && waterFlow.includes('-')) {
        return waterFlow;
    }
    return waterFlow ? waterFlow.toString() : '0';
};

export const formatRadius = (radius: any) => {
    if (Array.isArray(radius)) {
        return `${radius[0]}-${radius[1]}`;
    } else if (typeof radius === 'string' && radius.includes('-')) {
        return radius;
    }
    return radius ? radius.toString() : '0';
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å string ‡πÄ‡∏õ‡πá‡∏ô array (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å database) - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£ handle
export const parseRangeValue = (value: any): [number, number] | number => {
    // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: handle null ‡πÅ‡∏•‡∏∞ undefined
    if (value === null || value === undefined || value === '') {
        return 0;
    }

    if (Array.isArray(value)) {
        if (value.length === 2 && value.every((v) => typeof v === 'number' || !isNaN(Number(v)))) {
            return [Number(value[0]), Number(value[1])];
        } else if (value.length === 1) {
            return Number(value[0]) || 0;
        } else if (value.length > 2) {
            // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ array ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 2 ‡∏ï‡∏±‡∏ß ‡πÉ‡∏´‡πâ‡πÄ‡∏≠‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
            return [Number(value[0]), Number(value[value.length - 1])];
        }
        return 0;
    }

    if (typeof value === 'string') {
        // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: handle ‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á range
        if (value.includes('-') && !value.startsWith('-')) {
            const parts = value
                .split('-')
                .map((v) => {
                    const cleaned = v.trim().replace(/[^\d.]/g, ''); // ‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÅ‡∏•‡∏∞‡∏à‡∏∏‡∏î
                    return parseFloat(cleaned);
                })
                .filter((v) => !isNaN(v));

            if (parts.length === 2) {
                return [parts[0], parts[1]];
            } else if (parts.length === 1) {
                return parts[0];
            }
        } else if (value.includes(',')) {
            const parts = value
                .split(',')
                .map((v) => {
                    const cleaned = v.trim().replace(/[^\d.]/g, '');
                    return parseFloat(cleaned);
                })
                .filter((v) => !isNaN(v));

            if (parts.length >= 2) {
                return [parts[0], parts[parts.length - 1]];
            } else if (parts.length === 1) {
                return parts[0];
            }
        } else if (value.includes('~') || value.includes('‚Äì') || value.includes('‚Äî')) {
            // Handle different dash types
            const separator = value.includes('~') ? '~' : value.includes('‚Äì') ? '‚Äì' : '‚Äî';
            const parts = value
                .split(separator)
                .map((v) => {
                    const cleaned = v.trim().replace(/[^\d.]/g, '');
                    return parseFloat(cleaned);
                })
                .filter((v) => !isNaN(v));

            if (parts.length >= 2) {
                return [parts[0], parts[parts.length - 1]];
            } else if (parts.length === 1) {
                return parts[0];
            }
        } else {
            // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: clean string before parsing
            const cleaned = value.trim().replace(/[^\d.]/g, '');
            const numValue = parseFloat(cleaned);
            return isNaN(numValue) ? 0 : numValue;
        }
    }

    if (typeof value === 'number') {
        return isNaN(value) ? 0 : value;
    }

    // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: try to convert other types
    const numValue = parseFloat(String(value));
    return isNaN(numValue) ? 0 : numValue;
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á 3 ‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°
export const formatNumber = (value: number, decimals: number = 3): number => {
    return Math.round(value * Math.pow(10, decimals)) / Math.pow(10, decimals);
};

// ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö
export const sortForDropdown = (allItems: any[], recommendedItems: any[]) => {
    // ‡πÅ‡∏¢‡∏Å‡∏ó‡πà‡∏≠‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
    const highly_recommended = allItems
        .filter((item) => recommendedItems.includes(item) && item.score >= 70)
        .sort((a, b) => b.score - a.score);

    const recommended = allItems
        .filter((item) => recommendedItems.includes(item) && item.score >= 50 && item.score < 70)
        .sort((a, b) => b.score - a.score);

    const good_choice = allItems
        .filter((item) => !recommendedItems.includes(item) && item.score >= 40)
        .sort((a, b) => b.score - a.score);

    const usable = allItems
        .filter((item) => !recommendedItems.includes(item) && item.score >= 20 && item.score < 40)
        .sort((a, b) => b.score - a.score);

    const others = allItems
        .filter((item) => !recommendedItems.includes(item) && item.score < 20)
        .sort((a, b) => a.price - b.price);

    return [...highly_recommended, ...recommended, ...good_choice, ...usable, ...others];
};

export const isRecommended = (item: any, recommendedList: any[]) => {
    return recommendedList.includes(item);
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ó‡πà‡∏≠‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏° (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡∏°‡πà - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Database format)
export const evaluatePipeOverall = (
    pipe: any,
    flow_lpm: number,
    length_m: number,
    sectionType: string,
    pipeAgeYears: number,
    allowedTypes: string[]
) => {
    const headLossData = calculateImprovedHeadLoss(
        flow_lpm,
        pipe.sizeMM,
        length_m,
        pipe.pipeType,
        sectionType,
        pipeAgeYears
    );

    let score = 0;
    const velocity = headLossData.velocity;

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡πà‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö flow ‡∏ô‡∏µ‡πâ
    const optimalSize = calculateOptimalPipeSize(flow_lpm);

    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡πà‡∏ß‡∏á‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏ï‡∏≤‡∏° section type
    let minSize, maxSize;
    switch (sectionType) {
        case 'branch':
            minSize = 16;
            maxSize = 50;
            break;
        case 'secondary':
            minSize = 25;
            maxSize = 110;
            break;
        case 'main':
            minSize = 40;
            maxSize = 200;
            break;
        default:
            minSize = 16;
            maxSize = 200;
    }

    // 1. ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß (50%)
    score += getVelocityScore(velocity);

    // 2. ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° (35%)
    score += getSizeScore(pipe.sizeMM, minSize, maxSize, optimalSize);

    // 3. ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡πà‡∏≠ (‡πÉ‡∏´‡∏°‡πà) (10%)
    if (allowedTypes.length === 0 || allowedTypes.includes(pipe.pipeType)) {
        // ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≤‡∏°‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡πà‡∏≠
        switch (pipe.pipeType) {
            case 'HDPE PE 100':
                score += 10;
                break;
            case 'HDPE PE 80':
                score += 9;
                break;
            case 'PE-RT':
                score += 8;
                break;
            case 'PVC':
                score += 7;
                break;
            case 'LDPE':
                score += 6;
                break;
            case 'Flexible PE':
                score += 5;
                break;
            default:
                score += 3;
        }
    } else {
        score += 1; // ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
    }

    // 4. ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û (15%)
    score += getCostEfficiencyScore(pipe, sectionType);

    // 5. ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô Head Loss (10%)
    score += getHeadLossScore(headLossData.total, sectionType);

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
    const isTypeAllowed = allowedTypes.length === 0 || allowedTypes.includes(pipe.pipeType);
    const isVelocityOK = velocity >= 0.3 && velocity <= 3.5;

    return {
        ...pipe,
        score: formatNumber(score, 1),
        velocity: formatNumber(velocity, 3),
        headLoss: formatNumber(headLossData.total, 3),
        optimalSize: formatNumber(optimalSize, 1),
        isRecommended: score >= 70 && isTypeAllowed && isVelocityOK,
        isGoodChoice: score >= 50 && isTypeAllowed && isVelocityOK,
        isUsable: score >= 30 && isVelocityOK,
        isTypeAllowed,
    };
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏™‡∏õ‡∏£‡∏¥‡∏á‡πÄ‡∏Å‡∏≠‡∏£‡πå (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Database format)
export const evaluateSprinklerOverall = (sprinkler: any, targetFlow: number) => {
    // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Database format
    const flowRange = parseRangeValue(sprinkler.waterVolumeLitersPerHour);
    const radiusRange = parseRangeValue(sprinkler.radiusMeters);
    const pressureRange = parseRangeValue(sprinkler.pressureBar);

    let minFlow, maxFlow, minRadius, maxRadius, minPressure, maxPressure;

    if (Array.isArray(flowRange)) {
        [minFlow, maxFlow] = flowRange;
    } else {
        minFlow = maxFlow = flowRange;
    }

    if (Array.isArray(radiusRange)) {
        [minRadius, maxRadius] = radiusRange;
    } else {
        minRadius = maxRadius = radiusRange;
    }

    if (Array.isArray(pressureRange)) {
        [minPressure, maxPressure] = pressureRange;
    } else {
        minPressure = maxPressure = pressureRange;
    }

    let score = 0;

    // ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Ç‡∏≠‡∏á‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÑ‡∏´‡∏• (50%)
    if (targetFlow >= minFlow && targetFlow <= maxFlow) {
        const flowRangeSize = maxFlow - minFlow;
        const positionInRange = flowRangeSize > 0 ? (targetFlow - minFlow) / flowRangeSize : 0.5;

        if (positionInRange >= 0.3 && positionInRange <= 0.7) {
            score += 50;
        } else {
            score += 40;
        }
    } else if (targetFlow >= minFlow * 0.8 && targetFlow <= maxFlow * 1.2) {
        score += 30;
    } else if (targetFlow >= minFlow * 0.6 && targetFlow <= maxFlow * 1.5) {
        score += 15;
    } else {
        score += 5;
    }

    // ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û (25%)
    const avgFlow = (minFlow + maxFlow) / 2;
    const pricePerFlow = sprinkler.price / avgFlow;

    if (pricePerFlow < 1) {
        score += 25;
    } else if (pricePerFlow < 2) {
        score += 20;
    } else if (pricePerFlow < 5) {
        score += 15;
    } else if (pricePerFlow < 10) {
        score += 10;
    } else {
        score += 5;
    }

    // ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏±‡∏®‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢ (15%)
    const avgRadius = (minRadius + maxRadius) / 2;

    if (avgRadius >= 8) {
        score += 15;
    } else if (avgRadius >= 5) {
        score += 12;
    } else if (avgRadius >= 3) {
        score += 8;
    } else {
        score += 5;
    }

    // ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡πÅ‡∏£‡∏á‡∏î‡∏±‡∏ô (10%)
    const pressureRangeSize = maxPressure - minPressure;

    if (pressureRangeSize >= 3) {
        score += 10;
    } else if (pressureRangeSize >= 2) {
        score += 8;
    } else if (pressureRangeSize >= 1) {
        score += 6;
    } else {
        score += 4;
    }

    return {
        ...sprinkler,
        score: formatNumber(score, 1),
        flowMatch: targetFlow >= minFlow && targetFlow <= maxFlow,
        flowCloseMatch: targetFlow >= minFlow * 0.8 && targetFlow <= maxFlow * 1.2,
        isRecommended: score >= 60 && targetFlow >= minFlow * 0.9 && targetFlow <= maxFlow * 1.1,
        isGoodChoice: score >= 40 && targetFlow >= minFlow * 0.8 && targetFlow <= maxFlow * 1.2,
        isUsable: score >= 20 && targetFlow >= minFlow * 0.6 && targetFlow <= maxFlow * 1.4,
        targetFlow: formatNumber(targetFlow, 3),
        minFlow: formatNumber(minFlow, 3),
        maxFlow: formatNumber(maxFlow, 3),
        avgRadius: formatNumber(avgRadius, 3),
        pricePerFlow: formatNumber(pricePerFlow, 3),
    };
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏õ‡∏±‡πä‡∏° (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Database format)
export const evaluatePumpOverall = (pump: any, requiredFlow: number, requiredHead: number) => {
    // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Database format
    const maxFlow =
        pump.max_flow_rate_lpm || (Array.isArray(pump.flow_rate_lpm) ? pump.flow_rate_lpm[1] : 0);
    const maxHead = pump.max_head_m || (Array.isArray(pump.head_m) ? pump.head_m[0] : 0);

    let score = 0;

    // ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Ç‡∏≠‡∏á‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÑ‡∏´‡∏• (40%)
    if (maxFlow >= requiredFlow) {
        const flowRatio = maxFlow / requiredFlow;

        if (flowRatio >= 1.1 && flowRatio <= 2.0) {
            score += 40;
        } else if (flowRatio >= 1.05 && flowRatio <= 2.5) {
            score += 30;
        } else if (flowRatio >= 1.0 && flowRatio <= 3.0) {
            score += 20;
        } else {
            score += 5;
        }
    } else {
        score += 0;
    }

    // ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Ç‡∏≠‡∏á Head (35%)
    if (maxHead >= requiredHead) {
        const headRatio = maxHead / requiredHead;

        if (headRatio >= 1.1 && headRatio <= 2.0) {
            score += 35;
        } else if (headRatio >= 1.05 && headRatio <= 2.5) {
            score += 25;
        } else if (headRatio >= 1.0 && headRatio <= 3.0) {
            score += 15;
        } else {
            score += 5;
        }
    } else {
        score += 0;
    }

    // ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏ï‡πà‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤ (15%)
    const flowPerBaht = maxFlow / pump.price;

    if (flowPerBaht > 0.5) {
        score += 15;
    } else if (flowPerBaht > 0.3) {
        score += 12;
    } else if (flowPerBaht > 0.1) {
        score += 8;
    } else if (flowPerBaht > 0.05) {
        score += 5;
    } else {
        score += 2;
    }

    // ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° (10%)
    const powerHP = parseFloat(String(pump.powerHP).replace(/[^0-9.]/g, '')) || 0;
    const estimatedHP = requiredFlow * requiredHead * 0.00027;
    const powerRatio = powerHP / estimatedHP;

    if (powerRatio >= 1.0 && powerRatio <= 2.5) {
        score += 10;
    } else if (powerRatio >= 0.8 && powerRatio <= 3.0) {
        score += 7;
    } else if (powerRatio >= 0.6 && powerRatio <= 4.0) {
        score += 4;
    } else {
        score += 1;
    }

    return {
        ...pump,
        score: formatNumber(score, 1),
        maxFlow: formatNumber(maxFlow, 3),
        maxHead: formatNumber(maxHead, 3),
        powerHP: formatNumber(powerHP, 1),
        flowRatio: formatNumber(maxFlow / requiredFlow, 3),
        headRatio: formatNumber(maxHead / requiredHead, 3),
        flowPerBaht: formatNumber(flowPerBaht, 3),
        estimatedHP: formatNumber(estimatedHP, 3),
        isFlowAdequate: maxFlow >= requiredFlow,
        isHeadAdequate: maxHead >= requiredHead,
        isRecommended: score >= 60 && maxFlow >= requiredFlow && maxHead >= requiredHead,
        isGoodChoice: score >= 40 && maxFlow >= requiredFlow && maxHead >= requiredHead,
        isUsable: score >= 20 && maxFlow >= requiredFlow && maxHead >= requiredHead,
    };
};

// ============= NEW ADVANCED FUNCTIONS =============

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏™‡∏õ‡∏£‡∏¥‡∏á‡πÄ‡∏Å‡∏≠‡∏£‡πå (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏µ‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô)
export const evaluateSprinklerAdvanced = (
    sprinkler: any,
    targetFlow: number,
    systemRequirements: {
        farmSize: number;
        numberOfZones: number;
        irrigationTime: number;
    }
) => {
    const baseEvaluation = evaluateSprinklerOverall(sprinkler, targetFlow);

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡∏≤‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡∏ü‡∏≤‡∏£‡πå‡∏°
    let farmSizeBonus = 0;
    if (systemRequirements.farmSize <= 5) {
        // ‡∏ü‡∏≤‡∏£‡πå‡∏°‡πÄ‡∏•‡πá‡∏Å - ‡πÄ‡∏ô‡πâ‡∏ô‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î
        farmSizeBonus = sprinkler.price < 100 ? 10 : 0;
    } else if (systemRequirements.farmSize <= 20) {
        // ‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏Å‡∏•‡∏≤‡∏á - ‡πÄ‡∏ô‡πâ‡∏ô‡∏™‡∏°‡∏î‡∏∏‡∏•
        farmSizeBonus = sprinkler.price >= 50 && sprinkler.price <= 200 ? 15 : 0;
    } else {
        // ‡∏ü‡∏≤‡∏£‡πå‡∏°‡πÉ‡∏´‡∏ç‡πà - ‡πÄ‡∏ô‡πâ‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û
        farmSizeBonus = sprinkler.price >= 100 ? 20 : 0;
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÇ‡∏ã‡∏ô
    let zoneBonus = 0;
    if (systemRequirements.numberOfZones > 3) {
        // ‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏ç‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡πÑ‡∏î‡πâ
        zoneBonus =
            sprinkler.brand &&
            ['‡πÑ‡∏ä‡πÇ‡∏¢', 'CHAIYYO', 'NETAFIM'].includes(sprinkler.brand.toUpperCase())
                ? 10
                : 0;
    }

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°
    const finalScore = Math.min(100, baseEvaluation.score + farmSizeBonus + zoneBonus);

    return {
        ...baseEvaluation,
        score: formatNumber(finalScore, 1),
        farmSizeBonus,
        zoneBonus,
        isRecommended: finalScore >= 70 && baseEvaluation.flowMatch,
        isGoodChoice:
            finalScore >= 55 && (baseEvaluation.flowMatch || baseEvaluation.flowCloseMatch),
        isUsable: finalScore >= 35 && baseEvaluation.flowCloseMatch,
    };
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏õ‡∏±‡πä‡∏° (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏µ‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô)
export const evaluatePumpAdvanced = (
    pump: any,
    requiredFlow: number,
    requiredHead: number,
    systemRequirements: {
        numberOfZones: number;
        farmSize: number;
        simultaneousZones: number;
    }
) => {
    const baseEvaluation = evaluatePumpOverall(pump, requiredFlow, requiredHead);

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á
    let usageBonus = 0;

    // ‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏±‡πä‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á
    if (
        baseEvaluation.flowRatio >= 1.2 &&
        baseEvaluation.flowRatio <= 2.0 &&
        baseEvaluation.headRatio >= 1.2 &&
        baseEvaluation.headRatio <= 2.0
    ) {
        usageBonus += 15; // ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
    }

    // ‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡πÇ‡∏ã‡∏ô
    if (systemRequirements.numberOfZones > 1) {
        const powerHP = Number(pump.powerHP) || 0;
        const estimatedMinHP =
            requiredFlow * requiredHead * 0.00027 * systemRequirements.simultaneousZones;

        if (powerHP >= estimatedMinHP * 1.1 && powerHP <= estimatedMinHP * 2.5) {
            usageBonus += 10; // ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡πÇ‡∏ã‡∏ô
        }
    }

    // ‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡πÑ‡∏î‡πâ
    if (
        pump.brand &&
        ['MITSUBISHI', 'GRUNDFOS', '‡πÑ‡∏ä‡πÇ‡∏¢', 'CHAIYYO'].includes(pump.brand.toUpperCase())
    ) {
        usageBonus += 5;
    }

    // ‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏±‡πä‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ accessories ‡∏Ñ‡∏£‡∏ö‡∏Ñ‡∏£‡∏±‡∏ô
    if (pump.pumpAccessories && pump.pumpAccessories.length >= 3) {
        usageBonus += 5;
    }

    const finalScore = Math.min(100, baseEvaluation.score + usageBonus);

    return {
        ...baseEvaluation,
        score: formatNumber(finalScore, 1),
        usageBonus,
        isRecommended:
            finalScore >= 65 && baseEvaluation.isFlowAdequate && baseEvaluation.isHeadAdequate,
        isGoodChoice:
            finalScore >= 50 && baseEvaluation.isFlowAdequate && baseEvaluation.isHeadAdequate,
        isUsable:
            finalScore >= 30 && baseEvaluation.isFlowAdequate && baseEvaluation.isHeadAdequate,
    };
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ó‡πà‡∏≠ (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏µ‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô)
export const evaluatePipeAdvanced = (
    pipe: any,
    flow_lpm: number,
    length_m: number,
    sectionType: string,
    pipeAgeYears: number,
    allowedTypes: string[],
    systemRequirements: {
        farmSize: number;
        totalLength: number;
        pressureRequirement: number;
    }
) => {
    const baseEvaluation = evaluatePipeOverall(
        pipe,
        flow_lpm,
        length_m,
        sectionType,
        pipeAgeYears,
        allowedTypes
    );

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö
    let systemBonus = 0;

    // ‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏£‡∏∞‡∏ö‡∏ö
    if (systemRequirements.farmSize <= 10) {
        // ‡∏ü‡∏≤‡∏£‡πå‡∏°‡πÄ‡∏•‡πá‡∏Å - ‡πÄ‡∏ô‡πâ‡∏ô‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î
        if (pipe.price <= 500) systemBonus += 10;
    } else if (systemRequirements.farmSize <= 50) {
        // ‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏Å‡∏•‡∏≤‡∏á - ‡πÄ‡∏ô‡πâ‡∏ô‡∏™‡∏°‡∏î‡∏∏‡∏•
        if (pipe.price >= 300 && pipe.price <= 1000) systemBonus += 15;
    } else {
        // ‡∏ü‡∏≤‡∏£‡πå‡∏°‡πÉ‡∏´‡∏ç‡πà - ‡πÄ‡∏ô‡πâ‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û
        if (pipe.price >= 500) systemBonus += 20;
    }

    // ‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏™‡∏π‡∏á
    if (systemRequirements.pressureRequirement > 30 && pipe.pn >= 10) {
        systemBonus += 10;
    }

    // ‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏¢‡∏≤‡∏ß
    if (systemRequirements.totalLength > 1000 && pipe.lengthM >= 100) {
        systemBonus += 5; // ‡∏°‡πâ‡∏ß‡∏ô‡∏¢‡∏≤‡∏ß‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠
    }

    // ‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡πà‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö section
    let typeBonus = 0;
    switch (sectionType) {
        case 'branch':
            if (['LDPE', 'Flexible PE'].includes(pipe.pipeType)) typeBonus += 10;
            break;
        case 'secondary':
            if (['HDPE PE 80', 'HDPE PE 100'].includes(pipe.pipeType)) typeBonus += 15;
            break;
        case 'main':
            if (pipe.pipeType === 'HDPE PE 100') typeBonus += 20;
            break;
    }

    const finalScore = Math.min(100, baseEvaluation.score + systemBonus + typeBonus);

    return {
        ...baseEvaluation,
        score: formatNumber(finalScore, 1),
        systemBonus,
        typeBonus,
        isRecommended:
            finalScore >= 75 &&
            baseEvaluation.isTypeAllowed &&
            baseEvaluation.velocity >= 0.5 &&
            baseEvaluation.velocity <= 2.5,
        isGoodChoice:
            finalScore >= 60 &&
            baseEvaluation.isTypeAllowed &&
            baseEvaluation.velocity >= 0.3 &&
            baseEvaluation.velocity <= 3.0,
        isUsable:
            finalScore >= 40 && baseEvaluation.velocity >= 0.2 && baseEvaluation.velocity <= 3.5,
    };
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
export const selectBestEquipmentByPrice = (
    equipmentList: any[],
    preferHighPrice: boolean = true
): any => {
    if (!equipmentList || equipmentList.length === 0) return null;

    // ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
    const recommended = equipmentList.filter((item) => item.isRecommended);
    const goodChoice = equipmentList.filter((item) => item.isGoodChoice && !item.isRecommended);
    const usable = equipmentList.filter(
        (item) => item.isUsable && !item.isGoodChoice && !item.isRecommended
    );

    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ
    const targetGroup =
        recommended.length > 0
            ? recommended
            : goodChoice.length > 0
              ? goodChoice
              : usable.length > 0
                ? usable
                : equipmentList;

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤ (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î)
    if (preferHighPrice) {
        return targetGroup.sort((a, b) => b.price - a.price)[0];
    } else {
        return targetGroup.sort((a, b) => a.price - b.price)[0];
    }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡∏≠‡∏á input ‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
export const detectSignificantInputChanges = (
    oldInput: any,
    newInput: any,
    threshold: number = 0.15 // 15% threshold
): boolean => {
    if (!oldInput || !newInput) return true;

    const significantFields = [
        'totalTrees',
        'waterPerTreeLiters',
        'numberOfZones',
        'farmSizeRai',
        'irrigationTimeMinutes',
    ];

    return significantFields.some((field) => {
        const oldValue = oldInput[field] || 0;
        const newValue = newInput[field] || 0;

        if (oldValue === 0 && newValue === 0) return false;
        if (oldValue === 0 || newValue === 0) return true;

        const changeRatio = Math.abs(newValue - oldValue) / oldValue;
        return changeRatio > threshold;
    });
};

// ============= HELPER FUNCTIONS =============

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö validation ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å database
export const validateEquipmentData = (
    equipment: any,
    categoryType: 'sprinkler' | 'pump' | 'pipe'
): boolean => {
    if (
        !equipment ||
        !equipment.id ||
        !equipment.name ||
        equipment.price === null ||
        equipment.price === undefined
    ) {
        return false;
    }

    switch (categoryType) {
        case 'sprinkler':
            return !!(
                equipment.waterVolumeLitersPerHour &&
                equipment.radiusMeters &&
                equipment.pressureBar
            );
        case 'pump':
            return !!(equipment.powerHP && equipment.flow_rate_lpm && equipment.head_m);
        case 'pipe':
            return !!(equipment.pipeType && equipment.sizeMM && equipment.lengthM);
        default:
            return false;
    }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á database attributes ‡πÄ‡∏õ‡πá‡∏ô flat object
export const flattenEquipmentAttributes = (equipment: any): any => {
    const flattened = { ...equipment };

    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ attributes object ‡πÉ‡∏´‡πâ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡πÉ‡∏ô root level
    if (equipment.attributes && typeof equipment.attributes === 'object') {
        Object.keys(equipment.attributes).forEach((key) => {
            if (!flattened[key]) {
                // ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡∏ö‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
                flattened[key] = equipment.attributes[key];
            }
        });
    }

    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ structured attributes (array format)
    if (Array.isArray(equipment.attributes)) {
        equipment.attributes.forEach((attr: any) => {
            if (attr.attribute_name && attr.value !== undefined) {
                if (!flattened[attr.attribute_name]) {
                    flattened[attr.attribute_name] = attr.value;
                }
            }
        });
    }

    return flattened;
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô normalize equipment data ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°
export const normalizeEquipmentData = (
    equipment: any,
    categoryType: 'sprinkler' | 'pump' | 'pipe'
): any => {
    const flattened = flattenEquipmentAttributes(equipment);

    // Ensure basic fields are correct
    const normalized = {
        ...flattened,
        productCode: flattened.product_code || flattened.productCode,
        product_code: flattened.product_code || flattened.productCode,
        price: Number(flattened.price || 0),
        is_active: Boolean(flattened.is_active),
    };

    // Category-specific normalization
    switch (categoryType) {
        case 'sprinkler':
            // Ensure required sprinkler fields are parsed correctly
            if (normalized.waterVolumeLitersPerHour) {
                normalized.waterVolumeLitersPerHour = parseRangeValue(
                    normalized.waterVolumeLitersPerHour
                );
            }
            if (normalized.radiusMeters) {
                normalized.radiusMeters = parseRangeValue(normalized.radiusMeters);
            }
            if (normalized.pressureBar) {
                normalized.pressureBar = parseRangeValue(normalized.pressureBar);
            }
            break;

        case 'pump':
            // Ensure required pump fields are parsed correctly
            if (normalized.powerHP) {
                normalized.powerHP = Number(normalized.powerHP);
            }
            if (normalized.flow_rate_lpm) {
                normalized.flow_rate_lpm = parseRangeValue(normalized.flow_rate_lpm);
            }
            if (normalized.head_m) {
                normalized.head_m = parseRangeValue(normalized.head_m);
            }
            if (normalized.max_flow_rate_lpm) {
                normalized.max_flow_rate_lpm = Number(normalized.max_flow_rate_lpm);
            }
            if (normalized.max_head_m) {
                normalized.max_head_m = Number(normalized.max_head_m);
            }
            break;

        case 'pipe':
            // Ensure required pipe fields are parsed correctly
            if (normalized.sizeMM) {
                normalized.sizeMM = Number(normalized.sizeMM);
            }
            if (normalized.lengthM) {
                normalized.lengthM = Number(normalized.lengthM);
            }
            if (normalized.pn) {
                normalized.pn = Number(normalized.pn);
            }
            break;
    }

    return normalized;
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
export const compareEquipment = (equipmentA: any, equipmentB: any, criteria: string[]): number => {
    let scoreA = 0;
    let scoreB = 0;

    criteria.forEach((criterion) => {
        switch (criterion) {
            case 'price':
                // Lower price gets higher score
                if (equipmentA.price < equipmentB.price) scoreA += 1;
                else if (equipmentB.price < equipmentA.price) scoreB += 1;
                break;
            case 'score':
                // Higher score wins
                if (equipmentA.score > equipmentB.score) scoreA += 1;
                else if (equipmentB.score > equipmentA.score) scoreB += 1;
                break;
            case 'brand':
                // Brand preference (could be customized)
                const preferredBrands = ['‡πÑ‡∏ä‡πÇ‡∏¢', '‡πÅ‡∏ä‡∏°‡∏õ‡πå'];
                const brandScoreA = preferredBrands.indexOf(equipmentA.brand) + 1;
                const brandScoreB = preferredBrands.indexOf(equipmentB.brand) + 1;
                if (brandScoreA > brandScoreB) scoreA += 1;
                else if (brandScoreB > brandScoreA) scoreB += 1;
                break;
        }
    });

    return scoreA - scoreB;
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á equipment recommendation summary
export const generateEquipmentSummary = (equipment: any, analysisResult: any): any => {
    return {
        id: equipment.id,
        productCode: equipment.productCode || equipment.product_code,
        name: equipment.name,
        brand: equipment.brand,
        price: equipment.price,
        image: equipment.image,
        score: analysisResult.score,
        isRecommended: analysisResult.isRecommended,
        isGoodChoice: analysisResult.isGoodChoice,
        isUsable: analysisResult.isUsable,
        reasons: generateRecommendationReasons(equipment, analysisResult),
        warnings: generateEquipmentWarnings(equipment, analysisResult),
    };
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
export const generateRecommendationReasons = (equipment: any, analysisResult: any): string[] => {
    const reasons: string[] = [];

    if (analysisResult.isRecommended) {
        reasons.push('üåü ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏ï‡πâ‡∏ô');
    }

    if (analysisResult.score >= 80) {
        reasons.push('‚≠ê ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å');
    } else if (analysisResult.score >= 60) {
        reasons.push('‚úÖ ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏î‡∏µ');
    }

    if (analysisResult.flowMatch) {
        reasons.push('üíß ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÑ‡∏´‡∏•‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°');
    }

    if (analysisResult.isFlowAdequate) {
        reasons.push('üí® ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡πÑ‡∏´‡∏•‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠');
    }

    if (analysisResult.isHeadAdequate) {
        reasons.push('üìà ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏¢‡∏Å‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠');
    }

    if (
        analysisResult.velocity &&
        analysisResult.velocity >= 0.8 &&
        analysisResult.velocity <= 2.0
    ) {
        reasons.push('üéØ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏ô‡πâ‡∏≥‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°');
    }

    return reasons;
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
export const generateEquipmentWarnings = (equipment: any, analysisResult: any): string[] => {
    const warnings: string[] = [];

    if (!analysisResult.isUsable) {
        warnings.push('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏µ‡πâ');
    }

    if (analysisResult.velocity && analysisResult.velocity > 2.5) {
        warnings.push('üî¥ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏ô‡πâ‡∏≥‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏¥‡∏î water hammer');
    }

    if (analysisResult.velocity && analysisResult.velocity < 0.3) {
        warnings.push('üîµ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏ô‡πâ‡∏≥‡∏ï‡πà‡∏≥ ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏Å‡∏ï‡∏∞‡∏Å‡∏≠‡∏ô');
    }

    if (analysisResult.flowRatio && analysisResult.flowRatio > 3) {
        warnings.push('üí∞ ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‡∏≠‡∏≤‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÄ‡∏õ‡∏•‡∏∑‡∏≠‡∏á‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô');
    }

    if (!analysisResult.isFlowAdequate) {
        warnings.push('‚ùå ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÑ‡∏´‡∏•‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠');
    }

    if (!analysisResult.isHeadAdequate) {
        warnings.push('‚ùå ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏¢‡∏Å‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠');
    }

    if (analysisResult.headLoss && analysisResult.headLoss > 10) {
        warnings.push('üìâ Head loss ‡∏™‡∏π‡∏á ‡∏Ñ‡∏ß‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡πà‡∏≠‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏ç‡πà‡∏Å‡∏ß‡πà‡∏≤');
    }

    return warnings;
};

export const calculateCriticalPathFlow = (
    waterPerSprinklerLPM: number,
    systemConfig: {
        sprinklersPerLongestBranch: number;
        branchesPerLongestSecondary?: number;
        secondariesPerLongestMain?: number;
        hasSecondaryPipe: boolean;
        hasMainPipe: boolean;
    }
): {
    branchFlow: number;
    secondaryFlow: number;
    mainFlow: number;
    criticalFlow: number;
} => {
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì flow ‡πÉ‡∏ô‡∏ó‡πà‡∏≠‡∏¢‡πà‡∏≠‡∏¢‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    const branchFlow = waterPerSprinklerLPM * systemConfig.sprinklersPerLongestBranch;

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì flow ‡πÉ‡∏ô‡∏ó‡πà‡∏≠‡∏£‡∏≠‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    const secondaryFlow =
        systemConfig.hasSecondaryPipe && systemConfig.branchesPerLongestSecondary
            ? branchFlow * systemConfig.branchesPerLongestSecondary
            : 0;

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì flow ‡πÉ‡∏ô‡∏ó‡πà‡∏≠‡πÄ‡∏°‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    const mainFlow =
        systemConfig.hasMainPipe && systemConfig.secondariesPerLongestMain
            ? systemConfig.hasSecondaryPipe
                ? secondaryFlow * systemConfig.secondariesPerLongestMain
                : branchFlow *
                  systemConfig.secondariesPerLongestMain *
                  (systemConfig.branchesPerLongestSecondary || 1)
            : 0;

    // ‡∏´‡∏≤ flow ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏±‡πä‡∏°
    const criticalFlow = Math.max(branchFlow, secondaryFlow, mainFlow);

    return {
        branchFlow,
        secondaryFlow,
        mainFlow,
        criticalFlow,
    };
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Head Loss ‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Critical Path
export const calculateCriticalPathHeadLoss = (
    flows: { branch: number; secondary: number; main: number },
    pipes: {
        branch?: any;
        secondary?: any;
        main?: any;
    },
    lengths: {
        branchM: number;
        secondaryM: number;
        mainM: number;
    },
    pipeAge: number = 0
): {
    branchLoss: any;
    secondaryLoss: any;
    mainLoss: any;
    totalLoss: number;
    criticalPathAnalysis: string[];
} => {
    const analysis: string[] = [];

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Head Loss ‡∏ó‡πà‡∏≠‡∏¢‡πà‡∏≠‡∏¢
    const branchLoss = pipes.branch
        ? calculateImprovedHeadLoss(
              flows.branch,
              pipes.branch.sizeMM,
              lengths.branchM,
              pipes.branch.pipeType,
              'branch',
              pipeAge
          )
        : { major: 0, minor: 0, total: 0, velocity: 0, C: 135 };

    if (pipes.branch) {
        analysis.push(
            `‡∏ó‡πà‡∏≠‡∏¢‡πà‡∏≠‡∏¢ ${pipes.branch.sizeMM}mm: ${flows.branch.toFixed(1)} LPM ‚Üí ${branchLoss.total.toFixed(2)}m loss`
        );
    }

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Head Loss ‡∏ó‡πà‡∏≠‡∏£‡∏≠‡∏á
    const secondaryLoss = pipes.secondary
        ? calculateImprovedHeadLoss(
              flows.secondary,
              pipes.secondary.sizeMM,
              lengths.secondaryM,
              pipes.secondary.pipeType,
              'secondary',
              pipeAge
          )
        : { major: 0, minor: 0, total: 0, velocity: 0, C: 140 };

    if (pipes.secondary) {
        analysis.push(
            `‡∏ó‡πà‡∏≠‡∏£‡∏≠‡∏á ${pipes.secondary.sizeMM}mm: ${flows.secondary.toFixed(1)} LPM ‚Üí ${secondaryLoss.total.toFixed(2)}m loss`
        );
    }

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Head Loss ‡∏ó‡πà‡∏≠‡πÄ‡∏°‡∏ô
    const mainLoss = pipes.main
        ? calculateImprovedHeadLoss(
              flows.main,
              pipes.main.sizeMM,
              lengths.mainM,
              pipes.main.pipeType,
              'main',
              pipeAge
          )
        : { major: 0, minor: 0, total: 0, velocity: 0, C: 145 };

    if (pipes.main) {
        analysis.push(
            `‡∏ó‡πà‡∏≠‡πÄ‡∏°‡∏ô ${pipes.main.sizeMM}mm: ${flows.main.toFixed(1)} LPM ‚Üí ${mainLoss.total.toFixed(2)}m loss`
        );
    }

    const totalLoss = branchLoss.total + secondaryLoss.total + mainLoss.total;
    analysis.push(`‡∏£‡∏ß‡∏° Head Loss: ${totalLoss.toFixed(2)} ‡πÄ‡∏°‡∏ï‡∏£`);

    return {
        branchLoss,
        secondaryLoss,
        mainLoss,
        totalLoss,
        criticalPathAnalysis: analysis,
    };
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡πà‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏ï‡∏≤‡∏° flow ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
export const recommendPipeSize = (
    flow_lpm: number,
    pipeType: 'branch' | 'secondary' | 'main',
    targetVelocity: number = 1.5
): {
    recommendedSizeMM: number;
    minSizeMM: number;
    maxSizeMM: number;
    velocityRange: { min: number; max: number };
    reasoning: string;
} => {
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏ï‡∏≤‡∏° flow
    const optimalSizeMM = calculateOptimalPipeSize(flow_lpm, targetVelocity);

    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡πà‡∏ß‡∏á‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡πà‡∏≠
    let availableSizes: number[] = [];
    let reasoning = '';

    switch (pipeType) {
        case 'branch':
            availableSizes = [16, 20, 25, 32, 40, 50];
            reasoning = '‡∏ó‡πà‡∏≠‡∏¢‡πà‡∏≠‡∏¢: ‡πÄ‡∏ô‡πâ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏á‡πà‡∏≤‡∏¢';
            break;
        case 'secondary':
            availableSizes = [25, 32, 40, 50, 63, 75, 90, 110];
            reasoning = '‡∏ó‡πà‡∏≠‡∏£‡∏≠‡∏á: ‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û';
            break;
        case 'main':
            availableSizes = [63, 75, 90, 110, 125, 140, 160, 200];
            reasoning = '‡∏ó‡πà‡∏≠‡πÄ‡∏°‡∏ô: ‡πÄ‡∏ô‡πâ‡∏ô‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏á‡∏ó‡∏ô';
            break;
    }

    // ‡∏´‡∏≤‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    const recommendedSize = availableSizes.reduce((prev, curr) =>
        Math.abs(curr - optimalSizeMM) < Math.abs(prev - optimalSizeMM) ? curr : prev
    );

    // ‡∏´‡∏≤‡∏ä‡πà‡∏ß‡∏á‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° (¬±1 ‡∏Ç‡∏ô‡∏≤‡∏î)
    const index = availableSizes.indexOf(recommendedSize);
    const minSize = availableSizes[Math.max(0, index - 1)];
    const maxSize = availableSizes[Math.min(availableSizes.length - 1, index + 1)];

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ä‡πà‡∏ß‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
    const Q = flow_lpm / 60000; // m¬≥/s
    const D_recommended = recommendedSize / 1000; // m
    const A_recommended = Math.PI * Math.pow(D_recommended / 2, 2);
    const velocity_recommended = Q / A_recommended;

    const D_min = minSize / 1000;
    const A_min = Math.PI * Math.pow(D_min / 2, 2);
    const velocity_min = Q / A_min;

    const D_max = maxSize / 1000;
    const A_max = Math.PI * Math.pow(D_max / 2, 2);
    const velocity_max = Q / A_max;

    return {
        recommendedSizeMM: recommendedSize,
        minSizeMM: minSize,
        maxSizeMM: maxSize,
        velocityRange: {
            min: Math.min(velocity_min, velocity_max),
            max: Math.max(velocity_min, velocity_max),
        },
        reasoning,
    };
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
export const evaluateSystemDesign = (
    input: any,
    results: any
): {
    overallScore: number;
    designQuality: 'excellent' | 'good' | 'acceptable' | 'poor';
    recommendations: string[];
    warnings: string[];
    optimizations: string[];
} => {
    const recommendations: string[] = [];
    const warnings: string[] = [];
    const optimizations: string[] = [];
    let score = 100;

    // ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏ô‡πâ‡∏≥
    const velocities = [
        results.velocity.branch,
        results.velocity.secondary,
        results.velocity.main,
    ].filter((v) => v > 0);

    velocities.forEach((velocity, index) => {
        const sectionName = ['‡∏ó‡πà‡∏≠‡∏¢‡πà‡∏≠‡∏¢', '‡∏ó‡πà‡∏≠‡∏£‡∏≠‡∏á', '‡∏ó‡πà‡∏≠‡πÄ‡∏°‡∏ô'][index];
        if (velocity > 3.0) {
            warnings.push(
                `${sectionName}: ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (${velocity.toFixed(2)} m/s) - ‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á water hammer`
            );
            score -= 15;
        } else if (velocity > 2.5) {
            warnings.push(`${sectionName}: ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏™‡∏π‡∏á (${velocity.toFixed(2)} m/s)`);
            score -= 5;
        } else if (velocity < 0.3) {
            warnings.push(
                `${sectionName}: ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏ï‡πà‡∏≥‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (${velocity.toFixed(2)} m/s) - ‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡∏∞‡∏Å‡∏≠‡∏ô`
            );
            score -= 10;
        } else if (velocity >= 0.8 && velocity <= 2.0) {
            recommendations.push(`${sectionName}: ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° (${velocity.toFixed(2)} m/s)`);
        }
    });

    // ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô Head Loss
    const totalHeadLoss = results.headLoss.total;
    if (totalHeadLoss > 25) {
        warnings.push(`Head Loss ‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å (${totalHeadLoss.toFixed(1)}m) - ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡πà‡∏≠`);
        score -= 20;
        optimizations.push('‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏ó‡πà‡∏≠‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà‡∏Ç‡∏∂‡πâ‡∏ô 1-2 ‡∏Ç‡∏ô‡∏≤‡∏î');
    } else if (totalHeadLoss > 15) {
        warnings.push(`Head Loss ‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏™‡∏π‡∏á (${totalHeadLoss.toFixed(1)}m)`);
        score -= 10;
    } else if (totalHeadLoss <= 10) {
        recommendations.push(`Head Loss ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏î‡∏µ (${totalHeadLoss.toFixed(1)}m)`);
    }

    // ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏õ‡∏±‡πä‡∏°
    const pumpHead = results.pumpHeadRequired;
    if (pumpHead > 80) {
        warnings.push(`‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ Pump Head ‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å (${pumpHead.toFixed(1)}m)`);
        score -= 15;
        optimizations.push('‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡πÅ‡∏ö‡πà‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡πÇ‡∏ã‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î Head');
    } else if (pumpHead > 50) {
        warnings.push(`‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ Pump Head ‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏™‡∏π‡∏á (${pumpHead.toFixed(1)}m)`);
        score -= 5;
    }

    // ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö
    const complexity = results.systemDesign?.complexity;
    if (complexity === 'complex') {
        recommendations.push('‡∏£‡∏∞‡∏ö‡∏ö‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô: ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏ó‡∏µ‡πà‡∏î‡∏µ');
        optimizations.push('‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏ß‡∏≤‡∏•‡πå‡∏ß‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡∏à‡∏ß‡∏±‡∏î‡πÅ‡∏£‡∏á‡∏î‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∏‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç');
    }

    // ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö
    const flows = [results.flows.branch, results.flows.secondary, results.flows.main].filter(
        (f) => f > 0
    );
    const maxFlow = Math.max(...flows);
    const minFlow = Math.min(...flows);
    const flowRatio = maxFlow / minFlow;

    if (flowRatio > 10) {
        warnings.push('‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á flow ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ');
        score -= 10;
        optimizations.push('‡∏õ‡∏£‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏õ‡∏£‡∏¥‡∏á‡πÄ‡∏Å‡∏≠‡∏£‡πå‡πÉ‡∏´‡πâ‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏Å‡∏±‡∏ô‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô');
    }

    // ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
    if (results.bestSelections) {
        const totalCost = Object.values(results.bestSelections).reduce(
            (sum: number, item: any) => sum + (item?.price || 0),
            0
        );
        const efficiency = (results.totalWaterRequiredLPM / totalCost) * 1000; // LPM per 1000 baht

        if (efficiency > 5) {
            recommendations.push('‡∏£‡∏∞‡∏ö‡∏ö‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏≤‡∏ô‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏î‡∏µ');
        } else if (efficiency < 2) {
            optimizations.push('‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡∏Å‡∏ß‡πà‡∏≤‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô');
        }
    }

    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û
    let designQuality: 'excellent' | 'good' | 'acceptable' | 'poor';
    if (score >= 90) {
        designQuality = 'excellent';
        recommendations.push('üåü ‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡∏î‡∏µ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°');
    } else if (score >= 75) {
        designQuality = 'good';
        recommendations.push('‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡∏î‡∏µ');
    } else if (score >= 60) {
        designQuality = 'acceptable';
        recommendations.push('‚ö†Ô∏è ‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÅ‡∏ï‡πà‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á');
    } else {
        designQuality = 'poor';
        warnings.push('‚ùå ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏≤‡∏Å');
    }

    return {
        overallScore: Math.max(0, score),
        designQuality,
        recommendations,
        warnings,
        optimizations,
    };
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏∞‡∏ö‡∏ö
export const generateSystemAnalysisReport = (
    input: any,
    results: any
): {
    executive_summary: string;
    technical_details: any;
    recommendations: any;
    cost_analysis: any;
    implementation_notes: string[];
} => {
    const evaluation = evaluateSystemDesign(input, results);
    const criticalFlows = results.detailedFlows || results.flows;

    const executive_summary = `
        ‡∏£‡∏∞‡∏ö‡∏ö‡∏ä‡∏•‡∏õ‡∏£‡∏∞‡∏ó‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏≤‡∏£‡πå‡∏°‡∏Ç‡∏ô‡∏≤‡∏î ${input.farmSizeRai} ‡πÑ‡∏£‡πà 
        ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ ${input.totalTrees} ‡∏ï‡πâ‡∏ô ‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô ${input.numberOfZones} ‡πÇ‡∏ã‡∏ô
        ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡πâ‡∏≥‡∏£‡∏ß‡∏° ${results.totalWaterRequiredLPM.toFixed(1)} LPM
        ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö: ${evaluation.overallScore}/100 (${evaluation.designQuality})
    `;

    const technical_details = {
        system_complexity: results.systemDesign?.complexity || 'medium',
        critical_path_flows: criticalFlows,
        head_loss_breakdown: results.headLoss,
        pump_requirements: {
            flow: Math.max(
                criticalFlows.longestBranchFlow,
                criticalFlows.longestSecondaryFlow,
                criticalFlows.longestMainFlow
            ),
            head: results.pumpHeadRequired,
            estimated_power:
                (
                    results.pumpHeadRequired *
                    Math.max(
                        criticalFlows.longestBranchFlow,
                        criticalFlows.longestSecondaryFlow,
                        criticalFlows.longestMainFlow
                    ) *
                    0.00027
                ).toFixed(1) + ' HP',
        },
        velocity_analysis: results.velocity,
    };

    const recommendations = {
        equipment: evaluation.recommendations,
        warnings: evaluation.warnings,
        optimizations: evaluation.optimizations,
    };

    const cost_analysis = {
        equipment_costs: results.bestSelections
            ? Object.entries(results.bestSelections).map(([type, item]: [string, any]) => ({
                  type,
                  item: item?.name || 'N/A',
                  price: item?.price || 0,
              }))
            : [],
        total_estimated_cost: results.bestSelections
            ? Object.values(results.bestSelections).reduce(
                  (sum: number, item: any) => sum + (item?.price || 0),
                  0
              )
            : 0,
        cost_per_tree: results.bestSelections
            ? (
                  Object.values(results.bestSelections).reduce(
                      (sum: number, item: any) => sum + (item?.price || 0),
                      0
                  ) / input.totalTrees
              ).toFixed(0) + ' ‡∏ö‡∏≤‡∏ó/‡∏ï‡πâ‡∏ô'
            : 'N/A',
    };

    const implementation_notes = [
        '‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏ß‡∏≤‡∏•‡πå‡∏ß‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∏‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç',
        '‡πÉ‡∏ä‡πâ filter ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏±‡πä‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏∏‡∏î‡∏ï‡∏±‡∏ô',
        '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏£‡∏á‡∏î‡∏±‡∏ô‡∏ô‡πâ‡∏≥‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥',
        '‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏™‡∏õ‡∏£‡∏¥‡∏á‡πÄ‡∏Å‡∏≠‡∏£‡πå‡∏ó‡∏∏‡∏Å 3-6 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô',
        '‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡∏£‡∏∞‡∏ö‡∏ö backup ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏±‡πä‡∏°‡∏´‡∏•‡∏±‡∏Å',
        ...evaluation.optimizations,
    ];

    return {
        executive_summary,
        technical_details,
        recommendations,
        cost_analysis,
        implementation_notes,
    };
};
