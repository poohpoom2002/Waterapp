/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/no-explicit-any */
// resources\js\pages\components\CalculationSummary.tsx
import React from 'react';
import { CalculationResults, IrrigationInput } from '../types/interfaces';
import { Zone } from '../../utils/horticultureUtils';
import { useLanguage } from '../../contexts/LanguageContext';

interface ZoneOperationGroup {
    id: string;
    zones: string[];
    order: number;
    label: string;
}

interface CalculationSummaryProps {
    results: CalculationResults;
    input: IrrigationInput;
    selectedSprinkler: any;
    selectedPump?: any;
    selectedBranchPipe?: any;
    selectedSecondaryPipe?: any;
    selectedMainPipe?: any;
    activeZone?: Zone;
    selectedZones?: string[];
    allZoneSprinklers: { [zoneId: string]: any };
    projectMode?: 'horticulture' | 'garden' | 'field-crop' | 'greenhouse';
    showPump?: boolean;
    simultaneousZonesCount?: number;
    zoneOperationGroups?: ZoneOperationGroup[];
    getZoneName?: (zoneId: string) => string;
}

const CalculationSummary: React.FC<CalculationSummaryProps> = ({
    results,
    input,
    selectedSprinkler,
    activeZone,
    selectedZones = [],
    allZoneSprinklers,
    projectMode = 'horticulture',
    showPump = true,
    simultaneousZonesCount = 1,
    zoneOperationGroups = [],
    getZoneName = (id) => id,
}) => {
    const { t } = useLanguage();
    const actualPump = results.autoSelectedPump;
    const actualBranchPipe = results.autoSelectedBranchPipe;
    const actualSecondaryPipe = results.autoSelectedSecondaryPipe;
    const actualMainPipe = results.autoSelectedMainPipe;

    const isMultiZone =
        selectedZones.length > 1 || (results.allZoneResults && results.allZoneResults.length > 1);

    const getSprinklerPressureInfo = () => {
        if (!selectedSprinkler) {
            return {
                pressure: input.pressureHeadM,
                source: '‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô',
            };
        }

        let minPressure, maxPressure;
        const pressureData = selectedSprinkler.pressureBar;

        if (Array.isArray(pressureData)) {
            minPressure = pressureData[0];
            maxPressure = pressureData[1];
        } else if (typeof pressureData === 'string' && pressureData.includes('-')) {
            const parts = pressureData.split('-');
            minPressure = parseFloat(parts[0]);
            maxPressure = parseFloat(parts[1]);
        } else {
            minPressure = maxPressure = parseFloat(String(pressureData));
        }

        const avgPressureBar = (minPressure + maxPressure) / 2;
        const pressureM = avgPressureBar * 10.2;

        return {
            pressure: pressureM,
            source: `‡∏à‡∏≤‡∏Å${projectMode === 'garden' ? t('‡∏´‡∏±‡∏ß‡∏â‡∏µ‡∏î') : t('‡∏™‡∏õ‡∏£‡∏¥‡∏á‡πÄ‡∏Å‡∏≠‡∏£‡πå')} (${avgPressureBar.toFixed(1)} bar)`,
            pressureBar: avgPressureBar,
        };
    };

    const pressureInfo = getSprinklerPressureInfo();

    const getSystemPerformance = () => {
        const performance = {
            velocityStatus: 'good' as 'good' | 'warning' | 'critical',
            headLossStatus: 'good' as 'good' | 'warning' | 'critical',
            pumpStatus: 'good' as 'good' | 'warning' | 'critical',
            overallStatus: 'good' as 'good' | 'warning' | 'critical',
        };

        const velocities = [
            results.velocity.branch,
            results.velocity.secondary,
            results.velocity.main,
        ].filter((v) => v > 0);

        const hasHighVelocity = velocities.some((v) => v > 2.5);
        const hasLowVelocity = velocities.some((v) => v < 0.6);
        const hasOptimalVelocity = velocities.some((v) => v >= 0.8 && v <= 2.0);

        if (hasHighVelocity) performance.velocityStatus = 'critical';
        else if (hasLowVelocity && !hasOptimalVelocity) performance.velocityStatus = 'warning';

        const headLossRatio = results.headLossValidation?.ratio || 0;
        if (headLossRatio > 25) performance.headLossStatus = 'critical';
        else if (headLossRatio > 20) performance.headLossStatus = 'warning';

        if (showPump && actualPump) {
            if (!actualPump.isFlowAdequate || !actualPump.isHeadAdequate) {
                performance.pumpStatus = 'critical';
            } else if (actualPump.flowRatio > 2.5 || actualPump.headRatio > 2.5) {
                performance.pumpStatus = 'warning';
            }
        }

        const statuses = [performance.velocityStatus, performance.headLossStatus];
        if (showPump) statuses.push(performance.pumpStatus);

        if (statuses.includes('critical')) performance.overallStatus = 'critical';
        else if (statuses.includes('warning')) performance.overallStatus = 'warning';

        return performance;
    };

    const systemPerformance = getSystemPerformance();

    const getStatusColor = (status: string) => {
        switch (status) {
            case 'good':
                return 'text-green-400';
            case 'warning':
                return 'text-yellow-400';
            case 'critical':
                return 'text-red-400';
            default:
                return 'text-gray-400';
        }
    };

    const getStatusIcon = (status: string) => {
        switch (status) {
            case 'good':
                return '‚úÖ';
            case 'warning':
                return '‚ö†Ô∏è';
            case 'critical':
                return '‚ùå';
            default:
                return '‚ùì';
        }
    };

    const getOperationModeLabel = (mode: string) => {
        switch (mode) {
            case 'sequential':
                return t('‡πÄ‡∏õ‡∏¥‡∏î‡∏ó‡∏µ‡∏•‡∏∞‡πÇ‡∏ã‡∏ô');
            case 'simultaneous':
                return t('‡πÄ‡∏õ‡∏¥‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô‡∏ó‡∏∏‡∏Å‡πÇ‡∏ã‡∏ô');
            case 'custom':
                return t('‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏ö‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á');
            default:
                return t('‡πÇ‡∏ã‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß');
        }
    };

    return (
        <div className="space-y-6">
            {/* ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏ã‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô */}
            {activeZone && (
                <div className="rounded-lg bg-purple-900 p-4">
                    <h3 className="mb-2 text-lg font-bold text-purple-300">
                        {projectMode === 'garden' ? t('üè°') : t('üåø')} {t('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏ã‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:')}
                        {activeZone.name}
                    </h3>
                    <div className="grid grid-cols-2 gap-4 text-sm text-gray-300 md:grid-cols-4">
                        {activeZone.area >= 1600 ? (
                            <p>{t('‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà:')} {(activeZone.area / 1600).toFixed(1)} {t('‡πÑ‡∏£‡πà')}</p>
                        ) : (
                            <p>{t('‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà:')} {activeZone.area.toFixed(2)} {t('‡∏ï‡∏£.‡∏°.')}</p>
                        )}
                        <p>
                            {t('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô')}{projectMode === 'garden' ? t('‡∏´‡∏±‡∏ß‡∏â‡∏µ‡∏î') : t('‡∏ï‡πâ‡∏ô')}:{' '}
                            {activeZone.plantCount.toLocaleString()}{' '}
                            {projectMode === 'garden' ? t('‡∏´‡∏±‡∏ß') : t('‡∏ï‡πâ‡∏ô')}
                        </p>
                        <p>{t('‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡πâ‡∏≥:')} {activeZone.totalWaterNeed.toFixed(0)} {t('‡∏•‡∏¥‡∏ï‡∏£/‡∏ß‡∏±‡∏ô')}</p>
                        {projectMode === 'horticulture' && (
                            <p>{t('‡∏û‡∏∑‡∏ä‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏π‡∏Å:')} {activeZone.plantData?.name || t('‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')}</p>
                        )}
                    </div>
                    <div className="mt-2 rounded bg-purple-800 p-2">
                        <p className="text-xs text-purple-200">
                            üí° {t('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡πÇ‡∏ã‡∏ô')} {activeZone.name} {t('‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤')}
                        </p>
                    </div>
                </div>
            )}

            {/* ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡πÇ‡∏ã‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô */}
            <div className="rounded-lg bg-gradient-to-r from-green-600 to-blue-600 p-4">
                <h2 className="mb-2 text-lg font-bold text-white">
                    ü§ñ {t('‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥')}
                    {isMultiZone && activeZone && (
                        <span className="ml-2 text-sm font-normal">
                            ({t('‡πÇ‡∏ã‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:')} {activeZone.name})
                        </span>
                    )}
                </h2>
                <div className="grid grid-cols-2 gap-4 text-sm md:grid-cols-4">
                    <div className="text-center">
                        <p className="text-blue-200">{t('‡∏ó‡πà‡∏≠‡∏¢‡πà‡∏≠‡∏¢')}</p>
                        <p
                            className={`text-xl font-bold ${
                                actualBranchPipe?.isRecommended
                                    ? 'text-green-300'
                                    : actualBranchPipe?.isGoodChoice
                                      ? 'text-yellow-300'
                                      : 'text-orange-300'
                            }`}
                        >
                            {actualBranchPipe ? `${actualBranchPipe.sizeMM}mm` : t('‡πÑ‡∏°‡πà‡∏°‡∏µ')}
                        </p>
                        <p className="text-xs text-blue-100">
                            {actualBranchPipe?.isRecommended
                                ? t('üåü ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥')
                                : actualBranchPipe?.isGoodChoice
                                  ? t('‚úÖ ‡∏î‡∏µ')
                                  : actualBranchPipe
                                    ? t('‚ö° ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ')
                                    : t('‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ')}
                        </p>
                        <p className="text-xs text-blue-200">
                            {t('‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô:')} {actualBranchPipe?.score || t('N/A')}/{t('100')}
                        </p>
                    </div>

                    {results.hasValidSecondaryPipe && (
                        <div className="text-center">
                            <p className="text-orange-200">{t('‡∏ó‡πà‡∏≠‡∏£‡∏≠‡∏á')}</p>
                            <p
                                className={`text-xl font-bold ${
                                    actualSecondaryPipe?.isRecommended
                                        ? 'text-green-300'
                                        : actualSecondaryPipe?.isGoodChoice
                                          ? 'text-yellow-300'
                                          : 'text-orange-300'
                                }`}
                            >
                                {actualSecondaryPipe ? `${actualSecondaryPipe.sizeMM}mm` : t('‡πÑ‡∏°‡πà‡∏°‡∏µ')}
                            </p>
                            <p className="text-xs text-orange-100">
                                {actualSecondaryPipe?.isRecommended
                                    ? t('üåü ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥')
                                    : actualSecondaryPipe?.isGoodChoice
                                      ? t('‚úÖ ‡∏î‡∏µ')
                                      : actualSecondaryPipe
                                        ? t('‚ö° ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ')
                                        : t('‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ')}
                            </p>
                            <p className="text-xs text-orange-200">
                                {t('‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô:')} {actualSecondaryPipe?.score || t('N/A')}/{t('100')}
                            </p>
                        </div>
                    )}

                    {results.hasValidMainPipe && (
                        <div className="text-center">
                            <p className="text-cyan-200">{t('‡∏ó‡πà‡∏≠‡∏´‡∏•‡∏±‡∏Å')}</p>
                            <p
                                className={`text-xl font-bold ${
                                    actualMainPipe?.isRecommended
                                        ? 'text-green-300'
                                        : actualMainPipe?.isGoodChoice
                                          ? 'text-yellow-300'
                                          : 'text-orange-300'
                                }`}
                            >
                                {actualMainPipe ? `${actualMainPipe.sizeMM}mm` : t('‡πÑ‡∏°‡πà‡∏°‡∏µ')}
                            </p>
                            <p className="text-xs text-cyan-100">
                                {actualMainPipe?.isRecommended
                                    ? t('üåü ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥')
                                    : actualMainPipe?.isGoodChoice
                                      ? t('‚úÖ ‡∏î‡∏µ')
                                      : actualMainPipe
                                        ? t('‚ö° ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ')
                                        : t('‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ')}
                            </p>
                            <p className="text-xs text-cyan-200">
                                {t('‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô:')} {actualMainPipe?.score || t('N/A')}/{t('100')}
                            </p>
                        </div>
                    )}

                    {showPump && (
                        <div className="text-center">
                            <p className="text-red-200">{t('‡∏õ‡∏±‡πä‡∏° (‡∏ó‡∏±‡πâ‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ)')}</p>
                            <p
                                className={`text-xl font-bold ${
                                    actualPump?.isRecommended
                                        ? 'text-green-300'
                                        : actualPump?.isGoodChoice
                                          ? 'text-yellow-300'
                                          : 'text-orange-300'
                                }`}
                            >
                                {actualPump ? `${actualPump.powerHP}HP` : t('‡πÑ‡∏°‡πà‡∏°‡∏µ')}
                            </p>
                            <p className="text-xs text-red-100">
                                {actualPump?.isRecommended
                                    ? t('üåü ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥')
                                    : actualPump?.isGoodChoice
                                      ? t('‚úÖ ‡∏î‡∏µ')
                                      : actualPump
                                        ? t('‚ö° ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ')
                                        : t('‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ')}
                            </p>
                            <p className="text-xs text-red-200">
                                {t('‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô:')} {actualPump?.score || t('N/A')}/{t('100')}
                            </p>
                        </div>
                    )}
                </div>
                <div className="mt-3 text-center text-sm text-white">
                    <p>üéõÔ∏è {t('‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡πà‡∏ß‡∏ô')}</p>
                    {isMultiZone && (
                        <p className="text-yellow-200">
                            {t('‡∏ó‡πà‡∏≠‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡πÇ‡∏ã‡∏ô')} {showPump && `| ${t('‡∏õ‡∏±‡πä‡∏°‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≤‡∏° operation mode ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å')}`}
                        </p>
                    )}
                </div>
            </div>

            {/* ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡πÇ‡∏ã‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô */}
            <div className="rounded-lg bg-gradient-to-r from-blue-600 to-purple-600 p-4">
                <h2 className="mb-2 text-lg font-bold text-white">
                    üéØ {t('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç')}
                    {isMultiZone && activeZone && (
                        <span className="ml-2 text-sm font-normal">
                            ({t('‡πÇ‡∏ã‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:')} {activeZone.name})
                        </span>
                    )}
                </h2>
                <div className="grid grid-cols-2 gap-4 text-sm md:grid-cols-4">
                    <div className="text-center">
                        <p className="text-blue-200">{t('‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡πâ‡∏≥')}</p>
                        <p className="text-xl font-bold">
                            {results.totalWaterRequiredLPM.toFixed(1)} {t('LPM')}
                        </p>
                        {activeZone && <p className="text-xs text-blue-100">({activeZone.name})</p>}
                    </div>
                    <div className="text-center">
                        <p className="text-green-200">{t('Head Loss ‡∏£‡∏ß‡∏°')}</p>
                        <p
                            className={`text-xl font-bold ${getStatusColor(systemPerformance.headLossStatus)}`}
                        >
                            {results.headLoss.total.toFixed(1)} m
                        </p>
                        <p className="text-xs text-green-100">
                            {systemPerformance.headLossStatus === 'good'
                                ? t('‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°')
                                : systemPerformance.headLossStatus === 'warning'
                                  ? t('‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏™‡∏π‡∏á')
                                  : t('‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ')}
                        </p>
                    </div>
                    {showPump && (
                        <div className="text-center">
                            <p className="text-purple-200">{t('Pump Head')}</p>
                            <p className="text-xl font-bold text-orange-300">
                                {results.pumpHeadRequired.toFixed(1)} m
                            </p>
                            {isMultiZone && results.projectSummary && (
                                <p className="text-xs text-purple-100">
                                    ({t('‡∏ï‡∏≤‡∏°')}
                                    {getOperationModeLabel(results.projectSummary.operationMode)})
                                </p>
                            )}
                            <p className="text-xs text-purple-100">
                                {t('Safety Factor:')} {results.safetyFactor.toFixed(2)}x
                            </p>
                        </div>
                    )}
                    <div className="text-center">
                        <p className="text-pink-200">
                            {t('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô')}{projectMode === 'garden' ? t('‡∏´‡∏±‡∏ß‡∏â‡∏µ‡∏î') : t('‡∏™‡∏õ‡∏£‡∏¥‡∏á‡πÄ‡∏Å‡∏≠‡∏£‡πå')}
                        </p>
                        <p className="text-xl font-bold text-green-300">
                            {results.totalSprinklers} {projectMode === 'garden' ? t('‡∏´‡∏±‡∏ß') : t('‡∏ï‡πâ‡∏ô')}
                        </p>
                        {activeZone && (
                            <p className="text-xs text-pink-100">({t('‡πÉ‡∏ô‡πÇ‡∏ã‡∏ô')} {activeZone.name})</p>
                        )}
                    </div>
                </div>
            </div>

            {/* ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡πÇ‡∏ã‡∏ô */}
            {isMultiZone && results.projectSummary && (
                <div className="rounded-lg bg-blue-900 p-4">
                    <h3 className="mb-3 text-lg font-bold text-blue-300">
                        üìä {t('‡∏™‡∏£‡∏∏‡∏õ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î')} ({results.allZoneResults?.length || 0} {t('‡πÇ‡∏ã‡∏ô')})
                    </h3>
                    <div className="grid grid-cols-2 gap-4 text-sm text-gray-300 md:grid-cols-4">
                        <div>
                            <p className="text-blue-200">{t('‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î:')}</p>
                            <p className="font-bold text-white">
                                {getOperationModeLabel(results.projectSummary.operationMode)}
                            </p>
                        </div>
                        <div>
                            <p className="text-blue-200">{t('‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÑ‡∏´‡∏•‡∏£‡∏ß‡∏°:')}</p>
                            <p className="font-bold text-white">
                                {results.projectSummary.totalFlowLPM.toFixed(1)} LPM
                            </p>
                        </div>
                        <div>
                            <p className="text-blue-200">{t('Head ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î:')}</p>
                            <p className="font-bold text-white">
                                {results.projectSummary.maxHeadM.toFixed(1)} ‡πÄ‡∏°‡∏ï‡∏£
                            </p>
                        </div>
                        <div>
                            <p className="text-blue-200">{t('‡πÇ‡∏ã‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ Head ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î:')}</p>
                            <p className="font-bold text-white">
                                {getZoneName(results.projectSummary.criticalZone)}
                            </p>
                        </div>
                    </div>

                    <div className="mt-3 rounded bg-blue-800 p-2">
                        <h4 className="text-sm font-medium text-blue-300">üíß {t('‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏õ‡∏±‡πä‡∏°:')}</h4>
                        <div className="grid grid-cols-2 gap-2 text-xs text-blue-200">
                            <p>
                                {t('Flow ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£:')} {' '} {results.projectSummary.selectedGroupFlowLPM.toFixed(1)} {t('LPM')}
                            </p>
                            <p>
                                {t('Head ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£:')} {' '}
                                {results.projectSummary.selectedGroupHeadM.toFixed(1)} {t('‡πÄ‡∏°‡∏ï‡∏£')}
                            </p>
                        </div>
                        {results.projectSummary.criticalGroup && (
                            <p className="mt-1 text-xs text-blue-300">
                                {t('‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°:')} {results.projectSummary.criticalGroup.label}
                            </p>
                        )}
                    </div>
                </div>
            )}

            {/* ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏ã‡∏ô‡∏¢‡πà‡∏≠‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡πÇ‡∏ã‡∏ô */}
            {isMultiZone && results.allZoneResults && results.allZoneResults.length > 0 && (
                <div className="rounded-lg bg-gray-800 p-4">
                    <h3 className="mb-3 text-lg font-bold text-gray-300">üîç {t('‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÇ‡∏ã‡∏ô')}</h3>
                    <div className="grid grid-cols-1 gap-3 md:grid-cols-2">
                        {results.allZoneResults.map((zoneResult, index) => (
                            <div key={zoneResult.zoneId} className="rounded bg-gray-700 p-3">
                                <div className="mb-2 flex items-center justify-between">
                                    <h4 className="font-medium text-white">
                                        {getZoneName(zoneResult.zoneId)}
                                        {zoneResult.zoneId === activeZone?.id && (
                                            <span className="ml-2 text-xs text-green-400">
                                                ({t('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏π')})
                                            </span>
                                        )}
                                    </h4>
                                    <div className="text-xs text-gray-400">
                                        {zoneResult.sprinklerCount}{' '}
                                        {projectMode === 'garden' ? t('‡∏´‡∏±‡∏ß') : t('‡∏ï‡πâ‡∏ô')}
                                    </div>
                                </div>
                                <div className="grid grid-cols-2 gap-2 text-xs text-gray-300">
                                    <div>
                                        <p>{t('Flow:')} {zoneResult.totalFlowLPM.toFixed(1)} {t('LPM')}</p>
                                        <p>{t('Static Head:')} {zoneResult.staticHead.toFixed(1)} {t('‡∏°.')}</p>
                                    </div>
                                    <div>
                                        <p>{t('Head Loss:')} {zoneResult.headLoss.total.toFixed(1)} {t('‡∏°.')}</p>
                                        <p>
                                            {t('Total Head:')} {' '}
                                            <span className="font-bold text-yellow-300">
                                                {zoneResult.totalHead.toFixed(1)} {t('‡∏°.')}
                                            </span>
                                        </p>
                                    </div>
                                </div>
                                {zoneResult.zoneId === results.projectSummary?.criticalZone && (
                                    <div className="mt-1 text-xs text-red-300">
                                        ‚≠ê {t('‡πÇ‡∏ã‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ Head ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î')}
                                    </div>
                                )}
                            </div>
                        ))}
                    </div>
                </div>
            )}

            {/* ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏ã‡∏ô */}
            {zoneOperationGroups && zoneOperationGroups.length > 0 && (
                <div className="rounded bg-purple-900 p-3">
                    <h4 className="mb-2 text-sm font-medium text-purple-300">üîÑ {t('‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏ã‡∏ô:')}</h4>
                    <div className="space-y-1 text-xs text-purple-200">
                        {zoneOperationGroups.map((group, index) => (
                            <p key={group.id}>
                                ‚Ä¢ {t('‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà')} {group.order}:{' '}
                                {group.zones.map((zoneId) => getZoneName(zoneId)).join(', ')}
                                {group.zones.length > 1 && ` (${t('‡πÄ‡∏õ‡∏¥‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô')})`}
                            </p>
                        ))}
                    </div>
                </div>
            )}

            <div className="rounded-lg bg-gradient-to-r from-gray-800 to-gray-700 p-4">
                <h3 className="mb-3 text-lg font-bold text-white">
                    üìä {t('‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏£‡∏∞‡∏ö‡∏ö')}
                    <span className={`ml-2 ${getStatusColor(systemPerformance.overallStatus)}`}>
                        {getStatusIcon(systemPerformance.overallStatus)}
                    </span>
                    {isMultiZone && activeZone && (
                        <span className="ml-2 text-sm font-normal">({t('‡πÇ‡∏ã‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:')} {activeZone.name})</span>
                    )}
                </h3>
                <div className="grid grid-cols-2 gap-4 md:grid-cols-4">
                    <div className="text-center">
                        <div
                            className={`text-xl font-bold ${getStatusColor(systemPerformance.velocityStatus)}`}
                        >
                            {getStatusIcon(systemPerformance.velocityStatus)}
                        </div>
                        <p className="text-sm text-gray-300">{t('‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏ô‡πâ‡∏≥')}</p>
                        <p className="text-xs text-gray-400">0.3-2.5 {t('m/s')}</p>
                    </div>
                    <div className="text-center">
                        <div
                            className={`text-xl font-bold ${getStatusColor(systemPerformance.headLossStatus)}`}
                        >
                            {getStatusIcon(systemPerformance.headLossStatus)}
                        </div>
                        <p className="text-sm text-gray-300">{t('Head Loss')}</p>
                        <p className="text-xs text-gray-400">
                            {results.headLoss.total.toFixed(1)} {t('m')}
                        </p>
                    </div>
                    {showPump && (
                        <div className="text-center">
                            <div
                                className={`text-xl font-bold ${getStatusColor(systemPerformance.pumpStatus)}`}
                            >
                                {getStatusIcon(systemPerformance.pumpStatus)}
                            </div>
                            <p className="text-sm text-gray-300">{t('‡∏õ‡∏±‡πä‡∏°‡∏ô‡πâ‡∏≥')}</p>
                            <p className="text-xs text-gray-400">
                                {actualPump?.powerHP || t('N/A')} {t('HP')}
                            </p>
                        </div>
                    )}
                    <div className="text-center">
                        <div className="text-xl font-bold text-blue-400">üí∞</div>
                        <p className="text-sm text-gray-300">{t('‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£')}</p>
                        <p className="text-xs text-gray-400">{t('‡∏ï‡∏≤‡∏°‡πÇ‡∏ã‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô')}</p>
                    </div>
                </div>
            </div>

            {/* ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÇ‡∏ã‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô */}
            <div className="rounded-lg bg-gray-700 p-6">
                <h2 className="mb-4 text-xl font-semibold text-yellow-400">
                    üìä {t('‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î')}
                    {activeZone && (
                        <span className="ml-2 text-sm font-normal text-gray-400">
                            - {activeZone.name}
                        </span>
                    )}
                    {isMultiZone && (
                        <span className="ml-2 text-sm font-normal text-green-400">
                            ({t('‡πÇ‡∏ã‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤')})
                        </span>
                    )}
                </h2>

                <div className="grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-4">
                    <div className="rounded bg-gray-600 p-4">
                        <h3 className="mb-2 font-medium text-blue-300">üíß {t('‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡πâ‡∏≥‡∏£‡∏ß‡∏°')}</h3>
                        <p className="text-lg font-bold">
                            {results.totalWaterRequiredLPM.toFixed(1)} {t('‡∏•‡∏¥‡∏ï‡∏£/‡∏ô‡∏≤‡∏ó‡∏µ')}
                        </p>
                        <p className="text-sm text-gray-300">
                            + {t('Safety Factor')} {(results.safetyFactor * 100 - 100).toFixed(0)}%
                        </p>
                        <p className="text-sm font-bold text-green-300">
                            {results.adjustedFlow.toFixed(1)} {t('‡∏•‡∏¥‡∏ï‡∏£/‡∏ô‡∏≤‡∏ó‡∏µ')}
                        </p>
                        {activeZone && (
                            <p className="mt-1 text-xs text-blue-200">
                                {t('‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏ã‡∏ô')} {activeZone.name}
                            </p>
                        )}
                    </div>

                    <div className="rounded bg-gray-600 p-4">
                        <h3 className="mb-2 font-medium text-purple-300">
                            üö∞ {t('‡∏ô‡πâ‡∏≥‡∏ï‡πà‡∏≠‡∏´‡∏±‡∏ß')}{projectMode === 'garden' ? t('‡∏â‡∏µ‡∏î') : t('‡∏™‡∏õ‡∏£‡∏¥‡∏á‡πÄ‡∏Å‡∏≠‡∏£‡πå')}
                        </h3>
                        <p className="text-lg font-bold">
                            {results.waterPerSprinklerLPM.toFixed(1)} {t('‡∏•‡∏¥‡∏ï‡∏£/‡∏ô‡∏≤‡∏ó‡∏µ')}
                        </p>
                        <p className="text-sm text-gray-300">
                            ({results.waterPerSprinklerLPM.toFixed(3)} {t('‡∏•‡∏¥‡∏ï‡∏£/‡∏ô‡∏≤‡∏ó‡∏µ')})
                        </p>
                        {selectedSprinkler && (
                            <p className="mt-1 text-xs text-purple-200">{selectedSprinkler.name}</p>
                        )}
                        <p className="mt-1 text-xs text-gray-400">
                            {t('‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö')} {input.irrigationTimeMinutes} {t('‡∏ô‡∏≤‡∏ó‡∏µ/‡∏Ñ‡∏£‡∏±‡πâ‡∏á')}
                        </p>
                    </div>

                    <div className="rounded bg-gray-600 p-4">
                        <h3 className="mb-2 font-medium text-green-300">
                            üî¢ {t('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô')}{projectMode === 'garden' ? t('‡∏´‡∏±‡∏ß‡∏â‡∏µ‡∏î') : t('‡∏™‡∏õ‡∏£‡∏¥‡∏á‡πÄ‡∏Å‡∏≠‡∏£‡πå')}
                        </h3>
                        <p className="text-lg font-bold">{results.totalSprinklers} {projectMode === 'garden' ? t('‡∏´‡∏±‡∏ß') : t('‡∏ï‡πâ‡∏ô')}</p>
                        <p className="text-sm text-gray-300">
                            {results.sprinklersPerZone.toFixed(1)} {projectMode === 'garden' ? t('‡∏´‡∏±‡∏ß') : t('‡∏ï‡πâ‡∏ô')}/{t('‡πÇ‡∏ã‡∏ô')}
                        </p>
                        {activeZone && (
                            <p className="mt-1 text-xs text-green-200">{t('‡πÉ‡∏ô‡πÇ‡∏ã‡∏ô')} {activeZone.name}</p>
                        )}
                        <p className="mt-1 text-xs text-gray-400">
                            {t('‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô:')} {input.sprinklersPerTree} {projectMode === 'garden' ? t('‡∏´‡∏±‡∏ß') : t('‡∏ï‡πâ‡∏ô')}/{projectMode === 'garden' ? t('‡∏à‡∏∏‡∏î') : t('‡∏ï‡πâ‡∏ô')}
                        </p>
                    </div>

                    <div className="rounded bg-gray-600 p-4">
                        <h3 className="mb-2 font-medium text-yellow-300">‚ö° {t('‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÑ‡∏´‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ó‡πà‡∏≠')}</h3>
                        <div className="text-sm">
                            <p>
                                {t('‡∏ó‡πà‡∏≠‡∏¢‡πà‡∏≠‡∏¢:')} {' '}
                                <span className="font-bold text-purple-300">
                                    {results.flows.branch.toFixed(1)} {t('LPM')}
                                </span>
                            </p>
                            {results.hasValidSecondaryPipe && (
                                <p>
                                    {t('‡∏ó‡πà‡∏≠‡∏£‡∏≠‡∏á:')} {' '}
                                    <span className="font-bold text-orange-300">
                                        {results.flows.secondary.toFixed(1)} {t('LPM')}
                                    </span>
                                </p>
                            )}
                            {results.hasValidMainPipe && (
                                <p>
                                    {t('‡∏ó‡πà‡∏≠‡∏´‡∏•‡∏±‡∏Å:')} {' '}
                                    <span className="font-bold text-cyan-300">
                                        {results.flows.main.toFixed(1)} {t('LPM')}
                                    </span>
                                </p>
                            )}
                        </div>
                        <p className="mt-1 text-xs text-gray-400">{t('‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏£‡∏∞‡∏ö‡∏ö')}</p>
                    </div>

                    <div className="rounded bg-gray-600 p-4">
                        <h3 className="mb-2 font-medium text-red-300">üìâ {t('Head Loss ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î')}</h3>
                        <div className="text-sm">
                            <p>
                                {t('Major Loss:')} {' '}
                                <span className="font-bold text-red-400">
                                    {results.headLoss.totalMajor.toFixed(2)} m
                                </span>
                            </p>
                            <p>
                                {t('Minor Loss:')} {' '}
                                <span className="font-bold text-orange-400">
                                    {results.headLoss.totalMinor.toFixed(2)} m
                                </span>
                            </p>
                            <p>
                                {t('‡∏£‡∏ß‡∏°:')} {' '}
                                <span
                                    className={`font-bold ${getStatusColor(systemPerformance.headLossStatus)}`}
                                >
                                    {results.headLoss.total.toFixed(1)} m
                                </span>
                            </p>
                        </div>
                        <div className="mt-2 text-xs text-gray-300">
                            <p>{t('‡∏¢‡πà‡∏≠‡∏¢:')} {results.headLoss.branch.total.toFixed(1)}m</p>
                            {results.hasValidSecondaryPipe && (
                                <p>{t('‡∏£‡∏≠‡∏á:')} {results.headLoss.secondary.total.toFixed(1)}m</p>
                            )}
                            {results.hasValidMainPipe && (
                                <p>{t('‡∏´‡∏•‡∏±‡∏Å:')} {results.headLoss.main.total.toFixed(1)}m</p>
                            )}
                        </div>
                    </div>

                    <div className="rounded bg-gray-600 p-4">
                        <h3 className="mb-2 font-medium text-cyan-300">üåä {t('‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏ô‡πâ‡∏≥')} ({t('m/s')})</h3>
                        <div className="text-sm">
                            <p>
                                {t('‡∏¢‡πà‡∏≠‡∏¢:')} {' '}
                                <span
                                    className={`font-bold ${
                                        results.velocity.branch > 2.5
                                            ? 'text-red-400'
                                            : results.velocity.branch < 0.3
                                              ? 'text-blue-400'
                                              : 'text-green-400'
                                    }`}
                                >
                                    {results.velocity.branch.toFixed(2)}
                                </span>
                            </p>
                            {results.hasValidSecondaryPipe && (
                                <p>
                                    {t('‡∏£‡∏≠‡∏á:')} {' '}
                                    <span
                                        className={`font-bold ${
                                            results.velocity.secondary > 2.5
                                                ? 'text-red-400'
                                                : results.velocity.secondary < 0.3
                                                  ? 'text-blue-400'
                                                  : 'text-green-400'
                                        }`}
                                    >
                                        {results.velocity.secondary.toFixed(2)}
                                    </span>
                                </p>
                            )}
                            {results.hasValidMainPipe && (
                                <p>
                                    {t('‡∏´‡∏•‡∏±‡∏Å:')} {' '}
                                    <span
                                        className={`font-bold ${
                                            results.velocity.main > 2.5
                                                ? 'text-red-400'
                                                : results.velocity.main < 0.3
                                                  ? 'text-blue-400'
                                                  : 'text-green-400'
                                        }`}
                                    >
                                        {results.velocity.main.toFixed(2)}
                                    </span>
                                </p>
                            )}
                        </div>
                        <p className="mt-1 text-xs text-gray-400">{t('‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:')} 0.8-2.0 {t('m/s')}</p>
                        <p className="mt-1 text-xs text-cyan-200">
                            {t('‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:')} {getStatusIcon(systemPerformance.velocityStatus)}
                            {systemPerformance.velocityStatus === 'good'
                                ? t('‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°')
                                : systemPerformance.velocityStatus === 'warning'
                                  ? t('‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏±‡∏ö')
                                  : t('‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö')}
                        </p>
                    </div>

                    {showPump && (
                        <div className="rounded bg-gray-600 p-4">
                            <h3 className="mb-2 font-medium text-orange-300">
                                ‚ö° {t('Pump Head ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£')}
                            </h3>
                            <p
                                className={`text-lg font-bold ${getStatusColor(systemPerformance.pumpStatus)}`}
                            >
                                {results.pumpHeadRequired.toFixed(1)} {t('‡πÄ‡∏°‡∏ï‡∏£')}
                            </p>
                            <div className="text-xs text-gray-300">
                                <p>{t('Static:')} {input.staticHeadM.toFixed(1)}m</p>
                                <p>{t('Head Loss:')} {results.headLoss.total.toFixed(1)}m</p>
                                <p className="text-yellow-300">
                                    {t('Pressure:')} {pressureInfo.pressure.toFixed(1)}m
                                </p>
                                <p>
                                    {t('Safety:')} {' '}
                                    {(
                                        (results.pumpHeadRequired /
                                            Math.max(
                                                input.staticHeadM +
                                                    results.headLoss.total +
                                                    pressureInfo.pressure,
                                                1
                                            ) -
                                            1) *
                                        100
                                    ).toFixed(0)}
                                    %
                                </p>
                            </div>
                            {isMultiZone && results.projectSummary && (
                                <p className="mt-2 text-xs text-orange-200">
                                    {t('‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≤‡∏°')} {' '}
                                    {getOperationModeLabel(results.projectSummary.operationMode)}
                                </p>
                            )}
                        </div>
                    )}

                    <div className="rounded bg-gray-600 p-4">
                        <h3 className="mb-2 font-medium text-pink-300">ü§ñ {t('‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå')}</h3>
                        <div className="text-sm">
                            <p>
                                {t('‡∏ó‡πà‡∏≠‡∏¢‡πà‡∏≠‡∏¢:')} {' '}
                                <span className="font-bold text-white">
                                    {actualBranchPipe ? `${actualBranchPipe.score}/100` : 'N/A'}
                                </span>
                                {actualBranchPipe?.isRecommended && (
                                    <span className="ml-1 text-green-400">‚≠ê</span>
                                )}
                            </p>
                            {results.hasValidSecondaryPipe && actualSecondaryPipe && (
                                <p>
                                    {t('‡∏ó‡πà‡∏≠‡∏£‡∏≠‡∏á:')} {' '}
                                    <span className="font-bold text-white">
                                        {actualSecondaryPipe.score}/100
                                    </span>
                                    {actualSecondaryPipe.isRecommended && (
                                        <span className="ml-1 text-green-400">‚≠ê</span>
                                    )}
                                </p>
                            )}
                            {results.hasValidMainPipe && actualMainPipe && (
                                <p>
                                    {t('‡∏ó‡πà‡∏≠‡∏´‡∏•‡∏±‡∏Å:')} {' '}
                                    <span className="font-bold text-white">
                                        {actualMainPipe.score}/100
                                    </span>
                                    {actualMainPipe.isRecommended && (
                                        <span className="ml-1 text-green-400">‚≠ê</span>
                                    )}
                                </p>
                            )}
                            {showPump && (
                                <p>
                                    {t('‡∏õ‡∏±‡πä‡∏°:')} {' '}
                                    <span className="font-bold text-white">
                                        {actualPump ? `${actualPump.score}/100` : 'N/A'}
                                    </span>
                                    {actualPump?.isRecommended && (
                                        <span className="ml-1 text-green-400">‚≠ê</span>
                                    )}
                                </p>
                            )}
                        </div>
                        <p className="mt-1 text-xs text-gray-400">{t('‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô 70+ = ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥')}</p>
                    </div>
                </div>



                
            </div>
        </div>
    );
};

export default CalculationSummary;
