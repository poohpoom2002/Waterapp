// components/PipeSelector.tsx
import React from 'react';
import { PipeData } from '../product/Pipe';
import { CalculationResults, PipeType, IrrigationInput, AnalyzedPipe } from '../types/interfaces';

interface PipeSelectorProps {
    pipeType: PipeType;
    selectedPipe: any;
    onPipeChange: (pipe: any) => void;
    results: CalculationResults;
    input: IrrigationInput;
}

const PipeSelector: React.FC<PipeSelectorProps> = ({
    pipeType,
    selectedPipe,
    onPipeChange,
    results,
    input,
}) => {
    const getPipeConfig = () => {
        switch (pipeType) {
            case 'branch':
                return {
                    title: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡πà‡∏≠‡∏¢‡πà‡∏≠‡∏¢',
                    titleColor: 'text-purple-400',
                    description: `‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏¢‡∏Å‡πÑ‡∏õ‡∏™‡∏õ‡∏£‡∏¥‡∏á‡πÄ‡∏Å‡∏≠‡∏£‡πå (${input.sprinklersPerBranch} ‡∏´‡∏±‡∏ß/‡∏ó‡πà‡∏≠)`,
                    allowedTypes: ['LDPE', 'Flexible PE', 'PE-RT'],
                    analyzedPipes: results.analyzedBranchPipes || [],
                    rolls: results.branchPipeRolls,
                    flow: results.flows.branch,
                    velocity: results.velocity.branch,
                };
            case 'secondary':
                return {
                    title: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡πà‡∏≠‡πÄ‡∏°‡∏ô‡∏£‡∏≠‡∏á',
                    titleColor: 'text-orange-400',
                    description: `‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏ô‡πâ‡∏≥‡∏à‡∏≤‡∏Å ${input.branchesPerSecondary} ‡∏ó‡πà‡∏≠‡∏¢‡πà‡∏≠‡∏¢`,
                    allowedTypes: ['HDPE PE 80', 'HDPE PE 100', 'PVC'],
                    analyzedPipes: results.analyzedSecondaryPipes || [],
                    rolls: results.secondaryPipeRolls,
                    flow: results.flows.secondary,
                    velocity: results.velocity.secondary,
                };
            case 'main':
                return {
                    title: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡πà‡∏≠‡πÄ‡∏°‡∏ô‡∏´‡∏•‡∏±‡∏Å',
                    titleColor: 'text-cyan-400',
                    description: `‡∏ó‡πà‡∏≠‡∏´‡∏•‡∏±‡∏Å‡∏à‡∏≤‡∏Å‡∏õ‡∏±‡πä‡∏° (${input.simultaneousZones} ‡πÇ‡∏ã‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô)`,
                    allowedTypes: ['HDPE PE 100', 'HDPE PE 80'],
                    analyzedPipes: results.analyzedMainPipes || [],
                    rolls: results.mainPipeRolls,
                    flow: results.flows.main,
                    velocity: results.velocity.main,
                };
        }
    };

    const config = getPipeConfig();
    
    // ‡∏Å‡∏£‡∏≠‡∏á‡∏ó‡πà‡∏≠‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï
    const filteredPipes = PipeData.filter((pipe) => config.allowedTypes.includes(pipe.pipeType));
    
    // ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡πà‡∏≠
    const pipesWithAnalysis = filteredPipes.map(pipe => {
        const analyzed = config.analyzedPipes.find(ap => ap.id === pipe.id);
        return {
            ...pipe,
            score: analyzed?.score || 0,
            velocity: analyzed?.velocity || 0,
            headLoss: analyzed?.headLoss || 0,
            isRecommended: analyzed?.isRecommended || false,
            isGoodChoice: analyzed?.isGoodChoice || false,
            isUsable: analyzed?.isUsable || false
        };
    });

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö: ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ > ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡∏µ > ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ > ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
    const sortedPipes = pipesWithAnalysis.sort((a, b) => {
        if (a.isRecommended !== b.isRecommended) {
            return b.isRecommended ? 1 : -1;
        }
        if (a.isGoodChoice !== b.isGoodChoice) {
            return b.isGoodChoice ? 1 : -1;
        }
        if (a.isUsable !== b.isUsable) {
            return b.isUsable ? 1 : -1;
        }
        return a.price - b.price; // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤
    });

    const getRecommendationIcon = (pipe: any) => {
        if (pipe.isRecommended) return 'üåü ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥';
        if (pipe.isGoodChoice) return '‚úÖ ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡∏µ';
        if (pipe.isUsable) return '‚ö° ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ';
        return '‚ö†Ô∏è ‡∏Ñ‡∏ß‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤';
    };

    const getRecommendationColor = (pipe: any) => {
        if (pipe.isRecommended) return 'text-green-300';
        if (pipe.isGoodChoice) return 'text-blue-300';
        if (pipe.isUsable) return 'text-yellow-300';
        return 'text-red-300';
    };

    const getLongestPipe = () => {
        switch (pipeType) {
            case 'branch':
                return input.longestBranchPipeM;
            case 'secondary':
                return input.longestSecondaryPipeM;
            case 'main':
                return input.longestMainPipeM;
        }
    };

    return (
        <div className="rounded-lg bg-gray-700 p-6">
            <h3 className={`mb-4 text-lg font-semibold ${config.titleColor}`}>{config.title}</h3>
            <p className="mb-3 text-sm text-gray-300">{config.description}</p>
            
            {/* ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏î‡πà‡∏ß‡∏ô */}
            <div className="mb-4 rounded bg-gray-600 p-3">
                <h4 className="mb-2 text-sm font-medium text-green-300">üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:</h4>
                <div className="text-xs text-gray-300">
                    <p>üåü = ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏°‡∏≤‡∏Å (‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô 60+)</p>
                    <p>‚úÖ = ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡∏µ (‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô 40-59)</p>
                    <p>‚ö° = ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ (‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô 20-39)</p>
                    <p>‚ö†Ô∏è = ‡∏Ñ‡∏ß‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤ (‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô &lt;20)</p>
                </div>
            </div>

            <select
                value={selectedPipe?.id || ''}
                onChange={(e) => {
                    const selected = PipeData.find((p) => p.id === parseInt(e.target.value));
                    onPipeChange(selected);
                }}
                className="mb-4 w-full rounded border border-gray-500 bg-gray-600 p-2 text-white focus:border-blue-400"
            >
                <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡πà‡∏≠ --</option>
                {sortedPipes.map((pipe) => (
                    <option key={pipe.id} value={pipe.id}>
                        {pipe.productCode} ({pipe.sizeMM}mm, {pipe.lengthM}m) - {pipe.price} ‡∏ö‡∏≤‡∏ó | {getRecommendationIcon(pipe)}
                    </option>
                ))}
            </select>

            {selectedPipe && (
                <div className="rounded bg-gray-600 p-3">
                    <div className="mb-3 flex items-center justify-between">
                        <h4 className="font-medium text-white">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡πà‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å</h4>
                        <span className={`text-sm font-bold ${getRecommendationColor(
                            pipesWithAnalysis.find(p => p.id === selectedPipe.id)
                        )}`}>
                            {getRecommendationIcon(pipesWithAnalysis.find(p => p.id === selectedPipe.id) || {})}
                        </span>
                    </div>
                    
                    <div className="grid grid-cols-2 gap-3 text-sm">
                        <div>
                            <p><strong>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:</strong> {selectedPipe.pipeType}</p>
                            <p><strong>‡∏Ç‡∏ô‡∏≤‡∏î:</strong> {selectedPipe.sizeMM} ‡∏°‡∏°.</p>
                            <p><strong>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏ï‡πà‡∏≠‡∏°‡πâ‡∏ß‡∏ô:</strong> {selectedPipe.lengthM} ‡πÄ‡∏°‡∏ï‡∏£</p>
                            <p><strong>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô:</strong> PN{selectedPipe.pn}</p>
                        </div>
                        <div>
                            <p><strong>‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÑ‡∏´‡∏•:</strong> {config.flow.toFixed(1)} LPM</p>
                            <p>
                                <strong>‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß:</strong>{' '}
                                <span
                                    className={`${
                                        config.velocity > 2.5
                                            ? 'text-red-400'
                                            : config.velocity < 0.3
                                            ? 'text-blue-400'
                                            : 'text-green-400'
                                    }`}
                                >
                                    {config.velocity.toFixed(2)} m/s
                                </span>
                            </p>
                            <p><strong>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏°‡πâ‡∏ß‡∏ô:</strong> <span className="text-yellow-300">{config.rolls}</span> ‡∏°‡πâ‡∏ß‡∏ô</p>
                            <p>
                                <strong>‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°:</strong>{' '}
                                <span className="text-green-300">
                                    {(selectedPipe.price * config.rolls).toLocaleString()}
                                </span>{' '}
                                ‡∏ö‡∏≤‡∏ó
                            </p>
                        </div>
                    </div>

                    {/* ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå */}
                    {(() => {
                        const analysis = pipesWithAnalysis.find(p => p.id === selectedPipe.id);
                        if (analysis && analysis.score > 0) {
                            return (
                                <div className="mt-3 rounded bg-gray-500 p-2">
                                    <h5 className="text-xs font-medium text-yellow-300">‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå:</h5>
                                    <div className="grid grid-cols-2 gap-2 text-xs">
                                        <p>‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°: <span className="font-bold">{analysis.score}</span>/100</p>
                                        <p>Head Loss: <span className="font-bold">{analysis.headLoss.toFixed(2)}</span> m</p>
                                    </div>
                                </div>
                            );
                        }
                        return null;
                    })()}

                    {/* ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏ó‡πà‡∏≠ */}
                    {pipeType === 'main' && selectedPipe.lengthM < getLongestPipe() && (
                        <div className="mt-3 rounded bg-red-900 p-2">
                            <p className="text-sm text-red-300">
                                ‚ö†Ô∏è <strong>‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô:</strong> ‡∏ó‡πà‡∏≠‡∏°‡πâ‡∏ß‡∏ô‡∏•‡∏∞ {selectedPipe.lengthM}m ‡∏™‡∏±‡πâ‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏µ‡πà‡∏¢‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î{' '}
                                {getLongestPipe()}m ‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡πà‡∏≠‡∏ó‡πà‡∏≠
                            </p>
                        </div>
                    )}

                    {/* ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á */}
                    {(() => {
                        const analysis = pipesWithAnalysis.find(p => p.id === selectedPipe.id);
                        if (analysis && !analysis.isRecommended) {
                            const betterPipes = pipesWithAnalysis.filter(p => p.isRecommended).slice(0, 2);
                            if (betterPipes.length > 0) {
                                return (
                                    <div className="mt-3 rounded bg-blue-900 p-2">
                                        <p className="text-sm text-blue-300">
                                            üí° <strong>‡∏ó‡πà‡∏≠‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:</strong>{' '}
                                            {betterPipes.map(p => `${p.productCode} (${p.sizeMM}mm)`).join(', ')}
                                        </p>
                                    </div>
                                );
                            }
                        }
                        return null;
                    })()}
                </div>
            )}
        </div>
    );
};

export default PipeSelector;