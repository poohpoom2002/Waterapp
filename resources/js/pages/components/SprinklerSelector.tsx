// components/SprinklerSelector.tsx
import React from 'react';
import { SprinklerData } from '../product/Sprinkler';
import { CalculationResults } from '../types/interfaces';
import { formatWaterFlow, formatRadius } from '../utils/calculations';

interface SprinklerSelectorProps {
    selectedSprinkler: any;
    onSprinklerChange: (sprinkler: any) => void;
    results: CalculationResults;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏õ‡∏£‡∏¥‡∏á‡πÄ‡∏Å‡∏≠‡∏£‡πå
const analyzeSprinkler = (sprinkler: any, targetFlow: number) => {
    const minFlow = Array.isArray(sprinkler.waterVolumeLitersPerHour)
        ? sprinkler.waterVolumeLitersPerHour[0]
        : parseFloat(String(sprinkler.waterVolumeLitersPerHour).split('-')[0]);
    const maxFlow = Array.isArray(sprinkler.waterVolumeLitersPerHour)
        ? sprinkler.waterVolumeLitersPerHour[1]
        : parseFloat(String(sprinkler.waterVolumeLitersPerHour).split('-')[1]);

    let score = 0;

    // ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Ç‡∏≠‡∏á‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÑ‡∏´‡∏• (50%)
    if (targetFlow >= minFlow && targetFlow <= maxFlow) {
        // ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
        const flowRange = maxFlow - minFlow;
        const positionInRange = (targetFlow - minFlow) / flowRange;
        
        // ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏ä‡πà‡∏ß‡∏á
        if (positionInRange >= 0.3 && positionInRange <= 0.7) {
            score += 50;
        } else {
            score += 40;
        }
    } else if (targetFlow >= minFlow * 0.8 && targetFlow <= maxFlow * 1.2) {
        // ‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
        score += 30;
    } else if (targetFlow >= minFlow * 0.6 && targetFlow <= maxFlow * 1.5) {
        // ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏°‡∏≤‡∏Å
        score += 15;
    } else {
        // ‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
        score += 5;
    }

    // ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û (25%)
    const avgFlow = (minFlow + maxFlow) / 2;
    const pricePerFlow = sprinkler.price / avgFlow;
    
    if (pricePerFlow < 1) {
        score += 25;
    } else if (pricePerFlow < 2) {
        score += 20;
    } else if (pricePerFlow < 5) {
        score += 15;
    } else if (pricePerFlow < 10) {
        score += 10;
    } else {
        score += 5;
    }

    // ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏±‡∏®‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢ (15%)
    const minRadius = Array.isArray(sprinkler.radiusMeters)
        ? sprinkler.radiusMeters[0]
        : parseFloat(String(sprinkler.radiusMeters).split('-')[0]);
    const maxRadius = Array.isArray(sprinkler.radiusMeters)
        ? sprinkler.radiusMeters[1]
        : parseFloat(String(sprinkler.radiusMeters).split('-')[1]);

    const avgRadius = (minRadius + maxRadius) / 2;
    
    if (avgRadius >= 8) {
        score += 15; // ‡∏£‡∏±‡∏®‡∏°‡∏µ‡πÉ‡∏´‡∏ç‡πà ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Å
    } else if (avgRadius >= 5) {
        score += 12; // ‡∏£‡∏±‡∏®‡∏°‡∏µ‡∏Å‡∏•‡∏≤‡∏á
    } else if (avgRadius >= 3) {
        score += 8; // ‡∏£‡∏±‡∏®‡∏°‡∏µ‡πÄ‡∏•‡πá‡∏Å ‡πÅ‡∏ï‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ
    } else {
        score += 5; // ‡∏£‡∏±‡∏®‡∏°‡∏µ‡πÄ‡∏•‡πá‡∏Å‡∏°‡∏≤‡∏Å
    }

    // ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡πÅ‡∏£‡∏á‡∏î‡∏±‡∏ô (10%)
    const minPressure = Array.isArray(sprinkler.pressureBar)
        ? sprinkler.pressureBar[0]
        : parseFloat(String(sprinkler.pressureBar).split('-')[0]);
    const maxPressure = Array.isArray(sprinkler.pressureBar)
        ? sprinkler.pressureBar[1]
        : parseFloat(String(sprinkler.pressureBar).split('-')[1]);

    const pressureRange = maxPressure - minPressure;
    
    if (pressureRange >= 3) {
        score += 10; // ‡∏ä‡πà‡∏ß‡∏á‡πÅ‡∏£‡∏á‡∏î‡∏±‡∏ô‡∏Å‡∏ß‡πâ‡∏≤‡∏á ‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢
    } else if (pressureRange >= 2) {
        score += 8;
    } else if (pressureRange >= 1) {
        score += 6;
    } else {
        score += 4;
    }

    return {
        ...sprinkler,
        score,
        flowMatch: targetFlow >= minFlow && targetFlow <= maxFlow,
        flowCloseMatch: targetFlow >= minFlow * 0.8 && targetFlow <= maxFlow * 1.2,
        isRecommended: score >= 60,
        isGoodChoice: score >= 40,
        isUsable: score >= 20,
        targetFlow,
        minFlow,
        maxFlow,
        avgRadius: (minRadius + maxRadius) / 2,
        pricePerFlow
    };
};

const SprinklerSelector: React.FC<SprinklerSelectorProps> = ({
    selectedSprinkler,
    onSprinklerChange,
    results,
}) => {
    // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏õ‡∏£‡∏¥‡∏á‡πÄ‡∏Å‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const analyzedSprinklers = SprinklerData.map(sprinkler => 
        analyzeSprinkler(sprinkler, results.waterPerSprinklerLPH)
    );

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
    const sortedSprinklers = analyzedSprinklers.sort((a, b) => {
        if (a.isRecommended !== b.isRecommended) {
            return b.isRecommended ? 1 : -1;
        }
        if (a.isGoodChoice !== b.isGoodChoice) {
            return b.isGoodChoice ? 1 : -1;
        }
        if (a.isUsable !== b.isUsable) {
            return b.isUsable ? 1 : -1;
        }
        return b.score - a.score;
    });

    const getRecommendationIcon = (sprinkler: any) => {
        if (sprinkler.isRecommended) return 'üåü ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥';
        if (sprinkler.isGoodChoice) return '‚úÖ ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡∏µ';
        if (sprinkler.isUsable) return '‚ö° ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ';
        return '‚ö†Ô∏è ‡∏Ñ‡∏ß‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤';
    };

    const getRecommendationColor = (sprinkler: any) => {
        if (sprinkler.isRecommended) return 'text-green-300';
        if (sprinkler.isGoodChoice) return 'text-blue-300';
        if (sprinkler.isUsable) return 'text-yellow-300';
        return 'text-red-300';
    };

    const selectedAnalyzed = selectedSprinkler 
        ? analyzedSprinklers.find(s => s.id === selectedSprinkler.id)
        : null;

    return (
        <div className="rounded-lg bg-gray-700 p-6">
            <h3 className="mb-4 text-lg font-semibold text-green-400">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏õ‡∏£‡∏¥‡∏á‡πÄ‡∏Å‡∏≠‡∏£‡πå</h3>
            
            {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ */}
            <div className="mb-4 rounded bg-gray-600 p-3">
                <h4 className="mb-2 text-sm font-medium text-green-300">üíß ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£:</h4>
                <div className="text-xs text-gray-300">
                    <p>‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÑ‡∏´‡∏•‡∏ï‡πà‡∏≠‡∏´‡∏±‡∏ß: <span className="font-bold text-blue-300">{results.waterPerSprinklerLPH.toFixed(1)} ‡∏•‡∏¥‡∏ï‡∏£/‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á</span></p>
                    <p>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ: <span className="font-bold text-yellow-300">{results.totalSprinklers} ‡∏´‡∏±‡∏ß</span></p>
                </div>
            </div>

            {/* ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏î‡πà‡∏ß‡∏ô */}
            <div className="mb-4 rounded bg-gray-600 p-3">
                <h4 className="mb-2 text-sm font-medium text-green-300">üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:</h4>
                <div className="text-xs text-gray-300">
                    <p>üåü = ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏°‡∏≤‡∏Å (‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô 60+)</p>
                    <p>‚úÖ = ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡∏µ (‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô 40-59)</p>
                    <p>‚ö° = ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ (‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô 20-39)</p>
                    <p>‚ö†Ô∏è = ‡∏Ñ‡∏ß‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤ (‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô &lt;20)</p>
                </div>
            </div>

            <select
                value={selectedSprinkler?.id || ''}
                onChange={(e) => {
                    const selected = SprinklerData.find((s) => s.id === parseInt(e.target.value));
                    onSprinklerChange(selected);
                }}
                className="mb-4 w-full rounded border border-gray-500 bg-gray-600 p-2 text-white focus:border-blue-400"
            >
                <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏õ‡∏£‡∏¥‡∏á‡πÄ‡∏Å‡∏≠‡∏£‡πå --</option>
                {sortedSprinklers.map((sprinkler) => (
                    <option key={sprinkler.id} value={sprinkler.id}>
                        {sprinkler.name} - {sprinkler.price} ‡∏ö‡∏≤‡∏ó | {getRecommendationIcon(sprinkler)}
                    </option>
                ))}
            </select>

            {selectedSprinkler && selectedAnalyzed && (
                <div className="rounded bg-gray-600 p-3">
                    <div className="mb-3 flex items-center justify-between">
                        <h4 className="font-medium text-white">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏õ‡∏£‡∏¥‡∏á‡πÄ‡∏Å‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å</h4>
                        <span className={`text-sm font-bold ${getRecommendationColor(selectedAnalyzed)}`}>
                            {getRecommendationIcon(selectedAnalyzed)}
                        </span>
                    </div>
                    
                    <div className="grid grid-cols-2 gap-3 text-sm">
                        <div>
                            <p><strong>‡∏£‡∏∏‡πà‡∏ô:</strong> {selectedSprinkler.productCode}</p>
                            <p>
                                <strong>‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÑ‡∏´‡∏•:</strong> {formatWaterFlow(selectedSprinkler.waterVolumeLitersPerHour)} ‡∏•‡∏¥‡∏ï‡∏£/‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
                            </p>
                            <p><strong>‡∏£‡∏±‡∏®‡∏°‡∏µ:</strong> {formatRadius(selectedSprinkler.radiusMeters)} ‡πÄ‡∏°‡∏ï‡∏£</p>
                            <p><strong>‡πÅ‡∏£‡∏á‡∏î‡∏±‡∏ô:</strong> {formatWaterFlow(selectedSprinkler.pressureBar)} ‡∏ö‡∏≤‡∏£‡πå</p>
                        </div>
                        <div>
                            <p><strong>‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏´‡∏±‡∏ß:</strong> {selectedSprinkler.price} ‡∏ö‡∏≤‡∏ó</p>
                            <p><strong>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ:</strong> {results.totalSprinklers} ‡∏´‡∏±‡∏ß</p>
                            <p>
                                <strong>‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°:</strong>{' '}
                                <span className="text-green-300">
                                    {(selectedSprinkler.price * results.totalSprinklers).toLocaleString()}
                                </span>{' '}
                                ‡∏ö‡∏≤‡∏ó
                            </p>
                            <p>
                                <strong>‡∏£‡∏≤‡∏Ñ‡∏≤/‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û:</strong>{' '}
                                <span className="text-blue-300">
                                    {selectedAnalyzed.pricePerFlow.toFixed(2)} ‡∏ö‡∏≤‡∏ó/‡∏•‡∏¥‡∏ï‡∏£/‡∏ä‡∏°.
                                </span>
                            </p>
                        </div>
                    </div>

                    {/* ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° */}
                    <div className="mt-3 rounded bg-gray-500 p-2">
                        <h5 className="text-xs font-medium text-yellow-300">‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå:</h5>
                        <div className="grid grid-cols-2 gap-2 text-xs">
                            <p>‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°: <span className="font-bold">{selectedAnalyzed.score}</span>/100</p>
                            <p>
                                ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏≤‡∏£‡πÑ‡∏´‡∏•: 
                                <span className={`ml-1 font-bold ${
                                    selectedAnalyzed.flowMatch ? 'text-green-300' : 
                                    selectedAnalyzed.flowCloseMatch ? 'text-yellow-300' : 'text-red-300'
                                }`}>
                                    {selectedAnalyzed.flowMatch ? '‚úÖ ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°' : 
                                     selectedAnalyzed.flowCloseMatch ? '‚ö†Ô∏è ‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á' : '‚ùå ‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°'}
                                </span>
                            </p>
                        </div>
                    </div>

                    {/* ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á */}
                    {!selectedAnalyzed.isRecommended && (
                        <div className="mt-3 rounded bg-blue-900 p-2">
                            <p className="text-sm text-blue-300">
                                üí° <strong>‡∏™‡∏õ‡∏£‡∏¥‡∏á‡πÄ‡∏Å‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:</strong>{' '}
                                {sortedSprinklers
                                    .filter(s => s.isRecommended)
                                    .slice(0, 2)
                                    .map(s => s.productCode)
                                    .join(', ') || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥'}
                            </p>
                        </div>
                    )}

                    {/* ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÑ‡∏´‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° */}
                    {!selectedAnalyzed.flowCloseMatch && (
                        <div className="mt-3 rounded bg-red-900 p-2">
                            <p className="text-sm text-red-300">
                                ‚ö†Ô∏è <strong>‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô:</strong> ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÑ‡∏´‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ({results.waterPerSprinklerLPH.toFixed(1)} ‡∏•‡∏¥‡∏ï‡∏£/‡∏ä‡∏°.) 
                                ‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° ({selectedAnalyzed.minFlow}-{selectedAnalyzed.maxFlow} ‡∏•‡∏¥‡∏ï‡∏£/‡∏ä‡∏°.)
                            </p>
                        </div>
                    )}
                </div>
            )}
        </div>
    );
};

export default SprinklerSelector;