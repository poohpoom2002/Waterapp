// C:\webchaiyo\Waterapp\resources\js\pages\components\InputForm.tsx
import React, { useEffect } from 'react';
import { IrrigationInput } from '../types/interfaces';
import { formatNumber } from '../utils/calculations';
import { Zone } from '../../utils/horticultureUtils';
import {
    getLongestBranchPipeStats,
    getSubMainPipeBranchCount,
    getDetailedBranchPipeStats,
} from '../../utils/horticultureProjectStats';

interface InputFormProps {
    input: IrrigationInput;
    onInputChange: (input: IrrigationInput) => void;
    selectedSprinkler?: any;
    activeZone?: Zone; // Add zone information
}

const InputForm: React.FC<InputFormProps> = ({
    input,
    onInputChange,
    selectedSprinkler,
    activeZone,
}) => {
    const updateInput = (field: keyof IrrigationInput, value: number) => {
        // Format decimal values to 3 decimal places for display
        const formattedValue = [
            'farmSizeRai',
            'waterPerTreeLiters',
            'sprinklersPerTree',
            'irrigationTimeMinutes',
            'staticHeadM',
            'pressureHeadM',
            'longestBranchPipeM',
            'totalBranchPipeM',
            'longestSecondaryPipeM',
            'totalSecondaryPipeM',
            'longestMainPipeM',
            'totalMainPipeM',
        ].includes(field)
            ? formatNumber(value, 3)
            : Math.round(value);

        onInputChange({
            ...input,
            [field]: formattedValue,
        });
    };

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏£‡∏á‡∏î‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡∏™‡∏õ‡∏£‡∏¥‡∏á‡πÄ‡∏Å‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    const getSprinklerPressureInfo = () => {
        if (!selectedSprinkler) return null;

        const minPressure = Array.isArray(selectedSprinkler.pressureBar)
            ? selectedSprinkler.pressureBar[0]
            : parseFloat(String(selectedSprinkler.pressureBar).split('-')[0]);
        const maxPressure = Array.isArray(selectedSprinkler.pressureBar)
            ? selectedSprinkler.pressureBar[1]
            : parseFloat(String(selectedSprinkler.pressureBar).split('-')[1]);

        const avgPressureBar = (minPressure + maxPressure) / 2;
        const pressureM = avgPressureBar * 10.2; // ‡πÅ‡∏õ‡∏•‡∏á bar ‡πÄ‡∏õ‡πá‡∏ô ‡πÄ‡∏°‡∏ï‡∏£

        return {
            pressureBar: avgPressureBar,
            pressureM: pressureM,
            sprinklerName: selectedSprinkler.productCode,
        };
    };

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡πà‡∏≠‡∏¢‡πà‡∏≠‡∏¢‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Horticulture
    const calculateBranchPipeStats = () => {
        try {
            const longestBranchStats = getLongestBranchPipeStats();
            const subMainBranchCount = getSubMainPipeBranchCount();

            if (!longestBranchStats || !subMainBranchCount) {
                console.log('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡πà‡∏≠‡∏¢‡πà‡∏≠‡∏¢‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö Horticulture');
                return null;
            }

            // ‡∏´‡∏≤‡∏ó‡πà‡∏≠‡∏¢‡πà‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏¢‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡πÉ‡∏ô‡∏ó‡πà‡∏≠‡∏¢‡πà‡∏≠‡∏¢‡∏ô‡∏±‡πâ‡∏ô
            let maxPlantCount = 0;
            let maxBranchLength = 0;

            longestBranchStats.forEach((zone) => {
                if (zone.longestBranchPipe.plantCount > maxPlantCount) {
                    maxPlantCount = zone.longestBranchPipe.plantCount;
                }
                if (zone.longestBranchPipe.length > maxBranchLength) {
                    maxBranchLength = zone.longestBranchPipe.length;
                }
            });

            // ‡∏´‡∏≤‡∏ó‡πà‡∏≠‡πÄ‡∏°‡∏ô‡∏£‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏¢‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡πà‡∏≠‡∏¢‡πà‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ó‡πà‡∏≠‡∏ô‡∏±‡πâ‡∏ô
            let maxBranchCount = 0;
            let maxSecondaryLength = 0;

            subMainBranchCount.forEach((zone) => {
                zone.subMainPipes.forEach((subMain) => {
                    if (subMain.branchCount > maxBranchCount) {
                        maxBranchCount = subMain.branchCount;
                    }
                    if (subMain.length > maxSecondaryLength) {
                        maxSecondaryLength = subMain.length;
                    }
                });
            });

            return {
                sprinklersPerLongestBranch: maxPlantCount,
                branchesPerLongestSecondary: maxBranchCount,
                longestBranchLength: maxBranchLength,
                longestSecondaryLength: maxSecondaryLength,
            };
        } catch (error) {
            console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡πà‡∏≠‡∏¢‡πà‡∏≠‡∏¢:', error);
            return null;
        }
    };

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡πà‡∏≠‡∏¢‡πà‡∏≠‡∏¢‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    useEffect(() => {
        const branchStats = calculateBranchPipeStats();
        if (branchStats) {
            // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡πà‡∏≠‡∏¢‡πà‡∏≠‡∏¢
            onInputChange({
                ...input,
                sprinklersPerLongestBranch: branchStats.sprinklersPerLongestBranch,
                branchesPerLongestSecondary: branchStats.branchesPerLongestSecondary,
            });
        }
    }, [activeZone]); // ‡∏£‡∏±‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠ activeZone ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô

    const sprinklerPressure = getSprinklerPressureInfo();

    return (
        <div className="mb-8 rounded-lg bg-gray-700 p-6">
            {/* Zone Information Header */}
            {activeZone && (
                <div className="mb-4 rounded bg-blue-900 p-3">
                    <h3 className="text-lg font-semibold text-blue-300">üå± {activeZone.name}</h3>
                    <div className="mt-2 grid grid-cols-2 gap-4 text-sm text-gray-300 md:grid-cols-4">
                        <p>‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà: {(activeZone.area / 1600).toFixed(2)} ‡πÑ‡∏£‡πà</p>
                        <p>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡πâ‡∏ô: {activeZone.plantCount} ‡∏ï‡πâ‡∏ô</p>
                        <p>‡∏û‡∏∑‡∏ä‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏π‡∏Å: {activeZone.plantData?.name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</p>
                        <p>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡πâ‡∏≥: {activeZone.totalWaterNeed.toFixed(0)} ‡∏•‡∏¥‡∏ï‡∏£/‡∏Ñ‡∏£‡∏±‡πâ‡∏á</p>
                    </div>
                </div>
            )}

            <h2 className="mb-4 text-xl font-semibold text-green-400">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô</h2>
            <div className="grid grid-cols-2 gap-4 md:grid-cols-3 lg:grid-cols-4">
                <div>
                    <label className="mb-2 block text-sm font-medium">
                        ‡∏Ç‡∏ô‡∏≤‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà (‡πÑ‡∏£‡πà)
                        {activeZone && (
                            <span className="ml-1 text-xs text-gray-400">({activeZone.name})</span>
                        )}
                    </label>
                    <input
                        type="number"
                        value={input.farmSizeRai}
                        onChange={(e) =>
                            updateInput('farmSizeRai', parseFloat(e.target.value) || 0)
                        }
                        step="0.1"
                        min="0"
                        className="w-full rounded border border-gray-500 bg-gray-600 p-2 text-white focus:border-blue-400"
                        placeholder="0.000"
                        // readOnly={!!activeZone} // Read-only if zone data exists
                    />
                </div>
                <div>
                    <label className="mb-2 block text-sm font-medium">
                        ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ (‡∏ï‡πâ‡∏ô)
                        {activeZone && activeZone.plantData && (
                            <span className="ml-1 text-xs text-gray-400">
                                ({activeZone.plantData.name})
                            </span>
                        )}
                    </label>
                    <input
                        type="number"
                        value={input.totalTrees}
                        onChange={(e) => updateInput('totalTrees', parseInt(e.target.value) || 0)}
                        min="0"
                        step="1"
                        className="w-full rounded border border-gray-500 bg-gray-600 p-2 text-white focus:border-blue-400"
                        placeholder="0"
                        // readOnly={!!activeZone} // Read-only if zone data exists
                    />
                </div>
                <div>
                    <label className="mb-2 block text-sm font-medium">‡∏ô‡πâ‡∏≥‡∏ï‡πà‡∏≠‡∏ï‡πâ‡∏ô (‡∏•‡∏¥‡∏ï‡∏£/‡∏Ñ‡∏£‡∏±‡πâ‡∏á)</label>
                    <input
                        type="number"
                        value={input.waterPerTreeLiters}
                        onChange={(e) =>
                            updateInput('waterPerTreeLiters', parseFloat(e.target.value) || 0)
                        }
                        step="0.1"
                        min="0"
                        className="w-full rounded border border-gray-500 bg-gray-600 p-2 text-white focus:border-blue-400"
                        placeholder="0.000"
                        // readOnly={!!activeZone} // Read-only if zone data exists
                    />
                </div>
                <div>
                    <label className="mb-2 block text-sm font-medium">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÇ‡∏ã‡∏ô</label>
                    <input
                        type="number"
                        value={input.numberOfZones}
                        onChange={(e) =>
                            updateInput('numberOfZones', parseInt(e.target.value) || 1)
                        }
                        min="1"
                        step="1"
                        className="w-full rounded border border-gray-500 bg-gray-600 p-2 text-white focus:border-blue-400"
                        placeholder="1"
                        // readOnly={!!activeZone} // Read-only if zone data exists
                    />
                </div>
            </div>

            {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡πà‡∏≠ */}
            <h3 className="mb-4 mt-6 text-lg font-semibold text-blue-400">
                ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡πà‡∏≠
                {activeZone && (
                    <span className="ml-2 text-sm font-normal text-gray-400">
                        (‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö Horticulture)
                    </span>
                )}
            </h3>
            <div className="grid grid-cols-1 gap-6 md:grid-cols-3">
                <div className="space-y-4 rounded-lg bg-gray-800 p-4 shadow-lg">
                    <h4 className="text-md font-medium text-purple-300">‡∏ó‡πà‡∏≠‡∏¢‡πà‡∏≠‡∏¢ (Branch Pipe)</h4>
                    <div>
                        <label className="mb-2 block text-sm font-medium">
                            ‡∏ó‡πà‡∏≠‡∏¢‡πà‡∏≠‡∏¢‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î (‡πÄ‡∏°‡∏ï‡∏£)
                        </label>
                        <input
                            type="number"
                            value={input.longestBranchPipeM}
                            onChange={(e) =>
                                updateInput('longestBranchPipeM', parseFloat(e.target.value) || 0)
                            }
                            step="0.1"
                            min="0"
                            className="w-full rounded border border-gray-500 bg-gray-600 p-2 text-white focus:border-blue-400"
                            placeholder="30.000"
                            // readOnly={!!activeZone}
                        />
                    </div>
                    <div>
                        <label className="mb-2 block text-sm font-medium">
                            ‡∏ó‡πà‡∏≠‡∏¢‡πà‡∏≠‡∏¢‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÄ‡∏°‡∏ï‡∏£)
                        </label>
                        <input
                            type="number"
                            value={input.totalBranchPipeM}
                            onChange={(e) =>
                                updateInput('totalBranchPipeM', parseFloat(e.target.value) || 0)
                            }
                            step="0.1"
                            min="0"
                            className="w-full rounded border border-gray-500 bg-gray-600 p-2 text-white focus:border-blue-400"
                            placeholder="500.000"
                            // readOnly={!!activeZone}
                        />
                    </div>
                </div>

                <div className="space-y-4 rounded-lg bg-gray-800 p-4 shadow-lg">
                    {input.longestSecondaryPipeM > 0 ? (
                        <>
                            <h4 className="text-md font-medium text-orange-300">
                                ‡∏ó‡πà‡∏≠‡πÄ‡∏°‡∏ô‡∏£‡∏≠‡∏á (Secondary Pipe)
                            </h4>
                            <div>
                                <label className="mb-2 block text-sm font-medium">
                                    ‡∏ó‡πà‡∏≠‡πÄ‡∏°‡∏ô‡∏£‡∏≠‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î (‡πÄ‡∏°‡∏ï‡∏£)
                                </label>
                                <input
                                    type="number"
                                    value={input.longestSecondaryPipeM}
                                    onChange={(e) =>
                                        updateInput(
                                            'longestSecondaryPipeM',
                                            parseFloat(e.target.value) || 0
                                        )
                                    }
                                    step="0.1"
                                    min="0"
                                    className="w-full rounded border border-gray-500 bg-gray-600 p-2 text-white focus:border-blue-400"
                                    placeholder="80.000 (0 = ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ó‡πà‡∏≠‡∏ô‡∏µ‡πâ)"
                                    // readOnly={!!activeZone}
                                />
                            </div>
                            <div>
                                <label className="mb-2 block text-sm font-medium">
                                    ‡∏ó‡πà‡∏≠‡πÄ‡∏°‡∏ô‡∏£‡∏≠‡∏á‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÄ‡∏°‡∏ï‡∏£)
                                </label>
                                <input
                                    type="number"
                                    value={input.totalSecondaryPipeM}
                                    onChange={(e) =>
                                        updateInput(
                                            'totalSecondaryPipeM',
                                            parseFloat(e.target.value) || 0
                                        )
                                    }
                                    step="0.1"
                                    min="0"
                                    className="w-full rounded border border-gray-500 bg-gray-600 p-2 text-white focus:border-blue-400"
                                    placeholder="400.000 (0 = ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ó‡πà‡∏≠‡∏ô‡∏µ‡πâ)"
                                    // readOnly={!!activeZone}
                                />
                            </div>
                        </>
                    ) : (
                        <div className="flex h-full items-center justify-center rounded bg-gray-900 p-2 text-center text-gray-400">
                            ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡πà‡∏≠‡πÄ‡∏°‡∏ô‡∏£‡∏≠‡∏á
                        </div>
                    )}
                </div>

                <div className="space-y-4 rounded-lg bg-gray-800 p-4 shadow-lg">
                    {input.longestMainPipeM > 0 ? (
                        <>
                            <h4 className="text-md font-medium text-cyan-300">
                                ‡∏ó‡πà‡∏≠‡πÄ‡∏°‡∏ô‡∏´‡∏•‡∏±‡∏Å (Main Pipe)
                            </h4>
                            <div>
                                <label className="mb-2 block text-sm font-medium">
                                    ‡∏ó‡πà‡∏≠‡πÄ‡∏°‡∏ô‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î (‡πÄ‡∏°‡∏ï‡∏£)
                                </label>
                                <input
                                    type="number"
                                    value={input.longestMainPipeM}
                                    onChange={(e) =>
                                        updateInput(
                                            'longestMainPipeM',
                                            parseFloat(e.target.value) || 0
                                        )
                                    }
                                    step="0.1"
                                    min="0"
                                    className="w-full rounded border border-gray-500 bg-gray-600 p-2 text-white focus:border-blue-400"
                                    placeholder="200.000 (0 = ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ó‡πà‡∏≠‡∏ô‡∏µ‡πâ)"
                                    // readOnly={!!activeZone}
                                />
                            </div>
                            <div>
                                <label className="mb-2 block text-sm font-medium">
                                    ‡∏ó‡πà‡∏≠‡πÄ‡∏°‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÄ‡∏°‡∏ï‡∏£)
                                </label>
                                <input
                                    type="number"
                                    value={input.totalMainPipeM}
                                    onChange={(e) =>
                                        updateInput(
                                            'totalMainPipeM',
                                            parseFloat(e.target.value) || 0
                                        )
                                    }
                                    step="0.1"
                                    min="0"
                                    className="w-full rounded border border-gray-500 bg-gray-600 p-2 text-white focus:border-blue-400"
                                    placeholder="600.000 (0 = ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ó‡πà‡∏≠‡∏ô‡∏µ‡πâ)"
                                    // readOnly={!!activeZone}
                                />
                            </div>
                        </>
                    ) : (
                        <div className="flex h-full items-center justify-center rounded bg-gray-900 p-2 text-center text-gray-400">
                            ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡πà‡∏≠‡πÄ‡∏°‡∏ô‡∏´‡∏•‡∏±‡∏Å
                        </div>
                    )}
                </div>
            </div>

            {/* ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö */}
            <h3 className="mb-4 mt-6 text-lg font-semibold text-orange-400">‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö</h3>
            <div className="mb-4 grid grid-cols-2 gap-4 md:grid-cols-3 lg:grid-cols-3">
                <div>
                    <label className="mb-2 block text-sm font-medium">‡∏™‡∏õ‡∏£‡∏¥‡∏á‡πÄ‡∏Å‡∏≠‡∏£‡πå‡∏ï‡πà‡∏≠‡∏ï‡πâ‡∏ô</label>
                    <input
                        type="number"
                        step="1"
                        value={input.sprinklersPerTree}
                        onChange={(e) =>
                            updateInput('sprinklersPerTree', parseFloat(e.target.value) || 1)
                        }
                        min="1"
                        className="w-full rounded border border-gray-500 bg-gray-600 p-2 text-white focus:border-blue-400"
                        placeholder="1.000"
                    />
                </div>
                <div>
                    <label className="mb-2 block text-sm font-medium">‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏î‡∏ô‡πâ‡∏≥ (‡∏ô‡∏≤‡∏ó‡∏µ/‡∏Ñ‡∏£‡∏±‡πâ‡∏á)</label>
                    <input
                        type="number"
                        step="0.5"
                        value={input.irrigationTimeMinutes}
                        onChange={(e) =>
                            updateInput('irrigationTimeMinutes', parseFloat(e.target.value) || 1)
                        }
                        min="1"
                        className="w-full rounded border border-gray-500 bg-gray-600 p-2 text-white focus:border-blue-400"
                        placeholder="30.000"
                    />
                </div>
                <div>
                    <label className="mb-2 block text-sm font-medium">
                        ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏à‡∏≤‡∏Å‡∏õ‡∏±‡πä‡∏°‡πÑ‡∏õ‡∏à‡∏∏‡∏î‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î (‡πÄ‡∏°‡∏ï‡∏£)
                    </label>
                    <input
                        type="number"
                        step="0.1"
                        value={input.staticHeadM}
                        onChange={(e) =>
                            updateInput('staticHeadM', parseFloat(e.target.value) || 0)
                        }
                        min="0"
                        className="w-full rounded border border-gray-500 bg-gray-600 p-2 text-white focus:border-blue-400"
                        placeholder="0.000 (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏à‡∏≤‡∏Å‡∏õ‡∏±‡πä‡∏°‡πÑ‡∏õ‡∏à‡∏∏‡∏î‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î)"
                    />
                </div>
            </div>
            <div className="grid grid-cols-1 gap-4 md:grid-cols-3">
                <div>
                    <label className="mb-2 block text-sm font-medium">
                        ‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏ï‡πà‡∏≠‡∏ó‡πà‡∏≠‡∏¢‡πà‡∏≠‡∏¢ 1 ‡πÄ‡∏™‡πâ‡∏ô(‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î)
                        {activeZone && (
                            <span className="ml-1 text-xs text-green-400">
                                (‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö Horticulture)
                            </span>
                        )}
                    </label>
                    <input
                        type="number"
                        min="1"
                        value={input.sprinklersPerLongestBranch || input.sprinklersPerBranch}
                        onChange={(e) =>
                            updateInput('sprinklersPerLongestBranch', parseInt(e.target.value) || 1)
                        }
                        step="1"
                        className="w-full rounded border border-gray-500 bg-gray-600 p-2 text-white focus:border-blue-400"
                        placeholder="4"
                        // readOnly={!!activeZone}
                    />
                    {activeZone && (
                        <p className="mt-1 text-xs text-green-300">
                            üí° ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å‡∏ó‡πà‡∏≠‡∏¢‡πà‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏¢‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö Horticulture
                        </p>
                    )}
                </div>
                <div>
                    <label className="mb-2 block text-sm font-medium">
                        ‡∏ó‡πà‡∏≠‡∏¢‡πà‡∏≠‡∏¢‡∏ï‡πà‡∏≠‡∏ó‡πà‡∏≠‡∏£‡∏≠‡∏á 1 ‡πÄ‡∏™‡πâ‡∏ô(‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î)
                        {activeZone && (
                            <span className="ml-1 text-xs text-green-400">
                                (‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö Horticulture)
                            </span>
                        )}
                    </label>
                    <input
                        type="number"
                        min="1"
                        value={input.branchesPerLongestSecondary || input.branchesPerSecondary}
                        onChange={(e) =>
                            updateInput(
                                'branchesPerLongestSecondary',
                                parseInt(e.target.value) || 1
                            )
                        }
                        step="1"
                        className="w-full rounded border border-gray-500 bg-gray-600 p-2 text-white focus:border-blue-400"
                        placeholder="5"
                        // readOnly={!!activeZone}
                    />
                    {activeZone && (
                        <p className="mt-1 text-xs text-green-300">
                            üí° ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å‡∏ó‡πà‡∏≠‡πÄ‡∏°‡∏ô‡∏£‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏¢‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö Horticulture
                        </p>
                    )}
                </div>
                <div>
                    <label className="mb-2 block text-sm font-medium">‡πÇ‡∏ã‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô</label>
                    <select
                        value={input.simultaneousZones}
                        onChange={(e) =>
                            updateInput('simultaneousZones', parseInt(e.target.value, 10) || 1)
                        }
                        className="w-full rounded border border-gray-500 bg-gray-600 p-2 text-white focus:border-blue-400"
                    >
                        {Array.from({ length: input.numberOfZones }, (_, i) => i + 1).map((n) => (
                            <option key={n} value={n}>
                                {n}
                            </option>
                        ))}
                    </select>
                </div>
            </div>

            {/* Branch Pipe Statistics Info */}
            {activeZone && (
                <div className="mt-6 rounded bg-purple-900 p-4">
                    <h4 className="mb-2 text-sm font-semibold text-purple-300">
                        üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ó‡πà‡∏≠‡∏¢‡πà‡∏≠‡∏¢‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö Horticulture
                    </h4>
                    <div className="grid grid-cols-2 gap-4 text-sm text-gray-300 md:grid-cols-4">
                        <p>
                            ‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡πÉ‡∏ô‡∏ó‡πà‡∏≠‡∏¢‡πà‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏¢‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î: {input.sprinklersPerLongestBranch || 0} ‡∏ï‡πâ‡∏ô
                        </p>
                        <p>
                            ‡∏ó‡πà‡∏≠‡∏¢‡πà‡∏≠‡∏¢‡∏à‡∏≤‡∏Å‡∏ó‡πà‡∏≠‡πÄ‡∏°‡∏ô‡∏£‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏¢‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î:{' '}
                            {input.branchesPerLongestSecondary || 0} ‡πÄ‡∏™‡πâ‡∏ô
                        </p>
                        <p>‡∏ó‡πà‡∏≠‡∏¢‡πà‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏¢‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î: {input.longestBranchPipeM} ‡∏°.</p>
                        <p>‡∏ó‡πà‡∏≠‡πÄ‡∏°‡∏ô‡∏£‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏¢‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î: {input.longestSecondaryPipeM} ‡∏°.</p>
                    </div>
                    <p className="mt-2 text-xs text-purple-200">
                        üí° ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö Horticulture
                    </p>
                </div>
            )}

            {/* Plant-specific water requirements */}
            {activeZone && activeZone.plantData && (
                <div className="mt-6 rounded bg-green-900 p-4">
                    <h4 className="mb-2 text-sm font-semibold text-green-300">
                        üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡∏π‡∏Å‡∏û‡∏∑‡∏ä‡πÉ‡∏ô‡πÇ‡∏ã‡∏ô
                    </h4>
                    <div className="grid grid-cols-2 gap-4 text-sm text-gray-300 md:grid-cols-4">
                        <p>‡∏ä‡∏ô‡∏¥‡∏î‡∏û‡∏∑‡∏ä: {activeZone.plantData.name}</p>
                        <p>‡∏£‡∏∞‡∏¢‡∏∞‡∏õ‡∏•‡∏π‡∏Å: {activeZone.plantData.plantSpacing} ‡∏°.</p>
                        <p>‡∏£‡∏∞‡∏¢‡∏∞‡πÅ‡∏ñ‡∏ß: {activeZone.plantData.rowSpacing} ‡∏°.</p>
                        <p>‡∏ô‡πâ‡∏≥/‡∏ï‡πâ‡∏ô/‡∏ß‡∏±‡∏ô: {activeZone.plantData.waterNeed} ‡∏•‡∏¥‡∏ï‡∏£</p>
                    </div>
                </div>
            )}

            {/* Sprinkler Pressure Info */}
            {selectedSprinkler && (
                <div className="mt-6 rounded bg-blue-900 p-4">
                    <h3 className="mb-2 font-medium text-blue-300">
                        üíß ‡πÅ‡∏£‡∏á‡∏î‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡∏™‡∏õ‡∏£‡∏¥‡∏á‡πÄ‡∏Å‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
                    </h3>
                    <div className="grid grid-cols-1 gap-2 text-sm md:grid-cols-3">
                        <p>
                            <strong>‡∏™‡∏õ‡∏£‡∏¥‡∏á‡πÄ‡∏Å‡∏≠‡∏£‡πå:</strong> {selectedSprinkler.productCode}
                        </p>
                        <p>
                            <strong>‡∏ä‡πà‡∏ß‡∏á‡πÅ‡∏£‡∏á‡∏î‡∏±‡∏ô:</strong>{' '}
                            {sprinklerPressure?.pressureBar?.toFixed(1)} ‡∏ö‡∏≤‡∏£‡πå
                        </p>
                        <p>
                            <strong>‡πÅ‡∏£‡∏á‡∏î‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì:</strong>{' '}
                            {sprinklerPressure?.pressureM.toFixed(1)} ‡πÄ‡∏°‡∏ï‡∏£
                        </p>
                    </div>
                    <p className="mt-2 text-xs text-blue-200">
                        üí° ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÅ‡∏£‡∏á‡∏î‡∏±‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏õ‡∏£‡∏¥‡∏á‡πÄ‡∏Å‡∏≠‡∏£‡πå‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Pump Head
                    </p>
                </div>
            )}
        </div>
    );
};

export default InputForm;
