// C:\webchaiyo\Waterapp\resources\js\pages\components\CostSummary.tsx
import React from 'react';
import { CalculationResults } from '../types/interfaces';
import { HorticultureProjectData } from '../../utils/horticultureUtils';

interface CostSummaryProps {
    results: CalculationResults;
    zoneSprinklers: { [zoneId: string]: any }; // Sprinklers per zone
    selectedPipes: { [zoneId: string]: { branch?: any; secondary?: any; main?: any } }; // Pipes per zone
    selectedPump: any; // Single pump for all zones
    activeZoneId: string;
    projectData: HorticultureProjectData | null;
    onQuotationClick: () => void;
}

const CostSummary: React.FC<CostSummaryProps> = ({
    results,
    zoneSprinklers,
    selectedPipes,
    selectedPump,
    activeZoneId,
    projectData,
    onQuotationClick,
}) => {
    // Calculate total costs across all zones
    const calculateTotalCosts = () => {
        let totalSprinklerCost = 0;
        let totalBranchPipeCost = 0;
        let totalSecondaryPipeCost = 0;
        let totalMainPipeCost = 0;

        const sprinklerSummary: {
            [sprinklerId: string]: { sprinkler: any; quantity: number; zones: string[] };
        } = {};
        const pipeSummary: {
            branch: { [pipeId: string]: { pipe: any; quantity: number; zones: string[] } };
            secondary: { [pipeId: string]: { pipe: any; quantity: number; zones: string[] } };
            main: { [pipeId: string]: { pipe: any; quantity: number; zones: string[] } };
        } = {
            branch: {},
            secondary: {},
            main: {},
        };

        // Iterate through zones or use single zone
        if (projectData?.useZones && projectData.zones.length > 1) {
            // Multi-zone calculation
            projectData.zones.forEach((zone) => {
                const zoneSprinkler = zoneSprinklers[zone.id];
                const zonePipes = selectedPipes[zone.id] || {};

                // Sprinkler costs
                if (zoneSprinkler) {
                    const cost = zoneSprinkler.price * zone.plantCount;
                    totalSprinklerCost += cost;

                    // Track sprinkler usage
                    const key = `${zoneSprinkler.id}`;
                    if (!sprinklerSummary[key]) {
                        sprinklerSummary[key] = {
                            sprinkler: zoneSprinkler,
                            quantity: 0,
                            zones: [],
                        };
                    }
                    sprinklerSummary[key].quantity += zone.plantCount;
                    sprinklerSummary[key].zones.push(zone.name);
                }

                // Pipe costs
                const branchPipe = zonePipes.branch || results.autoSelectedBranchPipe;
                if (branchPipe) {
                    const rolls = Math.ceil((zone.area / 1600) * 10); // Rough estimate
                    const cost = branchPipe.price * rolls;
                    totalBranchPipeCost += cost;

                    // Track pipe usage
                    const key = `${branchPipe.id}`;
                    if (!pipeSummary.branch[key]) {
                        pipeSummary.branch[key] = { pipe: branchPipe, quantity: 0, zones: [] };
                    }
                    pipeSummary.branch[key].quantity += rolls;
                    pipeSummary.branch[key].zones.push(zone.name);
                }

                const secondaryPipe = zonePipes.secondary || results.autoSelectedSecondaryPipe;
                if (secondaryPipe) {
                    const rolls = Math.ceil((zone.area / 1600) * 3); // Rough estimate
                    const cost = secondaryPipe.price * rolls;
                    totalSecondaryPipeCost += cost;

                    const key = `${secondaryPipe.id}`;
                    if (!pipeSummary.secondary[key]) {
                        pipeSummary.secondary[key] = {
                            pipe: secondaryPipe,
                            quantity: 0,
                            zones: [],
                        };
                    }
                    pipeSummary.secondary[key].quantity += rolls;
                    pipeSummary.secondary[key].zones.push(zone.name);
                }

                const mainPipe = zonePipes.main || results.autoSelectedMainPipe;
                if (mainPipe) {
                    const rolls = Math.ceil((zone.area / 1600) * 1); // Rough estimate
                    const cost = mainPipe.price * rolls;
                    totalMainPipeCost += cost;

                    const key = `${mainPipe.id}`;
                    if (!pipeSummary.main[key]) {
                        pipeSummary.main[key] = { pipe: mainPipe, quantity: 0, zones: [] };
                    }
                    pipeSummary.main[key].quantity += rolls;
                    pipeSummary.main[key].zones.push(zone.name);
                }
            });
        } else {
            // Single zone calculation
            const currentSprinkler = zoneSprinklers[activeZoneId];
            const currentPipes = selectedPipes[activeZoneId] || {};

            if (currentSprinkler) {
                totalSprinklerCost = currentSprinkler.price * results.totalSprinklers;
                sprinklerSummary[`${currentSprinkler.id}`] = {
                    sprinkler: currentSprinkler,
                    quantity: results.totalSprinklers,
                    zones: ['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏±‡∏Å'],
                };
            }

            const branchPipe = currentPipes.branch || results.autoSelectedBranchPipe;
            if (branchPipe) {
                totalBranchPipeCost = branchPipe.price * results.branchPipeRolls;
                pipeSummary.branch[`${branchPipe.id}`] = {
                    pipe: branchPipe,
                    quantity: results.branchPipeRolls,
                    zones: ['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏±‡∏Å'],
                };
            }

            const secondaryPipe = currentPipes.secondary || results.autoSelectedSecondaryPipe;
            if (secondaryPipe) {
                totalSecondaryPipeCost = secondaryPipe.price * results.secondaryPipeRolls;
                pipeSummary.secondary[`${secondaryPipe.id}`] = {
                    pipe: secondaryPipe,
                    quantity: results.secondaryPipeRolls,
                    zones: ['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏±‡∏Å'],
                };
            }

            const mainPipe = currentPipes.main || results.autoSelectedMainPipe;
            if (mainPipe) {
                totalMainPipeCost = mainPipe.price * results.mainPipeRolls;
                pipeSummary.main[`${mainPipe.id}`] = {
                    pipe: mainPipe,
                    quantity: results.mainPipeRolls,
                    zones: ['‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏±‡∏Å'],
                };
            }
        }

        const pumpCost = selectedPump?.price || results.autoSelectedPump?.price || 0;
        const totalCost =
            totalSprinklerCost +
            totalBranchPipeCost +
            totalSecondaryPipeCost +
            totalMainPipeCost +
            pumpCost;

        return {
            totalSprinklerCost,
            totalBranchPipeCost,
            totalSecondaryPipeCost,
            totalMainPipeCost,
            pumpCost,
            totalCost,
            sprinklerSummary,
            pipeSummary,
        };
    };

    const costs = calculateTotalCosts();
    const effectivePump = selectedPump || results.autoSelectedPump;

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    const getSelectionStatus = (equipment: any, type: string, isAuto: boolean) => {
        if (!equipment) return `‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ${type}`;

        if (isAuto) {
            if (equipment.isRecommended) {
                return `ü§ñ‚≠ê ${type}‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ (‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)`;
            } else if (equipment.isGoodChoice) {
                return `ü§ñ‚úÖ ${type}‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡∏µ (‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)`;
            } else if (equipment.isUsable) {
                return `ü§ñ‚ö° ${type}‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ (‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)`;
            } else {
                return `ü§ñ‚ö†Ô∏è ${type}‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ (‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)`;
            }
        } else {
            return `üë§ ${type}‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏≠‡∏á`;
        }
    };

    // Get unique equipment count
    const uniqueSprinklers = Object.keys(costs.sprinklerSummary).length;
    const uniqueBranchPipes = Object.keys(costs.pipeSummary.branch).length;
    const uniqueSecondaryPipes = Object.keys(costs.pipeSummary.secondary).length;
    const uniqueMainPipes = Object.keys(costs.pipeSummary.main).length;

    return (
        <div className="rounded-lg bg-gray-700 p-6">
            <h2 className="mb-4 text-xl font-semibold text-yellow-400">‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏° üí∞</h2>

            {/* ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ */}
            <div className="mb-4 rounded bg-green-900 p-3">
                <h3 className="mb-2 text-sm font-semibold text-green-300">
                    ü§ñ ‡∏™‡∏£‡∏∏‡∏õ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (
                    {projectData?.useZones && projectData.zones.length > 1 ? '‡∏´‡∏•‡∏≤‡∏¢‡πÇ‡∏ã‡∏ô' : '‡πÇ‡∏ã‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß'}
                    ):
                </h3>
                <div className="grid grid-cols-1 gap-2 text-xs md:grid-cols-2 lg:grid-cols-4">
                    <div>
                        <p className="text-green-200">üíß ‡∏™‡∏õ‡∏£‡∏¥‡∏á‡πÄ‡∏Å‡∏≠‡∏£‡πå: {uniqueSprinklers} ‡∏ä‡∏ô‡∏¥‡∏î</p>
                    </div>
                    <div>
                        <p className="text-green-200">üîß ‡∏ó‡πà‡∏≠‡∏¢‡πà‡∏≠‡∏¢: {uniqueBranchPipes} ‡∏ä‡∏ô‡∏¥‡∏î</p>
                    </div>
                    {uniqueSecondaryPipes > 0 && (
                        <div>
                            <p className="text-green-200">üîß ‡∏ó‡πà‡∏≠‡∏£‡∏≠‡∏á: {uniqueSecondaryPipes} ‡∏ä‡∏ô‡∏¥‡∏î</p>
                        </div>
                    )}
                    {uniqueMainPipes > 0 && (
                        <div>
                            <p className="text-green-200">üîß ‡∏ó‡πà‡∏≠‡∏´‡∏•‡∏±‡∏Å: {uniqueMainPipes} ‡∏ä‡∏ô‡∏¥‡∏î</p>
                        </div>
                    )}
                </div>
            </div>

            {/* ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏õ‡∏£‡∏¥‡∏á‡πÄ‡∏Å‡∏≠‡∏£‡πå */}
            {uniqueSprinklers > 0 && (
                <div className="mb-4 rounded bg-blue-900 p-3">
                    <h3 className="mb-2 text-sm font-semibold text-blue-300">üíß ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏õ‡∏£‡∏¥‡∏á‡πÄ‡∏Å‡∏≠‡∏£‡πå:</h3>
                    <div className="space-y-2">
                        {Object.values(costs.sprinklerSummary).map((item, index) => (
                            <div
                                key={index}
                                className="flex items-center justify-between rounded bg-blue-800 p-2"
                            >
                                <div className="flex items-center space-x-3">
                                    <div className="flex h-8 w-8 items-center justify-center rounded bg-blue-600 text-xs">
                                        üíß
                                    </div>
                                    <div className="text-sm">
                                        <p className="font-medium text-white">
                                            {item.sprinkler.name}
                                        </p>
                                        <p className="text-blue-200">
                                            {item.sprinkler.productCode} | {item.sprinkler.price}{' '}
                                            ‡∏ö‡∏≤‡∏ó/‡∏´‡∏±‡∏ß
                                        </p>
                                        <p className="text-xs text-blue-300">
                                            ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡πÇ‡∏ã‡∏ô: {item.zones.join(', ')}
                                        </p>
                                    </div>
                                </div>
                                <div className="text-right text-sm">
                                    <p className="text-blue-200">{item.quantity} ‡∏´‡∏±‡∏ß</p>
                                    <p className="font-bold text-white">
                                        {(item.sprinkler.price * item.quantity).toLocaleString()}{' '}
                                        ‡∏ö‡∏≤‡∏ó
                                    </p>
                                </div>
                            </div>
                        ))}
                    </div>
                </div>
            )}

            {/* ‡∏™‡∏£‡∏∏‡∏õ‡∏ó‡πà‡∏≠ */}
            {(uniqueBranchPipes > 0 || uniqueSecondaryPipes > 0 || uniqueMainPipes > 0) && (
                <div className="mb-4 rounded bg-purple-900 p-3">
                    <h3 className="mb-2 text-sm font-semibold text-purple-300">üîß ‡∏™‡∏£‡∏∏‡∏õ‡∏ó‡πà‡∏≠:</h3>
                    <div className="space-y-3">
                        {/* Branch Pipes */}
                        {uniqueBranchPipes > 0 && (
                            <div>
                                <h4 className="mb-1 text-xs font-medium text-purple-200">
                                    ‡∏ó‡πà‡∏≠‡∏¢‡πà‡∏≠‡∏¢:
                                </h4>
                                <div className="space-y-1">
                                    {Object.values(costs.pipeSummary.branch).map((item, index) => (
                                        <div
                                            key={index}
                                            className="flex items-center justify-between rounded bg-purple-800 p-2"
                                        >
                                            <div className="text-sm">
                                                <p className="font-medium text-white">
                                                    {item.pipe.name || item.pipe.productCode} -{' '}
                                                    {item.pipe.sizeMM}mm
                                                </p>
                                                <p className="text-xs text-purple-200">
                                                    {item.zones.join(', ')} | {item.pipe.price}{' '}
                                                    ‡∏ö‡∏≤‡∏ó/‡∏°‡πâ‡∏ß‡∏ô
                                                </p>
                                            </div>
                                            <div className="text-right text-sm">
                                                <p className="text-purple-200">
                                                    {item.quantity} ‡∏°‡πâ‡∏ß‡∏ô
                                                </p>
                                                <p className="font-bold text-white">
                                                    {(
                                                        item.pipe.price * item.quantity
                                                    ).toLocaleString()}{' '}
                                                    ‡∏ö‡∏≤‡∏ó
                                                </p>
                                            </div>
                                        </div>
                                    ))}
                                </div>
                            </div>
                        )}

                        {/* Secondary Pipes */}
                        {uniqueSecondaryPipes > 0 && (
                            <div>
                                <h4 className="mb-1 text-xs font-medium text-purple-200">
                                    ‡∏ó‡πà‡∏≠‡πÄ‡∏°‡∏ô‡∏£‡∏≠‡∏á:
                                </h4>
                                <div className="space-y-1">
                                    {Object.values(costs.pipeSummary.secondary).map(
                                        (item, index) => (
                                            <div
                                                key={index}
                                                className="flex items-center justify-between rounded bg-purple-800 p-2"
                                            >
                                                <div className="text-sm">
                                                    <p className="font-medium text-white">
                                                        {item.pipe.name || item.pipe.productCode} -{' '}
                                                        {item.pipe.sizeMM}mm
                                                    </p>
                                                    <p className="text-xs text-purple-200">
                                                        {item.zones.join(', ')} | {item.pipe.price}{' '}
                                                        ‡∏ö‡∏≤‡∏ó/‡∏°‡πâ‡∏ß‡∏ô
                                                    </p>
                                                </div>
                                                <div className="text-right text-sm">
                                                    <p className="text-purple-200">
                                                        {item.quantity} ‡∏°‡πâ‡∏ß‡∏ô
                                                    </p>
                                                    <p className="font-bold text-white">
                                                        {(
                                                            item.pipe.price * item.quantity
                                                        ).toLocaleString()}{' '}
                                                        ‡∏ö‡∏≤‡∏ó
                                                    </p>
                                                </div>
                                            </div>
                                        )
                                    )}
                                </div>
                            </div>
                        )}

                        {/* Main Pipes */}
                        {uniqueMainPipes > 0 && (
                            <div>
                                <h4 className="mb-1 text-xs font-medium text-purple-200">
                                    ‡∏ó‡πà‡∏≠‡πÄ‡∏°‡∏ô‡∏´‡∏•‡∏±‡∏Å:
                                </h4>
                                <div className="space-y-1">
                                    {Object.values(costs.pipeSummary.main).map((item, index) => (
                                        <div
                                            key={index}
                                            className="flex items-center justify-between rounded bg-purple-800 p-2"
                                        >
                                            <div className="text-sm">
                                                <p className="font-medium text-white">
                                                    {item.pipe.name || item.pipe.productCode} -{' '}
                                                    {item.pipe.sizeMM}mm
                                                </p>
                                                <p className="text-xs text-purple-200">
                                                    {item.zones.join(', ')} | {item.pipe.price}{' '}
                                                    ‡∏ö‡∏≤‡∏ó/‡∏°‡πâ‡∏ß‡∏ô
                                                </p>
                                            </div>
                                            <div className="text-right text-sm">
                                                <p className="text-purple-200">
                                                    {item.quantity} ‡∏°‡πâ‡∏ß‡∏ô
                                                </p>
                                                <p className="font-bold text-white">
                                                    {(
                                                        item.pipe.price * item.quantity
                                                    ).toLocaleString()}{' '}
                                                    ‡∏ö‡∏≤‡∏ó
                                                </p>
                                            </div>
                                        </div>
                                    ))}
                                </div>
                            </div>
                        )}
                    </div>
                </div>
            )}

            {/* Cost Summary Grid */}
            <div className="grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-3">
                {/* ‡∏™‡∏õ‡∏£‡∏¥‡∏á‡πÄ‡∏Å‡∏≠‡∏£‡πå - ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏™‡∏°‡∏≠ */}
                <div className="rounded bg-gray-600 p-4">
                    <h4 className="font-medium text-green-300">üíß ‡∏™‡∏õ‡∏£‡∏¥‡∏á‡πÄ‡∏Å‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</h4>
                    <p className="text-sm">
                        {uniqueSprinklers} ‡∏ä‡∏ô‡∏¥‡∏î | ‡∏£‡∏ß‡∏°{' '}
                        {Object.values(costs.sprinklerSummary).reduce(
                            (sum, item) => sum + item.quantity,
                            0
                        )}{' '}
                        ‡∏´‡∏±‡∏ß
                    </p>
                    {projectData?.useZones && projectData.zones.length > 1 && (
                        <p className="text-xs text-gray-300">({projectData.zones.length} ‡πÇ‡∏ã‡∏ô)</p>
                    )}
                    <p className="text-xl font-bold">
                        {costs.totalSprinklerCost.toLocaleString()} ‡∏ö‡∏≤‡∏ó
                    </p>
                </div>

                {/* ‡∏õ‡∏±‡πä‡∏°‡∏ô‡πâ‡∏≥ - ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏™‡∏°‡∏≠ */}
                <div className="rounded bg-gray-600 p-4">
                    <h4 className="font-medium text-red-300">‚ö° ‡∏õ‡∏±‡πä‡∏°‡∏ô‡πâ‡∏≥</h4>
                    <p className="text-sm">
                        {effectivePump
                            ? effectivePump.name || effectivePump.productCode
                            : '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'}
                    </p>
                    <p className="text-sm">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: 1 ‡∏ï‡∏±‡∏ß ({effectivePump?.powerHP || 'N/A'} HP)</p>
                    <p className="text-xl font-bold">{costs.pumpCost.toLocaleString()} ‡∏ö‡∏≤‡∏ó</p>
                    {effectivePump && (
                        <p className="mt-1 text-xs text-green-300">
                            {getSelectionStatus(
                                effectivePump,
                                '‡∏õ‡∏±‡πä‡∏°',
                                effectivePump.id === results.autoSelectedPump?.id
                            )}
                        </p>
                    )}
                </div>

                {/* ‡∏ó‡πà‡∏≠‡∏£‡∏ß‡∏° */}
                <div className="rounded bg-gray-600 p-4">
                    <h4 className="font-medium text-purple-300">üîß ‡∏ó‡πà‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</h4>
                    <div className="space-y-1 text-sm">
                        <p>‡∏ó‡πà‡∏≠‡∏¢‡πà‡∏≠‡∏¢: {costs.totalBranchPipeCost.toLocaleString()} ‡∏ö‡∏≤‡∏ó</p>
                        {costs.totalSecondaryPipeCost > 0 && (
                            <p>‡∏ó‡πà‡∏≠‡∏£‡∏≠‡∏á: {costs.totalSecondaryPipeCost.toLocaleString()} ‡∏ö‡∏≤‡∏ó</p>
                        )}
                        {costs.totalMainPipeCost > 0 && (
                            <p>‡∏ó‡πà‡∏≠‡∏´‡∏•‡∏±‡∏Å: {costs.totalMainPipeCost.toLocaleString()} ‡∏ö‡∏≤‡∏ó</p>
                        )}
                    </div>
                    <p className="text-xl font-bold">
                        {(
                            costs.totalBranchPipeCost +
                            costs.totalSecondaryPipeCost +
                            costs.totalMainPipeCost
                        ).toLocaleString()}{' '}
                        ‡∏ö‡∏≤‡∏ó
                    </p>
                </div>

                {/* ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î */}
                <div className="rounded bg-gradient-to-r from-green-600 to-blue-600 p-4 md:col-span-2 lg:col-span-3">
                    <h4 className="font-medium text-white">üíé ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</h4>
                    <p className="text-sm text-green-100">‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏∏‡∏ó‡∏ò‡∏¥ (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° VAT)</p>
                    <div className="mt-2 grid grid-cols-2 gap-4">
                        <div>
                            <p className="text-2xl font-bold text-white">
                                {costs.totalCost.toLocaleString()} ‡∏ö‡∏≤‡∏ó
                            </p>
                            <p className="mt-1 text-xs text-green-200">
                                * ‡∏£‡∏ß‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á
                            </p>
                        </div>
                        <div className="text-right">
                            {projectData?.useZones && projectData.zones.length > 1 && (
                                <div className="text-sm text-green-100">
                                    <p>
                                        ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡πÇ‡∏ã‡∏ô:{' '}
                                        {(
                                            costs.totalCost / projectData.zones.length
                                        ).toLocaleString()}{' '}
                                        ‡∏ö‡∏≤‡∏ó
                                    </p>
                                    <p>
                                        ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡πÑ‡∏£‡πà:{' '}
                                        {(
                                            costs.totalCost /
                                            (projectData.totalArea / 1600)
                                        ).toLocaleString()}{' '}
                                        ‡∏ö‡∏≤‡∏ó
                                    </p>
                                </div>
                            )}
                            {!projectData?.useZones && (
                                <div className="text-sm text-green-100">
                                    <p>
                                        ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡πÑ‡∏£‡πà:{' '}
                                        {(
                                            costs.totalCost /
                                            ((projectData?.totalArea || 1600) / 1600)
                                        ).toLocaleString()}{' '}
                                        ‡∏ö‡∏≤‡∏ó
                                    </p>
                                    <p>
                                        ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏ï‡πâ‡∏ô:{' '}
                                        {(
                                            costs.totalCost / (results.totalSprinklers || 1)
                                        ).toLocaleString()}{' '}
                                        ‡∏ö‡∏≤‡∏ó
                                    </p>
                                </div>
                            )}
                        </div>
                    </div>
                </div>
            </div>

            {/* ‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° */}
            <div className="mt-6 rounded bg-blue-900 p-4">
                <h3 className="mb-2 text-sm font-semibold text-blue-300">
                    üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå:
                </h3>
                <div className="grid grid-cols-1 gap-2 text-xs md:grid-cols-2">
                    <div>
                        <h4 className="mb-1 font-medium text-blue-200">‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:</h4>
                        <ul className="space-y-1 text-green-300">
                            {/* Check sprinklers */}
                            {Object.values(costs.sprinklerSummary).some(
                                (item) => item.sprinkler.score >= 70
                            ) && <li>‚Ä¢ ‡∏™‡∏õ‡∏£‡∏¥‡∏á‡πÄ‡∏Å‡∏≠‡∏£‡πå: ‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥</li>}
                            {/* Check pipes */}
                            {Object.values(costs.pipeSummary.branch).some(
                                (item) => item.pipe.isRecommended
                            ) && <li>‚Ä¢ ‡∏ó‡πà‡∏≠‡∏¢‡πà‡∏≠‡∏¢: ‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥</li>}
                            {Object.values(costs.pipeSummary.secondary).some(
                                (item) => item.pipe.isRecommended
                            ) && <li>‚Ä¢ ‡∏ó‡πà‡∏≠‡∏£‡∏≠‡∏á: ‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥</li>}
                            {Object.values(costs.pipeSummary.main).some(
                                (item) => item.pipe.isRecommended
                            ) && <li>‚Ä¢ ‡∏ó‡πà‡∏≠‡∏´‡∏•‡∏±‡∏Å: ‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥</li>}
                            {effectivePump?.isRecommended && (
                                <li>‚Ä¢ ‡∏õ‡∏±‡πä‡∏°: {effectivePump.productCode}</li>
                            )}
                        </ul>
                        {!(
                            Object.values(costs.sprinklerSummary).some(
                                (item) => item.sprinkler.score >= 70
                            ) ||
                            Object.values(costs.pipeSummary.branch).some(
                                (item) => item.pipe.isRecommended
                            ) ||
                            effectivePump?.isRecommended
                        ) && <p className="text-yellow-300">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥</p>}
                    </div>
                    <div>
                        <h4 className="mb-1 font-medium text-blue-200">‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å:</h4>
                        <ul className="space-y-1 text-yellow-300">
                            <li>‚Ä¢ ‡∏™‡∏õ‡∏£‡∏¥‡∏á‡πÄ‡∏Å‡∏≠‡∏£‡πå: {uniqueSprinklers} ‡∏ä‡∏ô‡∏¥‡∏î</li>
                            <li>‚Ä¢ ‡∏ó‡πà‡∏≠‡∏¢‡πà‡∏≠‡∏¢: {uniqueBranchPipes} ‡∏ä‡∏ô‡∏¥‡∏î</li>
                            {uniqueSecondaryPipes > 0 && (
                                <li>‚Ä¢ ‡∏ó‡πà‡∏≠‡∏£‡∏≠‡∏á: {uniqueSecondaryPipes} ‡∏ä‡∏ô‡∏¥‡∏î</li>
                            )}
                            {uniqueMainPipes > 0 && <li>‚Ä¢ ‡∏ó‡πà‡∏≠‡∏´‡∏•‡∏±‡∏Å: {uniqueMainPipes} ‡∏ä‡∏ô‡∏¥‡∏î</li>}
                            <li>‚Ä¢ ‡∏õ‡∏±‡πä‡∏°: 1 ‡∏ï‡∏±‡∏ß</li>
                        </ul>
                    </div>
                </div>
            </div>

            {/* ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° */}
            {costs.totalCost > 0 && (
                <div className="mt-4 rounded bg-purple-900 p-3">
                    <h3 className="mb-2 text-sm font-semibold text-purple-300">üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:</h3>
                    <div className="space-y-1 text-xs text-purple-100">
                        <p>‚Ä¢ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ + ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á)</p>
                        <p>‚Ä¢ ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠</p>
                        <p>‚Ä¢ ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏Ñ‡πà‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡∏∞‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏≠‡∏∑‡πà‡∏ô‡πÜ</p>
                        {projectData?.useZones && projectData.zones.length > 1 && (
                            <p>‚Ä¢ ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÇ‡∏ã‡∏ô‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô</p>
                        )}
                        {costs.totalCost > 100000 && (
                            <p>‚Ä¢ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà ‡∏≠‡∏≤‡∏à‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏û‡∏¥‡πÄ‡∏®‡∏©</p>
                        )}
                    </div>
                </div>
            )}

            {/* ‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏≠‡∏Å‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤ */}
            <div className="mt-6 text-center">
                <button
                    onClick={onQuotationClick}
                    className="rounded bg-gradient-to-r from-blue-500 to-purple-600 px-8 py-3 text-lg font-bold text-white hover:from-blue-600 hover:to-purple-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
                    disabled={costs.totalCost === 0}
                >
                    üìã ‡∏≠‡∏≠‡∏Å‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤
                </button>
                {costs.totalCost === 0 && (
                    <p className="mt-2 text-sm text-red-400">
                        ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏õ‡∏£‡∏¥‡∏á‡πÄ‡∏Å‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤
                    </p>
                )}
            </div>
        </div>
    );
};

export default CostSummary;
